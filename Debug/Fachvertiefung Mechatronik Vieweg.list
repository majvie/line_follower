
Fachvertiefung Mechatronik Vieweg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b494  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800b668  0800b668  0001b668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b928  0800b928  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b928  0800b928  0001b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b930  0800b930  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b934  0800b934  0001b934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000070  0800b9a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000818  0800b9a8  00020818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016521  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddd  00000000  00000000  000365c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c8  00000000  00000000  000393a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025511  00000000  00000000  0003b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d2a  00000000  00000000  00060d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e21ad  00000000  00000000  00077a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  00159c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b64c 	.word	0x0800b64c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800b64c 	.word	0x0800b64c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b96e 	b.w	8000ef0 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	468c      	mov	ip, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8083 	bne.w	8000d42 <__udivmoddi4+0x116>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d947      	bls.n	8000cd2 <__udivmoddi4+0xa6>
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b142      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c48:	f1c2 0020 	rsb	r0, r2, #32
 8000c4c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	ea40 0c01 	orr.w	ip, r0, r1
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbbc f6f8 	udiv	r6, ip, r8
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fb08 c116 	mls	r1, r8, r6, ip
 8000c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c70:	fb06 f10e 	mul.w	r1, r6, lr
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7e:	f080 8119 	bcs.w	8000eb4 <__udivmoddi4+0x288>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8116 	bls.w	8000eb4 <__udivmoddi4+0x288>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	443b      	add	r3, r7
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8105 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f240 8102 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	443c      	add	r4, r7
 8000cb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbc:	eba4 040e 	sub.w	r4, r4, lr
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b902      	cbnz	r2, 8000cd6 <__udivmoddi4+0xaa>
 8000cd4:	deff      	udf	#255	; 0xff
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	d150      	bne.n	8000d80 <__udivmoddi4+0x154>
 8000cde:	1bcb      	subs	r3, r1, r7
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	2601      	movs	r6, #1
 8000cea:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cee:	0c21      	lsrs	r1, r4, #16
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cfc:	428b      	cmp	r3, r1
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000d00:	1879      	adds	r1, r7, r1
 8000d02:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0xe2>
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	f200 80e9 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d0e:	4684      	mov	ip, r0
 8000d10:	1ac9      	subs	r1, r1, r3
 8000d12:	b2a3      	uxth	r3, r4
 8000d14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d20:	fb08 f800 	mul.w	r8, r8, r0
 8000d24:	45a0      	cmp	r8, r4
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x10c>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2e:	d202      	bcs.n	8000d36 <__udivmoddi4+0x10a>
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	f200 80d9 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d36:	4618      	mov	r0, r3
 8000d38:	eba4 0408 	sub.w	r4, r4, r8
 8000d3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d40:	e7bf      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0x12e>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80b1 	beq.w	8000eae <__udivmoddi4+0x282>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x1cc>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0x140>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80b8 	bhi.w	8000edc <__udivmoddi4+0x2b0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	468c      	mov	ip, r1
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a8      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7e:	e7a5      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f603 	lsr.w	r6, r0, r3
 8000d88:	4097      	lsls	r7, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d92:	40d9      	lsrs	r1, r3
 8000d94:	4330      	orrs	r0, r6
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d9c:	fa1f f887 	uxth.w	r8, r7
 8000da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f108 	mul.w	r1, r6, r8
 8000dac:	4299      	cmp	r1, r3
 8000dae:	fa04 f402 	lsl.w	r4, r4, r2
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x19c>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dba:	f080 808d 	bcs.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 808a 	bls.w	8000ed8 <__udivmoddi4+0x2ac>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b281      	uxth	r1, r0
 8000dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd8:	fb00 f308 	mul.w	r3, r0, r8
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x1c4>
 8000de0:	1879      	adds	r1, r7, r1
 8000de2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de6:	d273      	bcs.n	8000ed0 <__udivmoddi4+0x2a4>
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d971      	bls.n	8000ed0 <__udivmoddi4+0x2a4>
 8000dec:	3802      	subs	r0, #2
 8000dee:	4439      	add	r1, r7
 8000df0:	1acb      	subs	r3, r1, r3
 8000df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df6:	e778      	b.n	8000cea <__udivmoddi4+0xbe>
 8000df8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dfc:	fa03 f406 	lsl.w	r4, r3, r6
 8000e00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e04:	431c      	orrs	r4, r3
 8000e06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e16:	431f      	orrs	r7, r3
 8000e18:	0c3b      	lsrs	r3, r7, #16
 8000e1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1e:	fa1f f884 	uxth.w	r8, r4
 8000e22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	fa02 f206 	lsl.w	r2, r2, r6
 8000e34:	fa00 f306 	lsl.w	r3, r0, r6
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x220>
 8000e3a:	1861      	adds	r1, r4, r1
 8000e3c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e40:	d248      	bcs.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e42:	458a      	cmp	sl, r1
 8000e44:	d946      	bls.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e46:	f1a9 0902 	sub.w	r9, r9, #2
 8000e4a:	4421      	add	r1, r4
 8000e4c:	eba1 010a 	sub.w	r1, r1, sl
 8000e50:	b2bf      	uxth	r7, r7
 8000e52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5e:	fb00 f808 	mul.w	r8, r0, r8
 8000e62:	45b8      	cmp	r8, r7
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x24a>
 8000e66:	19e7      	adds	r7, r4, r7
 8000e68:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e6c:	d22e      	bcs.n	8000ecc <__udivmoddi4+0x2a0>
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d92c      	bls.n	8000ecc <__udivmoddi4+0x2a0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4427      	add	r7, r4
 8000e76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e7a:	eba7 0708 	sub.w	r7, r7, r8
 8000e7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e82:	454f      	cmp	r7, r9
 8000e84:	46c6      	mov	lr, r8
 8000e86:	4649      	mov	r1, r9
 8000e88:	d31a      	bcc.n	8000ec0 <__udivmoddi4+0x294>
 8000e8a:	d017      	beq.n	8000ebc <__udivmoddi4+0x290>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x27a>
 8000e8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e92:	eb67 0701 	sbc.w	r7, r7, r1
 8000e96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e9a:	40f2      	lsrs	r2, r6
 8000e9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ea0:	40f7      	lsrs	r7, r6
 8000ea2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea6:	2600      	movs	r6, #0
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e70b      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e9      	b.n	8000c8c <__udivmoddi4+0x60>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6fd      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ebc:	4543      	cmp	r3, r8
 8000ebe:	d2e5      	bcs.n	8000e8c <__udivmoddi4+0x260>
 8000ec0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0x260>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	e7d2      	b.n	8000e76 <__udivmoddi4+0x24a>
 8000ed0:	4660      	mov	r0, ip
 8000ed2:	e78d      	b.n	8000df0 <__udivmoddi4+0x1c4>
 8000ed4:	4681      	mov	r9, r0
 8000ed6:	e7b9      	b.n	8000e4c <__udivmoddi4+0x220>
 8000ed8:	4666      	mov	r6, ip
 8000eda:	e775      	b.n	8000dc8 <__udivmoddi4+0x19c>
 8000edc:	4630      	mov	r0, r6
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x14a>
 8000ee0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee4:	4439      	add	r1, r7
 8000ee6:	e713      	b.n	8000d10 <__udivmoddi4+0xe4>
 8000ee8:	3802      	subs	r0, #2
 8000eea:	443c      	add	r4, r7
 8000eec:	e724      	b.n	8000d38 <__udivmoddi4+0x10c>
 8000eee:	bf00      	nop

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <getI2CAddress>:
static fram_sys status;

//=============================================Private Functions===========================================================================//

static uint8_t getI2CAddress(uint8_t page)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	return ((MEM_ADDRESS << 3) | (page & 0x07)) << 1;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f003 030e 	and.w	r3, r3, #14
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <fram_write_private>:

static int fram_write_private(uint8_t page, uint16_t address, void* data, size_t dataLength)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	60ba      	str	r2, [r7, #8]
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
 8000f2e:	460b      	mov	r3, r1
 8000f30:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef ret;
#endif
#if BLOCKING_MODE == 1
	return HAL_I2C_Mem_Write(&hi2c1, getI2CAddress(page), address, I2C_MEMADD_SIZE_8BIT, data, dataLength, FRAM_BLOCK_TIMEOUT) == HAL_OK;
#else
	if(dataLength > FRAM_BUFFER_SIZE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f38:	d902      	bls.n	8000f40 <fram_write_private+0x20>
		return -2;
 8000f3a:	f06f 0301 	mvn.w	r3, #1
 8000f3e:	e053      	b.n	8000fe8 <fram_write_private+0xc8>
	while(fram_busy())
 8000f40:	bf00      	nop
 8000f42:	f000 f967 	bl	8001214 <fram_busy>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1fa      	bne.n	8000f42 <fram_write_private+0x22>
		;
	memcpy(writeBuffer, data, dataLength);
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	68b9      	ldr	r1, [r7, #8]
 8000f50:	4827      	ldr	r0, [pc, #156]	; (8000ff0 <fram_write_private+0xd0>)
 8000f52:	f008 fed3 	bl	8009cfc <memcpy>
	if((&hi2c1)->hdmatx != 0)
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <fram_write_private+0xd4>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <fram_write_private+0x64>
		ret = HAL_I2C_Mem_Write_DMA(&hi2c1, getI2CAddress(page), address, I2C_MEMADD_SIZE_8BIT, writeBuffer, dataLength);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ffc7 	bl	8000ef4 <getI2CAddress>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	89ba      	ldrh	r2, [r7, #12]
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <fram_write_private+0xd0>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <fram_write_private+0xd4>)
 8000f7a:	f003 ff69 	bl	8004e50 <HAL_I2C_Mem_Write_DMA>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75fb      	strb	r3, [r7, #23]
 8000f82:	e02b      	b.n	8000fdc <fram_write_private+0xbc>
	else if(__HAL_Interrupt_Is_Enabled(I2C1_EV_IRQn))
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <fram_write_private+0xd8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da12      	bge.n	8000fb2 <fram_write_private+0x92>
		ret = HAL_I2C_Mem_Write_IT(&hi2c1, getI2CAddress(page), address, I2C_MEMADD_SIZE_8BIT, data, dataLength);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffb0 	bl	8000ef4 <getI2CAddress>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b299      	uxth	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	89ba      	ldrh	r2, [r7, #12]
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <fram_write_private+0xd4>)
 8000fa8:	f003 fea0 	bl	8004cec <HAL_I2C_Mem_Write_IT>
 8000fac:	4603      	mov	r3, r0
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	e014      	b.n	8000fdc <fram_write_private+0xbc>
	else
		ret = HAL_I2C_Mem_Write(&hi2c1, getI2CAddress(page), address, I2C_MEMADD_SIZE_8BIT, data, dataLength, FRAM_BLOCK_TIMEOUT);
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff9d 	bl	8000ef4 <getI2CAddress>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b299      	uxth	r1, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	89ba      	ldrh	r2, [r7, #12]
 8000fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc8:	9002      	str	r0, [sp, #8]
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <fram_write_private+0xd4>)
 8000fd4:	f003 fb6a 	bl	80046ac <HAL_I2C_Mem_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
	return ret == HAL_OK;
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2301      	moveq	r3, #1
 8000fe4:	2300      	movne	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
#endif

}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000090 	.word	0x20000090
 8000ff4:	200005cc 	.word	0x200005cc
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <fram_read_private>:

static int fram_read_private(uint8_t page, uint16_t address, void* data, size_t dataLength)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af04      	add	r7, sp, #16
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4603      	mov	r3, r0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	460b      	mov	r3, r1
 800100c:	81bb      	strh	r3, [r7, #12]
	while(fram_busy())
 800100e:	bf00      	nop
 8001010:	f000 f900 	bl	8001214 <fram_busy>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1fa      	bne.n	8001010 <fram_read_private+0x14>
			;
	return HAL_I2C_Mem_Read(&hi2c1, getI2CAddress(page), address, I2C_MEMADD_SIZE_8BIT, data, dataLength, FRAM_BLOCK_TIMEOUT) == HAL_OK;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff69 	bl	8000ef4 <getI2CAddress>
 8001022:	4603      	mov	r3, r0
 8001024:	b299      	uxth	r1, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	b29b      	uxth	r3, r3
 800102a:	89ba      	ldrh	r2, [r7, #12]
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	9002      	str	r0, [sp, #8]
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <fram_read_private+0x58>)
 800103c:	f003 fc30 	bl	80048a0 <HAL_I2C_Mem_Read>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200005cc 	.word	0x200005cc

08001058 <fram_init>:
{
	fram_init();
}

void fram_init()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET) {
 800105c:	4867      	ldr	r0, [pc, #412]	; (80011fc <fram_init+0x1a4>)
 800105e:	f004 fac9 	bl	80055f4 <HAL_I2C_GetState>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <fram_init+0x16>
		// MX_I2C1_Init();
		oprintf("I2C1 must be initialised. \r\n");
 8001068:	4865      	ldr	r0, [pc, #404]	; (8001200 <fram_init+0x1a8>)
 800106a:	f000 fdf5 	bl	8001c58 <oprintf>
  	}

	if(resetFlag == 0)
 800106e:	4b65      	ldr	r3, [pc, #404]	; (8001204 <fram_init+0x1ac>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <fram_init+0x22>
		system_init();
 8001076:	f000 f8df 	bl	8001238 <system_init>

	memset(&status, 0x00, sizeof(fram_sys));
 800107a:	2228      	movs	r2, #40	; 0x28
 800107c:	2100      	movs	r1, #0
 800107e:	4862      	ldr	r0, [pc, #392]	; (8001208 <fram_init+0x1b0>)
 8001080:	f008 fe4a 	bl	8009d18 <memset>
#if FRAM_CLEAR_ON_INIT == 1
	memError |= !fram_write_private(0, 0, &status, sizeof(fram_sys));
#endif
	memError |= !fram_read_private(0, 0, &status, sizeof(fram_sys));
 8001084:	2328      	movs	r3, #40	; 0x28
 8001086:	4a60      	ldr	r2, [pc, #384]	; (8001208 <fram_init+0x1b0>)
 8001088:	2100      	movs	r1, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f7ff ffb6 	bl	8000ffc <fram_read_private>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
 800109c:	b25a      	sxtb	r2, r3
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <fram_init+0x1b4>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <fram_init+0x1b4>)
 80010ac:	701a      	strb	r2, [r3, #0]
	if(!status.flags.intialized)
 80010ae:	4b56      	ldr	r3, [pc, #344]	; (8001208 <fram_init+0x1b0>)
 80010b0:	7c1b      	ldrb	r3, [r3, #16]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d123      	bne.n	8001104 <fram_init+0xac>
	{
		status.flags.intialized = 1;
 80010bc:	4a52      	ldr	r2, [pc, #328]	; (8001208 <fram_init+0x1b0>)
 80010be:	7c13      	ldrb	r3, [r2, #16]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	7413      	strb	r3, [r2, #16]
		memcpy(&(status.name), MODULE_NAME, strlen(MODULE_NAME));
 80010c6:	220b      	movs	r2, #11
 80010c8:	4951      	ldr	r1, [pc, #324]	; (8001210 <fram_init+0x1b8>)
 80010ca:	484f      	ldr	r0, [pc, #316]	; (8001208 <fram_init+0x1b0>)
 80010cc:	f008 fe16 	bl	8009cfc <memcpy>
		memError |= !fram_write_private(0, 0, &status, sizeof(fram_sys));
 80010d0:	2328      	movs	r3, #40	; 0x28
 80010d2:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <fram_init+0x1b0>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff ff22 	bl	8000f20 <fram_write_private>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf0c      	ite	eq
 80010e2:	2301      	moveq	r3, #1
 80010e4:	2300      	movne	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <fram_init+0x1b4>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	4b45      	ldr	r3, [pc, #276]	; (800120c <fram_init+0x1b4>)
 80010f8:	701a      	strb	r2, [r3, #0]
		memset(&status, 0x00, sizeof(fram_sys));
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4842      	ldr	r0, [pc, #264]	; (8001208 <fram_init+0x1b0>)
 8001100:	f008 fe0a 	bl	8009d18 <memset>
	}
	memError |= !fram_read_private(0, 0, &status, sizeof(fram_sys));
 8001104:	2328      	movs	r3, #40	; 0x28
 8001106:	4a40      	ldr	r2, [pc, #256]	; (8001208 <fram_init+0x1b0>)
 8001108:	2100      	movs	r1, #0
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff ff76 	bl	8000ffc <fram_read_private>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf0c      	ite	eq
 8001116:	2301      	moveq	r3, #1
 8001118:	2300      	movne	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <fram_init+0x1b4>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b25b      	sxtb	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b25b      	sxtb	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b38      	ldr	r3, [pc, #224]	; (800120c <fram_init+0x1b4>)
 800112c:	701a      	strb	r2, [r3, #0]

	status.totalReset_cycles++;
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <fram_init+0x1b0>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	3301      	adds	r3, #1
 8001134:	4a34      	ldr	r2, [pc, #208]	; (8001208 <fram_init+0x1b0>)
 8001136:	6153      	str	r3, [r2, #20]

	switch(getResetFlag())
 8001138:	f000 f8d6 	bl	80012e8 <getResetFlag>
 800113c:	4603      	mov	r3, r0
 800113e:	3b79      	subs	r3, #121	; 0x79
 8001140:	2b06      	cmp	r3, #6
 8001142:	d842      	bhi.n	80011ca <fram_init+0x172>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <fram_init+0xf4>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001169 	.word	0x08001169
 8001150:	08001177 	.word	0x08001177
 8001154:	08001185 	.word	0x08001185
 8001158:	08001193 	.word	0x08001193
 800115c:	080011a1 	.word	0x080011a1
 8001160:	080011af 	.word	0x080011af
 8001164:	080011bd 	.word	0x080011bd
	{
		case RCC_FLAG_BORRST:
			status.borResets++;
 8001168:	4b27      	ldr	r3, [pc, #156]	; (8001208 <fram_init+0x1b0>)
 800116a:	8b1b      	ldrh	r3, [r3, #24]
 800116c:	3301      	adds	r3, #1
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <fram_init+0x1b0>)
 8001172:	831a      	strh	r2, [r3, #24]
			break;
 8001174:	e02a      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_PINRST:
			status.pinResets++;
 8001176:	4b24      	ldr	r3, [pc, #144]	; (8001208 <fram_init+0x1b0>)
 8001178:	8b5b      	ldrh	r3, [r3, #26]
 800117a:	3301      	adds	r3, #1
 800117c:	b29a      	uxth	r2, r3
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <fram_init+0x1b0>)
 8001180:	835a      	strh	r2, [r3, #26]
			break;
 8001182:	e023      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_PORRST:
			status.porResets++;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <fram_init+0x1b0>)
 8001186:	8b9b      	ldrh	r3, [r3, #28]
 8001188:	3301      	adds	r3, #1
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <fram_init+0x1b0>)
 800118e:	839a      	strh	r2, [r3, #28]
			break;
 8001190:	e01c      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_SFTRST:
			status.softwareResets++;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <fram_init+0x1b0>)
 8001194:	8bdb      	ldrh	r3, [r3, #30]
 8001196:	3301      	adds	r3, #1
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <fram_init+0x1b0>)
 800119c:	83da      	strh	r2, [r3, #30]
			break;
 800119e:	e015      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_IWDGRST:
			status.independendWatchdogResets++;
 80011a0:	4b19      	ldr	r3, [pc, #100]	; (8001208 <fram_init+0x1b0>)
 80011a2:	8c1b      	ldrh	r3, [r3, #32]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <fram_init+0x1b0>)
 80011aa:	841a      	strh	r2, [r3, #32]
			break;
 80011ac:	e00e      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_WWDGRST:
			status.windowedWatchdogResets++;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <fram_init+0x1b0>)
 80011b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80011b2:	3301      	adds	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <fram_init+0x1b0>)
 80011b8:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80011ba:	e007      	b.n	80011cc <fram_init+0x174>
		case RCC_FLAG_LPWRRST:
			status.lowPowerResets++;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <fram_init+0x1b0>)
 80011be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80011c0:	3301      	adds	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <fram_init+0x1b0>)
 80011c6:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80011c8:	e000      	b.n	80011cc <fram_init+0x174>
		default:
			break;
 80011ca:	bf00      	nop
	}

	memError |= !fram_write_private(0, 0, &status, sizeof(fram_sys));
 80011cc:	2328      	movs	r3, #40	; 0x28
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <fram_init+0x1b0>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fea4 	bl	8000f20 <fram_write_private>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <fram_init+0x1b4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <fram_init+0x1b4>)
 80011f4:	701a      	strb	r2, [r3, #0]
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200005cc 	.word	0x200005cc
 8001200:	0800b668 	.word	0x0800b668
 8001204:	2000008c 	.word	0x2000008c
 8001208:	20000478 	.word	0x20000478
 800120c:	2000008d 	.word	0x2000008d
 8001210:	0800b688 	.word	0x0800b688

08001214 <fram_busy>:

int fram_busy()
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	return hi2c1.State != HAL_I2C_STATE_READY;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <fram_busy+0x20>)
 800121a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b20      	cmp	r3, #32
 8001222:	bf14      	ite	ne
 8001224:	2301      	movne	r3, #1
 8001226:	2300      	moveq	r3, #0
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	200005cc 	.word	0x200005cc

08001238 <system_init>:
	return &status;
}
//===============================================System Interface===========================================================================//

void system_init()
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
	if(__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <system_init+0xa8>)
 800123e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <system_init+0x18>
		resetFlag = RCC_FLAG_BORRST;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <system_init+0xac>)
 800124a:	2279      	movs	r2, #121	; 0x79
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e03c      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <system_init+0xa8>)
 8001252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <system_init+0x2c>
		resetFlag = RCC_FLAG_PINRST;
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <system_init+0xac>)
 800125e:	227a      	movs	r2, #122	; 0x7a
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e032      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <system_init+0xa8>)
 8001266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <system_init+0x40>
		resetFlag = RCC_FLAG_PORRST;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <system_init+0xac>)
 8001272:	227b      	movs	r2, #123	; 0x7b
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	e028      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <system_init+0xa8>)
 800127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <system_init+0x54>
		resetFlag = RCC_FLAG_SFTRST;
 8001284:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <system_init+0xac>)
 8001286:	227c      	movs	r2, #124	; 0x7c
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e01e      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <system_init+0xa8>)
 800128e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001290:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <system_init+0x68>
		resetFlag = RCC_FLAG_IWDGRST;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <system_init+0xac>)
 800129a:	227d      	movs	r2, #125	; 0x7d
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e014      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <system_init+0xa8>)
 80012a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <system_init+0x7c>
		resetFlag = RCC_FLAG_WWDGRST;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <system_init+0xac>)
 80012ae:	227e      	movs	r2, #126	; 0x7e
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	e00a      	b.n	80012ca <system_init+0x92>
	else if(__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <system_init+0xa8>)
 80012b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da03      	bge.n	80012c4 <system_init+0x8c>
		resetFlag = RCC_FLAG_LPWRRST;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <system_init+0xac>)
 80012be:	227f      	movs	r2, #127	; 0x7f
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e002      	b.n	80012ca <system_init+0x92>
	else
		resetFlag = 0;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <system_init+0xac>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]

	__HAL_RCC_CLEAR_RESET_FLAGS();
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <system_init+0xa8>)
 80012cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <system_init+0xa8>)
 80012d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012d4:	6753      	str	r3, [r2, #116]	; 0x74
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40023800 	.word	0x40023800
 80012e4:	2000008c 	.word	0x2000008c

080012e8 <getResetFlag>:
	}
	return sprintf(buffer,"%s: %lX%lX%lX",SYSTEM_NAME,STM32_UUID[0],STM32_UUID[1],STM32_UUID[2]);
}

uint8_t getResetFlag()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	return resetFlag;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <getResetFlag+0x14>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	2000008c 	.word	0x2000008c

08001300 <HAL_TIM_IC_CaptureCallback>:
int timeDiffsIndex = 0;
uint32_t rotationsPerMinute = 0;


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim3)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	static int firstCaptured = 0;
	static uint32_t firstTimeStamp = 0;
	static uint32_t secondTimeStamp = 0;

	if (firstCaptured == 0) {
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10a      	bne.n	8001326 <HAL_TIM_IC_CaptureCallback+0x26>
		firstTimeStamp = HAL_TIM_ReadCapturedValue(htim3, TIM_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f007 fc4e 	bl	8008bb4 <HAL_TIM_ReadCapturedValue>
 8001318:	4603      	mov	r3, r0
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800131c:	6013      	str	r3, [r2, #0]
		firstCaptured = 1;
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
		timeDiffs[timeDiffsIndex % 5] = timeDiff;
		timeDiffsIndex++;

		firstCaptured = 0;
	}
}
 8001324:	e041      	b.n	80013aa <HAL_TIM_IC_CaptureCallback+0xaa>
		secondTimeStamp = HAL_TIM_ReadCapturedValue(htim3, TIM_CHANNEL_1);
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f007 fc43 	bl	8008bb4 <HAL_TIM_ReadCapturedValue>
 800132e:	4603      	mov	r3, r0
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001332:	6013      	str	r3, [r2, #0]
		int timeDiff = (secondTimeStamp - firstTimeStamp) % TIM3->ARR;
 8001334:	4b21      	ldr	r3, [pc, #132]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001340:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001342:	fbb3 f1f2 	udiv	r1, r3, r2
 8001346:	fb02 f201 	mul.w	r2, r2, r1
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
		if (secondTimeStamp >= firstTimeStamp) {
 800134e:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d306      	bcc.n	8001368 <HAL_TIM_IC_CaptureCallback+0x68>
			timeDiff = secondTimeStamp - firstTimeStamp;
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e008      	b.n	800137a <HAL_TIM_IC_CaptureCallback+0x7a>
			timeDiff = TIM3->ARR + secondTimeStamp - firstTimeStamp;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	441a      	add	r2, r3
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	60fb      	str	r3, [r7, #12]
		timeDiffs[timeDiffsIndex % 5] = timeDiff;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001380:	fb83 2301 	smull	r2, r3, r3, r1
 8001384:	105a      	asrs	r2, r3, #1
 8001386:	17cb      	asrs	r3, r1, #31
 8001388:	1ad2      	subs	r2, r2, r3
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	1aca      	subs	r2, r1, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	490d      	ldr	r1, [pc, #52]	; (80013cc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001396:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		timeDiffsIndex++;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80013a2:	6013      	str	r3, [r2, #0]
		firstCaptured = 0;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200004bc 	.word	0x200004bc
 80013b8:	200004c0 	.word	0x200004c0
 80013bc:	200004c4 	.word	0x200004c4
 80013c0:	40000400 	.word	0x40000400
 80013c4:	200004b4 	.word	0x200004b4
 80013c8:	66666667 	.word	0x66666667
 80013cc:	200004a0 	.word	0x200004a0

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  #ifdef BOARD_UTILITIES_IN_USE
 	  system_init();
 80013d6:	f7ff ff2f 	bl	8001238 <system_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f001 fbab 	bl	8002b34 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f86f 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 fbb5 	bl	8001b50 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 fb75 	bl	8001ad4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fb49 	bl	8001a80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80013ee:	f000 f8db 	bl	80015a8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013f2:	f000 f967 	bl	80016c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013f6:	f000 fa1d 	bl	8001834 <MX_TIM3_Init>
  MX_TIM4_Init();
 80013fa:	f000 fa6f 	bl	80018dc <MX_TIM4_Init>
  MX_TIM8_Init();
 80013fe:	f000 faef 	bl	80019e0 <MX_TIM8_Init>
  MX_I2C1_Init();
 8001402:	f000 f931 	bl	8001668 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_values, 2);
 8001406:	2202      	movs	r2, #2
 8001408:	4925      	ldr	r1, [pc, #148]	; (80014a0 <main+0xd0>)
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <main+0xd4>)
 800140c:	f001 fdac 	bl	8002f68 <HAL_ADC_Start_DMA>

  // Starting the PWM signals for the BLDC

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001410:	2100      	movs	r1, #0
 8001412:	4825      	ldr	r0, [pc, #148]	; (80014a8 <main+0xd8>)
 8001414:	f006 fe76 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001418:	2104      	movs	r1, #4
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <main+0xd8>)
 800141c:	f006 fe72 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001420:	2108      	movs	r1, #8
 8001422:	4821      	ldr	r0, [pc, #132]	; (80014a8 <main+0xd8>)
 8001424:	f006 fe6e 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 8001428:	4820      	ldr	r0, [pc, #128]	; (80014ac <main+0xdc>)
 800142a:	f006 fda1 	bl	8007f70 <HAL_TIM_Base_Start_IT>


  // Starting the PWM signals for the actuator arm

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	481f      	ldr	r0, [pc, #124]	; (80014b0 <main+0xe0>)
 8001432:	f006 fe67 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	481d      	ldr	r0, [pc, #116]	; (80014b0 <main+0xe0>)
 800143a:	f006 fe63 	bl	8008104 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800143e:	481c      	ldr	r0, [pc, #112]	; (80014b0 <main+0xe0>)
 8001440:	f006 fd96 	bl	8007f70 <HAL_TIM_Base_Start_IT>


  // Starting tim3 for magnet sensor
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001444:	2100      	movs	r1, #0
 8001446:	481b      	ldr	r0, [pc, #108]	; (80014b4 <main+0xe4>)
 8001448:	f006 ff74 	bl	8008334 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE );
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <main+0xe4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <main+0xe4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	60da      	str	r2, [r3, #12]

  // Start segment display
  tm1637Init();
 800145c:	f000 fc54 	bl	8001d08 <tm1637Init>


  int ii = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]

  #ifdef BOARD_FRAM_IN_USE
    fram_init();
 8001464:	f7ff fdf8 	bl	8001058 <fram_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	oprintf( "%ld: \t ADC-Value1:%ld \t ADC-Value2: %ld \t Drehzahl : %ld U/min \r\n", ii, adc_values[0], adc_values[1], rotationsPerMinute + 1);
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <main+0xd0>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <main+0xd0>)
 800146e:	6859      	ldr	r1, [r3, #4]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <main+0xe8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3301      	adds	r3, #1
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	460b      	mov	r3, r1
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <main+0xec>)
 800147e:	f000 fbeb 	bl	8001c58 <oprintf>
	tm1637DisplayDecimal((int) rotationsPerMinute + 1, 0);
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <main+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fc84 	bl	8001d98 <tm1637DisplayDecimal>

	ii++;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]

	HAL_Delay(1000);
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f001 fbbd 	bl	8002c18 <HAL_Delay>
	oprintf( "%ld: \t ADC-Value1:%ld \t ADC-Value2: %ld \t Drehzahl : %ld U/min \r\n", ii, adc_values[0], adc_values[1], rotationsPerMinute + 1);
 800149e:	e7e3      	b.n	8001468 <main+0x98>
 80014a0:	200007fc 	.word	0x200007fc
 80014a4:	20000668 	.word	0x20000668
 80014a8:	20000710 	.word	0x20000710
 80014ac:	200004dc 	.word	0x200004dc
 80014b0:	20000524 	.word	0x20000524
 80014b4:	20000620 	.word	0x20000620
 80014b8:	200004b8 	.word	0x200004b8
 80014bc:	0800b6a4 	.word	0x0800b6a4

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	2234      	movs	r2, #52	; 0x34
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f008 fc22 	bl	8009d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <SystemClock_Config+0xe0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a2c      	ldr	r2, [pc, #176]	; (80015a0 <SystemClock_Config+0xe0>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <SystemClock_Config+0xe0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <SystemClock_Config+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <SystemClock_Config+0xe4>)
 800150a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <SystemClock_Config+0xe4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151c:	2301      	movs	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001530:	2308      	movs	r3, #8
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001534:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001538:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153e:	2302      	movs	r3, #2
 8001540:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001542:	2302      	movs	r3, #2
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4618      	mov	r0, r3
 800154c:	f006 fa22 	bl	8007994 <HAL_RCC_OscConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001556:	f000 fbd1 	bl	8001cfc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800155a:	f005 feff 	bl	800735c <HAL_PWREx_EnableOverDrive>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001564:	f000 fbca 	bl	8001cfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001568:	230f      	movs	r3, #15
 800156a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156c:	2302      	movs	r3, #2
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001574:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800157a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2105      	movs	r1, #5
 8001586:	4618      	mov	r0, r3
 8001588:	f005 ff38 	bl	80073fc <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001592:	f000 fbb3 	bl	8001cfc <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	; 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015ba:	4b28      	ldr	r3, [pc, #160]	; (800165c <MX_ADC1_Init+0xb4>)
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <MX_ADC1_Init+0xb8>)
 80015be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <MX_ADC1_Init+0xb4>)
 80015c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c8:	4b24      	ldr	r3, [pc, #144]	; (800165c <MX_ADC1_Init+0xb4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <MX_ADC1_Init+0xb4>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <MX_ADC1_Init+0xb4>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_ADC1_Init+0xb4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_ADC1_Init+0xb4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_ADC1_Init+0xb4>)
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <MX_ADC1_Init+0xbc>)
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_ADC1_Init+0xb4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_ADC1_Init+0xb4>)
 80015f6:	2202      	movs	r2, #2
 80015f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_ADC1_Init+0xb4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_ADC1_Init+0xb4>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001608:	4814      	ldr	r0, [pc, #80]	; (800165c <MX_ADC1_Init+0xb4>)
 800160a:	f001 fb29 	bl	8002c60 <HAL_ADC_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001614:	f000 fb72 	bl	8001cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800161c:	2301      	movs	r3, #1
 800161e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001620:	2301      	movs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_ADC1_Init+0xb4>)
 800162a:	f001 fdd5 	bl	80031d8 <HAL_ADC_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001634:	f000 fb62 	bl	8001cfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001638:	2301      	movs	r3, #1
 800163a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800163c:	2302      	movs	r3, #2
 800163e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_ADC1_Init+0xb4>)
 8001646:	f001 fdc7 	bl	80031d8 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001650:	f000 fb54 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000668 	.word	0x20000668
 8001660:	40012000 	.word	0x40012000
 8001664:	0f000001 	.word	0x0f000001

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f002 febd 	bl	8004424 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 fb24 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200005cc 	.word	0x200005cc
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00061a80 	.word	0x00061a80

080016c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b096      	sub	sp, #88	; 0x58
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2220      	movs	r2, #32
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f008 fb0b 	bl	8009d18 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <MX_TIM1_Init+0x168>)
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <MX_TIM1_Init+0x16c>)
 8001706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <MX_TIM1_Init+0x168>)
 800170a:	2213      	movs	r2, #19
 800170c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <MX_TIM1_Init+0x168>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 499;
 8001714:	4b45      	ldr	r3, [pc, #276]	; (800182c <MX_TIM1_Init+0x168>)
 8001716:	f240 12f3 	movw	r2, #499	; 0x1f3
 800171a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <MX_TIM1_Init+0x168>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001722:	4b42      	ldr	r3, [pc, #264]	; (800182c <MX_TIM1_Init+0x168>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001728:	4b40      	ldr	r3, [pc, #256]	; (800182c <MX_TIM1_Init+0x168>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800172e:	483f      	ldr	r0, [pc, #252]	; (800182c <MX_TIM1_Init+0x168>)
 8001730:	f006 fbce 	bl	8007ed0 <HAL_TIM_Base_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800173a:	f000 fadf 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001748:	4619      	mov	r1, r3
 800174a:	4838      	ldr	r0, [pc, #224]	; (800182c <MX_TIM1_Init+0x168>)
 800174c:	f007 f96e 	bl	8008a2c <HAL_TIM_ConfigClockSource>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001756:	f000 fad1 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800175a:	4834      	ldr	r0, [pc, #208]	; (800182c <MX_TIM1_Init+0x168>)
 800175c:	f006 fc78 	bl	8008050 <HAL_TIM_PWM_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001766:	f000 fac9 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <MX_TIM1_Init+0x168>)
 800177a:	f007 fec1 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001784:	f000 faba 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001788:	2360      	movs	r3, #96	; 0x60
 800178a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001790:	2300      	movs	r3, #0
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <MX_TIM1_Init+0x168>)
 80017ae:	f007 f87f 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80017b8:	f000 faa0 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c0:	2204      	movs	r2, #4
 80017c2:	4619      	mov	r1, r3
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <MX_TIM1_Init+0x168>)
 80017c6:	f007 f873 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017d0:	f000 fa94 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d8:	2208      	movs	r2, #8
 80017da:	4619      	mov	r1, r3
 80017dc:	4813      	ldr	r0, [pc, #76]	; (800182c <MX_TIM1_Init+0x168>)
 80017de:	f007 f867 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80017e8:	f000 fa88 	bl	8001cfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001804:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <MX_TIM1_Init+0x168>)
 8001810:	f007 fef2 	bl	80095f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800181a:	f000 fa6f 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4803      	ldr	r0, [pc, #12]	; (800182c <MX_TIM1_Init+0x168>)
 8001820:	f000 fdf8 	bl	8002414 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	; 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000710 	.word	0x20000710
 8001830:	40010000 	.word	0x40010000

08001834 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183a:	f107 0310 	add.w	r3, r7, #16
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001844:	463b      	mov	r3, r7
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <MX_TIM3_Init+0xa4>)
 8001854:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2999;
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001858:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800185c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001866:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800186a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM3_Init+0xa0>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <MX_TIM3_Init+0xa0>)
 800187a:	f006 fd0b 	bl	8008294 <HAL_TIM_IC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001884:	f000 fa3a 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <MX_TIM3_Init+0xa0>)
 8001898:	f007 fe32 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80018a2:	f000 fa2b 	bl	8001cfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018a6:	2302      	movs	r3, #2
 80018a8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018aa:	2301      	movs	r3, #1
 80018ac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_TIM3_Init+0xa0>)
 80018be:	f006 ff63 	bl	8008788 <HAL_TIM_IC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018c8:	f000 fa18 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000620 	.word	0x20000620
 80018d8:	40000400 	.word	0x40000400

080018dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	; 0x38
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800190c:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <MX_TIM4_Init+0xfc>)
 800190e:	4a33      	ldr	r2, [pc, #204]	; (80019dc <MX_TIM4_Init+0x100>)
 8001910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8001912:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001914:	2209      	movs	r2, #9
 8001916:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_TIM4_Init+0xfc>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001920:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001924:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b2c      	ldr	r3, [pc, #176]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_TIM4_Init+0xfc>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001932:	4829      	ldr	r0, [pc, #164]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001934:	f006 facc 	bl	8007ed0 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800193e:	f000 f9dd 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194c:	4619      	mov	r1, r3
 800194e:	4822      	ldr	r0, [pc, #136]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001950:	f007 f86c 	bl	8008a2c <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800195a:	f000 f9cf 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800195e:	481e      	ldr	r0, [pc, #120]	; (80019d8 <MX_TIM4_Init+0xfc>)
 8001960:	f006 fb76 	bl	8008050 <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800196a:	f000 f9c7 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001976:	f107 0320 	add.w	r3, r7, #32
 800197a:	4619      	mov	r1, r3
 800197c:	4816      	ldr	r0, [pc, #88]	; (80019d8 <MX_TIM4_Init+0xfc>)
 800197e:	f007 fdbf 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001988:	f000 f9b8 	bl	8001cfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	; (80019d8 <MX_TIM4_Init+0xfc>)
 80019a4:	f006 ff84 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019ae:	f000 f9a5 	bl	8001cfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM4_Init+0xfc>)
 80019ba:	f006 ff79 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80019c4:	f000 f99a 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM4_Init+0xfc>)
 80019ca:	f000 fd23 	bl	8002414 <HAL_TIM_MspPostInit>

}
 80019ce:	bf00      	nop
 80019d0:	3738      	adds	r7, #56	; 0x38
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000524 	.word	0x20000524
 80019dc:	40000800 	.word	0x40000800

080019e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019fc:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM8_Init+0x98>)
 80019fe:	4a1f      	ldr	r2, [pc, #124]	; (8001a7c <MX_TIM8_Init+0x9c>)
 8001a00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 199;
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a04:	22c7      	movs	r2, #199	; 0xc7
 8001a06:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4000;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a10:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a14:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a2a:	f006 fa51 	bl	8007ed0 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001a34:	f000 f962 	bl	8001cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a46:	f006 fff1 	bl	8008a2c <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001a50:	f000 f954 	bl	8001cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_TIM8_Init+0x98>)
 8001a62:	f007 fd4d 	bl	8009500 <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001a6c:	f000 f946 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200004dc 	.word	0x200004dc
 8001a7c:	40010400 	.word	0x40010400

08001a80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <MX_USART2_UART_Init+0x50>)
 8001a88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f007 fe04 	bl	80096c4 <HAL_UART_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f91b 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200007b8 	.word	0x200007b8
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <MX_DMA_Init+0x78>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <MX_DMA_Init+0x78>)
 8001ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <MX_DMA_Init+0x78>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <MX_DMA_Init+0x78>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <MX_DMA_Init+0x78>)
 8001b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_DMA_Init+0x78>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	603b      	str	r3, [r7, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	200b      	movs	r0, #11
 8001b18:	f001 fef3 	bl	8003902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b1c:	200b      	movs	r0, #11
 8001b1e:	f001 ff0c 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	2011      	movs	r0, #17
 8001b28:	f001 feeb 	bl	8003902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001b2c:	2011      	movs	r0, #17
 8001b2e:	f001 ff04 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2038      	movs	r0, #56	; 0x38
 8001b38:	f001 fee3 	bl	8003902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b3c:	2038      	movs	r0, #56	; 0x38
 8001b3e:	f001 fefc 	bl	800393a <HAL_NVIC_EnableIRQ>

}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800

08001b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b36      	ldr	r3, [pc, #216]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a35      	ldr	r2, [pc, #212]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b33      	ldr	r3, [pc, #204]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a27      	ldr	r2, [pc, #156]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001bc4:	f043 0302 	orr.w	r3, r3, #2
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_GPIO_Init+0xf4>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	481b      	ldr	r0, [pc, #108]	; (8001c48 <MX_GPIO_Init+0xf8>)
 8001bdc:	f002 fc08 	bl	80043f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|OID_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	2106      	movs	r1, #6
 8001be4:	4819      	ldr	r0, [pc, #100]	; (8001c4c <MX_GPIO_Init+0xfc>)
 8001be6:	f002 fc03 	bl	80043f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_GPIO_Init+0x100>)
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4815      	ldr	r0, [pc, #84]	; (8001c54 <MX_GPIO_Init+0x104>)
 8001c00:	f002 fa62 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c04:	2320      	movs	r3, #32
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	480b      	ldr	r0, [pc, #44]	; (8001c48 <MX_GPIO_Init+0xf8>)
 8001c1c:	f002 fa54 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 OID_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|OID_Pin;
 8001c20:	2306      	movs	r3, #6
 8001c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	4619      	mov	r1, r3
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_GPIO_Init+0xfc>)
 8001c38:	f002 fa46 	bl	80040c8 <HAL_GPIO_Init>

}
 8001c3c:	bf00      	nop
 8001c3e:	3728      	adds	r7, #40	; 0x28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	10210000 	.word	0x10210000
 8001c54:	40020800 	.word	0x40020800

08001c58 <oprintf>:

/* USER CODE BEGIN 4 */
// Simple own printf for communication via USB-UART
void oprintf(const char *format, ...) {
 8001c58:	b40f      	push	{r0, r1, r2, r3}
 8001c5a:	b5b0      	push	{r4, r5, r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	466b      	mov	r3, sp
 8001c62:	461d      	mov	r5, r3
  int len;
  va_list args;
  va_start(args, format);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	603b      	str	r3, [r7, #0]

  // determine how long the result will be
  len = vsnprintf(NULL, 0, format, args);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6a3a      	ldr	r2, [r7, #32]
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2000      	movs	r0, #0
 8001c72:	f008 f885 	bl	8009d80 <vsniprintf>
 8001c76:	60f8      	str	r0, [r7, #12]

  // reserve the string and generate it.
  char tx_buf[len + 1];
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1c5c      	adds	r4, r3, #1
 8001c7c:	1e63      	subs	r3, r4, #1
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4623      	mov	r3, r4
 8001c82:	4618      	mov	r0, r3
 8001c84:	f04f 0100 	mov.w	r1, #0
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	00cb      	lsls	r3, r1, #3
 8001c92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c96:	00c2      	lsls	r2, r0, #3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	00cb      	lsls	r3, r1, #3
 8001caa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cae:	00c2      	lsls	r2, r0, #3
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	3307      	adds	r3, #7
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	ebad 0d03 	sub.w	sp, sp, r3
 8001cbc:	466b      	mov	r3, sp
 8001cbe:	3300      	adds	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  vsprintf(tx_buf, format, args);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	6a39      	ldr	r1, [r7, #32]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f008 f87d 	bl	8009dc8 <vsiprintf>

  HAL_UART_Transmit(&huart2, (uint8_t*) tx_buf, strlen(tx_buf), 50);
 8001cce:	687c      	ldr	r4, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fa9c 	bl	8000210 <strlen>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	2332      	movs	r3, #50	; 0x32
 8001cde:	4621      	mov	r1, r4
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <oprintf+0xa0>)
 8001ce2:	f007 fd3c 	bl	800975e <HAL_UART_Transmit>
 8001ce6:	46ad      	mov	sp, r5

  va_end(args);
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001cf2:	b004      	add	sp, #16
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200007b8 	.word	0x200007b8

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
}
 8001d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <Error_Handler+0x8>
	...

08001d08 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <tm1637Init+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <tm1637Init+0x88>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <tm1637Init+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	607b      	str	r3, [r7, #4]
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <tm1637Init+0x88>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <tm1637Init+0x88>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <tm1637Init+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 8001d5a:	2311      	movs	r3, #17
 8001d5c:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8001d62:	2304      	movs	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4809      	ldr	r0, [pc, #36]	; (8001d94 <tm1637Init+0x8c>)
 8001d6e:	f002 f9ab 	bl	80040c8 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8001d72:	2302      	movs	r3, #2
 8001d74:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	; (8001d94 <tm1637Init+0x8c>)
 8001d7e:	f002 f9a3 	bl	80040c8 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8001d82:	2008      	movs	r0, #8
 8001d84:	f000 f876 	bl	8001e74 <tm1637SetBrightness>
}
 8001d88:	bf00      	nop
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020400 	.word	0x40020400

08001d98 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	e032      	b.n	8001e0e <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <tm1637DisplayDecimal+0xd4>)
 8001dac:	fb83 2301 	smull	r2, r3, r3, r1
 8001db0:	109a      	asrs	r2, r3, #2
 8001db2:	17cb      	asrs	r3, r1, #31
 8001db4:	1ad2      	subs	r2, r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	1aca      	subs	r2, r1, r3
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <tm1637DisplayDecimal+0xd8>)
 8001dc2:	5c99      	ldrb	r1, [r3, r2]
 8001dc4:	f107 020c 	add.w	r2, r7, #12
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	4413      	add	r3, r2
 8001dcc:	460a      	mov	r2, r1
 8001dce:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d110      	bne.n	8001df8 <tm1637DisplayDecimal+0x60>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00d      	beq.n	8001df8 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4413      	add	r3, r2
 8001df4:	460a      	mov	r2, r1
 8001df6:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <tm1637DisplayDecimal+0xd4>)
 8001dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8001e00:	1092      	asrs	r2, r2, #2
 8001e02:	17db      	asrs	r3, r3, #31
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	ddc9      	ble.n	8001da8 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8001e14:	f000 f843 	bl	8001e9e <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001e18:	2040      	movs	r0, #64	; 0x40
 8001e1a:	f000 f872 	bl	8001f02 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001e1e:	f000 f860 	bl	8001ee2 <_tm1637ReadResult>
    _tm1637Stop();
 8001e22:	f000 f849 	bl	8001eb8 <_tm1637Stop>

    _tm1637Start();
 8001e26:	f000 f83a 	bl	8001e9e <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001e2a:	20c0      	movs	r0, #192	; 0xc0
 8001e2c:	f000 f869 	bl	8001f02 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001e30:	f000 f857 	bl	8001ee2 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e00f      	b.n	8001e5a <tm1637DisplayDecimal+0xc2>
        _tm1637WriteByte(digitArr[3 - i]);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f1c3 0303 	rsb	r3, r3, #3
 8001e40:	f107 0218 	add.w	r2, r7, #24
 8001e44:	4413      	add	r3, r2
 8001e46:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f859 	bl	8001f02 <_tm1637WriteByte>
        _tm1637ReadResult();
 8001e50:	f000 f847 	bl	8001ee2 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	3301      	adds	r3, #1
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	ddec      	ble.n	8001e3a <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8001e60:	f000 f82a 	bl	8001eb8 <_tm1637Stop>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	66666667 	.word	0x66666667
 8001e70:	0800b6e8 	.word	0x0800b6e8

08001e74 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 8001e7e:	f000 f80e 	bl	8001e9e <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	3b79      	subs	r3, #121	; 0x79
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f83a 	bl	8001f02 <_tm1637WriteByte>
    _tm1637ReadResult();
 8001e8e:	f000 f828 	bl	8001ee2 <_tm1637ReadResult>
    _tm1637Stop();
 8001e92:	f000 f811 	bl	8001eb8 <_tm1637Stop>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_tm1637Start>:

void _tm1637Start(void)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 8001ea2:	f000 f875 	bl	8001f90 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8001ea6:	f000 f88b 	bl	8001fc0 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f000 f853 	bl	8001f56 <_tm1637DelayUsec>
    _tm1637DioLow();
 8001eb0:	f000 f892 	bl	8001fd8 <_tm1637DioLow>
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_tm1637Stop>:

void _tm1637Stop(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001ebc:	f000 f874 	bl	8001fa8 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f000 f848 	bl	8001f56 <_tm1637DelayUsec>
    _tm1637DioLow();
 8001ec6:	f000 f887 	bl	8001fd8 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f000 f843 	bl	8001f56 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001ed0:	f000 f85e 	bl	8001f90 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	f000 f83e 	bl	8001f56 <_tm1637DelayUsec>
    _tm1637DioHigh();
 8001eda:	f000 f871 	bl	8001fc0 <_tm1637DioHigh>
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 8001ee6:	f000 f85f 	bl	8001fa8 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001eea:	2005      	movs	r0, #5
 8001eec:	f000 f833 	bl	8001f56 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 8001ef0:	f000 f84e 	bl	8001f90 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f000 f82e 	bl	8001f56 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001efa:	f000 f855 	bl	8001fa8 <_tm1637ClkLow>
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	e019      	b.n	8001f46 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8001f12:	f000 f849 	bl	8001fa8 <_tm1637ClkLow>
        if (b & 0x01) {
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8001f20:	f000 f84e 	bl	8001fc0 <_tm1637DioHigh>
 8001f24:	e001      	b.n	8001f2a <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8001f26:	f000 f857 	bl	8001fd8 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f813 	bl	8001f56 <_tm1637DelayUsec>
        b >>= 1;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8001f36:	f000 f82b 	bl	8001f90 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 8001f3a:	2003      	movs	r0, #3
 8001f3c:	f000 f80b 	bl	8001f56 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b07      	cmp	r3, #7
 8001f4a:	dde2      	ble.n	8001f12 <_tm1637WriteByte+0x10>
    }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 8001f5e:	e00c      	b.n	8001f7a <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 100; ++j) {
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e003      	b.n	8001f6e <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8001f66:	bf00      	nop
        for (int j = 0; j < 100; ++j) {
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b63      	cmp	r3, #99	; 0x63
 8001f72:	ddf8      	ble.n	8001f66 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ef      	bne.n	8001f60 <_tm1637DelayUsec+0xa>
        }
    }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001f94:	2201      	movs	r2, #1
 8001f96:	2104      	movs	r1, #4
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <_tm1637ClkHigh+0x14>)
 8001f9a:	f002 fa29 	bl	80043f0 <HAL_GPIO_WritePin>
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <_tm1637ClkLow+0x14>)
 8001fb2:	f002 fa1d 	bl	80043f0 <HAL_GPIO_WritePin>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40020400 	.word	0x40020400

08001fc0 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <_tm1637DioHigh+0x14>)
 8001fca:	f002 fa11 	bl	80043f0 <HAL_GPIO_WritePin>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2102      	movs	r1, #2
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <_tm1637DioLow+0x14>)
 8001fe2:	f002 fa05 	bl	80043f0 <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f001 fc5c 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a33      	ldr	r2, [pc, #204]	; (800212c <HAL_ADC_MspInit+0xec>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d15f      	bne.n	8002122 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a31      	ldr	r2, [pc, #196]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b28      	ldr	r3, [pc, #160]	; (8002130 <HAL_ADC_MspInit+0xf0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800209a:	2303      	movs	r3, #3
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209e:	2303      	movs	r3, #3
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4821      	ldr	r0, [pc, #132]	; (8002134 <HAL_ADC_MspInit+0xf4>)
 80020ae:	f002 f80b 	bl	80040c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <HAL_ADC_MspInit+0xfc>)
 80020b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020f6:	4810      	ldr	r0, [pc, #64]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 80020f8:	f001 fc3a 	bl	8003970 <HAL_DMA_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002102:	f7ff fdfb 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_ADC_MspInit+0xf8>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	2012      	movs	r0, #18
 8002118:	f001 fbf3 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800211c:	2012      	movs	r0, #18
 800211e:	f001 fc0c 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3728      	adds	r7, #40	; 0x28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40012000 	.word	0x40012000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	200006b0 	.word	0x200006b0
 800213c:	40026410 	.word	0x40026410

08002140 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a50      	ldr	r2, [pc, #320]	; (80022a0 <HAL_I2C_MspInit+0x160>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f040 8099 	bne.w	8002296 <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a4d      	ldr	r2, [pc, #308]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 800216e:	f043 0302 	orr.w	r3, r3, #2
 8002172:	6313      	str	r3, [r2, #48]	; 0x30
 8002174:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002180:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002186:	2312      	movs	r3, #18
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002192:	2304      	movs	r3, #4
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4842      	ldr	r0, [pc, #264]	; (80022a8 <HAL_I2C_MspInit+0x168>)
 800219e:	f001 ff93 	bl	80040c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 80021ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_I2C_MspInit+0x164>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021c0:	4a3b      	ldr	r2, [pc, #236]	; (80022b0 <HAL_I2C_MspInit+0x170>)
 80021c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80021c4:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021cc:	4b37      	ldr	r3, [pc, #220]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d2:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021d8:	4b34      	ldr	r3, [pc, #208]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e6:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80021ec:	4b2f      	ldr	r3, [pc, #188]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80021fe:	482b      	ldr	r0, [pc, #172]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 8002200:	f001 fbb6 	bl	8003970 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800220a:	f7ff fd77 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <HAL_I2C_MspInit+0x16c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800221c:	4a26      	ldr	r2, [pc, #152]	; (80022b8 <HAL_I2C_MspInit+0x178>)
 800221e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002228:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800222a:	2240      	movs	r2, #64	; 0x40
 800222c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800225a:	4816      	ldr	r0, [pc, #88]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800225c:	f001 fb88 	bl	8003970 <HAL_DMA_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8002266:	f7ff fd49 	bl	8001cfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a11      	ldr	r2, [pc, #68]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
 8002270:	4a10      	ldr	r2, [pc, #64]	; (80022b4 <HAL_I2C_MspInit+0x174>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	201f      	movs	r0, #31
 800227c:	f001 fb41 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002280:	201f      	movs	r0, #31
 8002282:	f001 fb5a 	bl	800393a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2020      	movs	r0, #32
 800228c:	f001 fb39 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002290:	2020      	movs	r0, #32
 8002292:	f001 fb52 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	; 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40005400 	.word	0x40005400
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020400 	.word	0x40020400
 80022ac:	20000758 	.word	0x20000758
 80022b0:	40026010 	.word	0x40026010
 80022b4:	2000056c 	.word	0x2000056c
 80022b8:	400260a0 	.word	0x400260a0

080022bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_TIM_Base_MspInit+0xa8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	4b25      	ldr	r3, [pc, #148]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a24      	ldr	r2, [pc, #144]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022ea:	e036      	b.n	800235a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1e      	ldr	r2, [pc, #120]	; (800236c <HAL_TIM_Base_MspInit+0xb0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d116      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	201e      	movs	r0, #30
 8002318:	f001 faf3 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800231c:	201e      	movs	r0, #30
 800231e:	f001 fb0c 	bl	800393a <HAL_NVIC_EnableIRQ>
}
 8002322:	e01a      	b.n	800235a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_TIM_Base_MspInit+0xb4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d115      	bne.n	800235a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_TIM_Base_MspInit+0xac>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	202c      	movs	r0, #44	; 0x2c
 8002350:	f001 fad7 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002354:	202c      	movs	r0, #44	; 0x2c
 8002356:	f001 faf0 	bl	800393a <HAL_NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40010000 	.word	0x40010000
 8002368:	40023800 	.word	0x40023800
 800236c:	40000800 	.word	0x40000800
 8002370:	40010400 	.word	0x40010400

08002374 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <HAL_TIM_IC_MspInit+0x94>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d133      	bne.n	80023fe <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_TIM_IC_MspInit+0x98>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023de:	2302      	movs	r3, #2
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <HAL_TIM_IC_MspInit+0x9c>)
 80023ea:	f001 fe6d 	bl	80040c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	201d      	movs	r0, #29
 80023f4:	f001 fa85 	bl	8003902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023f8:	201d      	movs	r0, #29
 80023fa:	f001 fa9e 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	; 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40000400 	.word	0x40000400
 800240c:	40023800 	.word	0x40023800
 8002410:	40020800 	.word	0x40020800

08002414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a24      	ldr	r2, [pc, #144]	; (80024c4 <HAL_TIM_MspPostInit+0xb0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d11f      	bne.n	8002476 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002452:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002464:	2301      	movs	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <HAL_TIM_MspPostInit+0xb8>)
 8002470:	f001 fe2a 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002474:	e022      	b.n	80024bc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <HAL_TIM_MspPostInit+0xbc>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d11d      	bne.n	80024bc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	6313      	str	r3, [r2, #48]	; 0x30
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_TIM_MspPostInit+0xb4>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800249c:	23c0      	movs	r3, #192	; 0xc0
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024ac:	2302      	movs	r3, #2
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4619      	mov	r1, r3
 80024b6:	4807      	ldr	r0, [pc, #28]	; (80024d4 <HAL_TIM_MspPostInit+0xc0>)
 80024b8:	f001 fe06 	bl	80040c8 <HAL_GPIO_Init>
}
 80024bc:	bf00      	nop
 80024be:	3728      	adds	r7, #40	; 0x28
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40000800 	.word	0x40000800
 80024d4:	40020400 	.word	0x40020400

080024d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_UART_MspInit+0x84>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12b      	bne.n	8002552 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_UART_MspInit+0x88>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_UART_MspInit+0x88>)
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_UART_MspInit+0x88>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_UART_MspInit+0x88>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_UART_MspInit+0x88>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_UART_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002532:	230c      	movs	r3, #12
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002542:	2307      	movs	r3, #7
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_UART_MspInit+0x8c>)
 800254e:	f001 fdbb 	bl	80040c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40004400 	.word	0x40004400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <turnLeft>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void turnLeft(double duty) {
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	ed87 0b00 	vstr	d0, [r7]
	TIM4->CCR2 = TIM4->ARR * duty;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <turnLeft+0x3c>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ffe4 	bl	8000544 <__aeabi_ui2d>
 800257c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002580:	f7fe f85a 	bl	8000638 <__aeabi_dmul>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4c06      	ldr	r4, [pc, #24]	; (80025a4 <turnLeft+0x3c>)
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fb15 	bl	8000bbc <__aeabi_d2uiz>
 8002592:	4603      	mov	r3, r0
 8002594:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM4->CCR1 = 0;
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <turnLeft+0x3c>)
 8002598:	2200      	movs	r2, #0
 800259a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd90      	pop	{r4, r7, pc}
 80025a4:	40000800 	.word	0x40000800

080025a8 <turnRight>:

void turnRight(double duty) {
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	ed87 0b00 	vstr	d0, [r7]
	TIM4->CCR2 = 0;
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <turnRight+0x3c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = TIM4->ARR * duty;
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <turnRight+0x3c>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffc1 	bl	8000544 <__aeabi_ui2d>
 80025c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025c6:	f7fe f837 	bl	8000638 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4c05      	ldr	r4, [pc, #20]	; (80025e4 <turnRight+0x3c>)
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe faf2 	bl	8000bbc <__aeabi_d2uiz>
 80025d8:	4603      	mov	r3, r0
 80025da:	6363      	str	r3, [r4, #52]	; 0x34
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	40000800 	.word	0x40000800

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 fad0 	bl	8002bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <DMA1_Stream0_IRQHandler+0x10>)
 8002642:	f001 fabd 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000758 	.word	0x20000758

08002650 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <DMA1_Stream6_IRQHandler+0x10>)
 8002656:	f001 fab3 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000056c 	.word	0x2000056c

08002664 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <ADC_IRQHandler+0x10>)
 800266a:	f000 fb3c 	bl	8002ce6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000668 	.word	0x20000668

08002678 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  // 30kHz counting up to 60,000 -> two seconds between reset
if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_FLAG check whether the specified TIM interrupt is set or not
 800267e:	4b2e      	ldr	r3, [pc, #184]	; (8002738 <TIM3_IRQHandler+0xc0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d14a      	bne.n	8002722 <TIM3_IRQHandler+0xaa>
	  {
		  if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_IT_SOURCE Check whether the specified TIM interrupt source is enabled or not
 800268c:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <TIM3_IRQHandler+0xc0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d143      	bne.n	8002722 <TIM3_IRQHandler+0xaa>
		  {
			  double averageDiff = 0;
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	f04f 0300 	mov.w	r3, #0
 80026a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			  for (int i = 0; i < 5; i++) {
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	e013      	b.n	80026d4 <TIM3_IRQHandler+0x5c>
				  averageDiff += timeDiffs[i];
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <TIM3_IRQHandler+0xc4>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff45 	bl	8000544 <__aeabi_ui2d>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c2:	f7fd fe03 	bl	80002cc <__adddf3>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
			  for (int i = 0; i < 5; i++) {
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3301      	adds	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	dde8      	ble.n	80026ac <TIM3_IRQHandler+0x34>
			  }
			  averageDiff /= 5.0;
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <TIM3_IRQHandler+0xc8>)
 80026e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026e4:	f7fe f8d2 	bl	800088c <__aeabi_ddiv>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

			  rotationsPerMinute = (30000.0 / averageDiff * 60.0);
 80026f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026f4:	a10e      	add	r1, pc, #56	; (adr r1, 8002730 <TIM3_IRQHandler+0xb8>)
 80026f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026fa:	f7fe f8c7 	bl	800088c <__aeabi_ddiv>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <TIM3_IRQHandler+0xcc>)
 800270c:	f7fd ff94 	bl	8000638 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe fa50 	bl	8000bbc <__aeabi_d2uiz>
 800271c:	4603      	mov	r3, r0
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <TIM3_IRQHandler+0xd0>)
 8002720:	6013      	str	r3, [r2, #0]

		  }
	  }

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <TIM3_IRQHandler+0xc0>)
 8002724:	f005 ff28 	bl	8008578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	00000000 	.word	0x00000000
 8002734:	40dd4c00 	.word	0x40dd4c00
 8002738:	20000620 	.word	0x20000620
 800273c:	200004a0 	.word	0x200004a0
 8002740:	40140000 	.word	0x40140000
 8002744:	404e0000 	.word	0x404e0000
 8002748:	200004b8 	.word	0x200004b8
 800274c:	00000000 	.word	0x00000000

08002750 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002750:	b5b0      	push	{r4, r5, r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  static int start = 0;
  int sensorThreshold = -500;
 8002756:	4b38      	ldr	r3, [pc, #224]	; (8002838 <TIM4_IRQHandler+0xe8>)
 8002758:	617b      	str	r3, [r7, #20]

	if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_FLAG check whether the specified TIM interrupt is set or not
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <TIM4_IRQHandler+0xec>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d153      	bne.n	8002810 <TIM4_IRQHandler+0xc0>
	  {
		  if(__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_IT_SOURCE Check whether the specified TIM interrupt source is enabled or not
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <TIM4_IRQHandler+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d14c      	bne.n	8002810 <TIM4_IRQHandler+0xc0>
		  {
			  int right = adc_values[0];
 8002776:	4b32      	ldr	r3, [pc, #200]	; (8002840 <TIM4_IRQHandler+0xf0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
			  int left = adc_values[1];
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <TIM4_IRQHandler+0xf0>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
			  double x = 10000 * (double)(right - left) / (left + right) ;
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	4618      	mov	r0, r3
 800278a:	f7fd feeb 	bl	8000564 <__aeabi_i2d>
 800278e:	a324      	add	r3, pc, #144	; (adr r3, 8002820 <TIM4_IRQHandler+0xd0>)
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	f7fd ff50 	bl	8000638 <__aeabi_dmul>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4614      	mov	r4, r2
 800279e:	461d      	mov	r5, r3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fd fedc 	bl	8000564 <__aeabi_i2d>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4620      	mov	r0, r4
 80027b2:	4629      	mov	r1, r5
 80027b4:	f7fe f86a 	bl	800088c <__aeabi_ddiv>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	e9c7 2300 	strd	r2, r3, [r7]

			  // Starting from left (inner) side
			  // Needs high duty cycle to overcome tension of spring
			  if (start < 20) {
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <TIM4_IRQHandler+0xf4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b13      	cmp	r3, #19
 80027c6:	dc09      	bgt.n	80027dc <TIM4_IRQHandler+0x8c>
				  turnRight(1.0);
 80027c8:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8002828 <TIM4_IRQHandler+0xd8>
 80027cc:	f7ff feec 	bl	80025a8 <turnRight>
				  start++;
 80027d0:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <TIM4_IRQHandler+0xf4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a1b      	ldr	r2, [pc, #108]	; (8002844 <TIM4_IRQHandler+0xf4>)
 80027d8:	6013      	str	r3, [r2, #0]

				  return;
 80027da:	e01c      	b.n	8002816 <TIM4_IRQHandler+0xc6>
			  }


			  if(x < sensorThreshold)
 80027dc:	6978      	ldr	r0, [r7, #20]
 80027de:	f7fd fec1 	bl	8000564 <__aeabi_i2d>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027ea:	f7fe f997 	bl	8000b1c <__aeabi_dcmplt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <TIM4_IRQHandler+0xae>
			  {
				  turnRight(0.3);
 80027f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002830 <TIM4_IRQHandler+0xe0>
 80027f8:	f7ff fed6 	bl	80025a8 <turnRight>
 80027fc:	e003      	b.n	8002806 <TIM4_IRQHandler+0xb6>
			  }
			  else
			  {
				  turnLeft(0.3);
 80027fe:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002830 <TIM4_IRQHandler+0xe0>
 8002802:	f7ff feb1 	bl	8002568 <turnLeft>
			  }

		  	  __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE); // Clear IT pending Bits
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <TIM4_IRQHandler+0xec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0201 	mvn.w	r2, #1
 800280e:	611a      	str	r2, [r3, #16]
		 }

	  }

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002810:	480a      	ldr	r0, [pc, #40]	; (800283c <TIM4_IRQHandler+0xec>)
 8002812:	f005 feb1 	bl	8008578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bdb0      	pop	{r4, r5, r7, pc}
 800281c:	f3af 8000 	nop.w
 8002820:	00000000 	.word	0x00000000
 8002824:	40c38800 	.word	0x40c38800
 8002828:	00000000 	.word	0x00000000
 800282c:	3ff00000 	.word	0x3ff00000
 8002830:	33333333 	.word	0x33333333
 8002834:	3fd33333 	.word	0x3fd33333
 8002838:	fffffe0c 	.word	0xfffffe0c
 800283c:	20000524 	.word	0x20000524
 8002840:	200007fc 	.word	0x200007fc
 8002844:	200004c8 	.word	0x200004c8

08002848 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <I2C1_EV_IRQHandler+0x10>)
 800284e:	f002 fc55 	bl	80050fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200005cc 	.word	0x200005cc

0800285c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002860:	4802      	ldr	r0, [pc, #8]	; (800286c <I2C1_ER_IRQHandler+0x10>)
 8002862:	f002 fdb8 	bl	80053d6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200005cc 	.word	0x200005cc

08002870 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	//oprintf("TIM8 \r\n");
		if(__HAL_TIM_GET_FLAG(&htim8, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_FLAG check whether the specified TIM interrupt is set or not
 8002876:	4b6c      	ldr	r3, [pc, #432]	; (8002a28 <TIM8_UP_TIM13_IRQHandler+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 80c1 	bne.w	8002a08 <TIM8_UP_TIM13_IRQHandler+0x198>
			  {
				  if(__HAL_TIM_GET_IT_SOURCE(&htim8, TIM_FLAG_UPDATE) != RESET) // __HAL_TIM_GET_IT_SOURCE Check whether the specified TIM interrupt source is enabled or not
 8002886:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <TIM8_UP_TIM13_IRQHandler+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	f040 80b9 	bne.w	8002a08 <TIM8_UP_TIM13_IRQHandler+0x198>
				  {
					  double duty = 0.5;
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <TIM8_UP_TIM13_IRQHandler+0x1bc>)
 800289c:	e9c7 2306 	strd	r2, r3, [r7, #24]
					  int maxTime = 10;
 80028a0:	230a      	movs	r3, #10
 80028a2:	617b      	str	r3, [r7, #20]
					  static int countIndex = 0;

					  double phaseSpeed = 2 * M_PI * countIndex / maxTime;
 80028a4:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <TIM8_UP_TIM13_IRQHandler+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe5b 	bl	8000564 <__aeabi_i2d>
 80028ae:	a35a      	add	r3, pc, #360	; (adr r3, 8002a18 <TIM8_UP_TIM13_IRQHandler+0x1a8>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fec0 	bl	8000638 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4614      	mov	r4, r2
 80028be:	461d      	mov	r5, r3
 80028c0:	6978      	ldr	r0, [r7, #20]
 80028c2:	f7fd fe4f 	bl	8000564 <__aeabi_i2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f7fd ffdd 	bl	800088c <__aeabi_ddiv>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
					  double phaseShift = 2.0 / 3.0 * M_PI;
 80028da:	a351      	add	r3, pc, #324	; (adr r3, 8002a20 <TIM8_UP_TIM13_IRQHandler+0x1b0>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	e9c7 2300 	strd	r2, r3, [r7]
					  TIM1->CCR1 = TIM8->ARR * duty * sin(phaseSpeed);
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <TIM8_UP_TIM13_IRQHandler+0x1c4>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe2b 	bl	8000544 <__aeabi_ui2d>
 80028ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f2:	f7fd fea1 	bl	8000638 <__aeabi_dmul>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4614      	mov	r4, r2
 80028fc:	461d      	mov	r5, r3
 80028fe:	ed97 0b02 	vldr	d0, [r7, #8]
 8002902:	f007 fe6d 	bl	800a5e0 <sin>
 8002906:	ec53 2b10 	vmov	r2, r3, d0
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fe93 	bl	8000638 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4c48      	ldr	r4, [pc, #288]	; (8002a38 <TIM8_UP_TIM13_IRQHandler+0x1c8>)
 8002918:	4610      	mov	r0, r2
 800291a:	4619      	mov	r1, r3
 800291c:	f7fe f94e 	bl	8000bbc <__aeabi_d2uiz>
 8002920:	4603      	mov	r3, r0
 8002922:	6363      	str	r3, [r4, #52]	; 0x34
					  TIM1->CCR2 = TIM8->ARR * duty * sin(phaseSpeed + phaseShift);
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <TIM8_UP_TIM13_IRQHandler+0x1c4>)
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fe0b 	bl	8000544 <__aeabi_ui2d>
 800292e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002932:	f7fd fe81 	bl	8000638 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4614      	mov	r4, r2
 800293c:	461d      	mov	r5, r3
 800293e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002946:	f7fd fcc1 	bl	80002cc <__adddf3>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	ec43 2b17 	vmov	d7, r2, r3
 8002952:	eeb0 0a47 	vmov.f32	s0, s14
 8002956:	eef0 0a67 	vmov.f32	s1, s15
 800295a:	f007 fe41 	bl	800a5e0 <sin>
 800295e:	ec53 2b10 	vmov	r2, r3, d0
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fe67 	bl	8000638 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4c32      	ldr	r4, [pc, #200]	; (8002a38 <TIM8_UP_TIM13_IRQHandler+0x1c8>)
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f922 	bl	8000bbc <__aeabi_d2uiz>
 8002978:	4603      	mov	r3, r0
 800297a:	63a3      	str	r3, [r4, #56]	; 0x38
					  TIM1->CCR3 = TIM8->ARR * duty * sin(phaseSpeed + 2 * phaseShift);
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <TIM8_UP_TIM13_IRQHandler+0x1c4>)
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fddf 	bl	8000544 <__aeabi_ui2d>
 8002986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800298a:	f7fd fe55 	bl	8000638 <__aeabi_dmul>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4614      	mov	r4, r2
 8002994:	461d      	mov	r5, r3
 8002996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	f7fd fc95 	bl	80002cc <__adddf3>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4610      	mov	r0, r2
 80029a8:	4619      	mov	r1, r3
 80029aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ae:	f7fd fc8d 	bl	80002cc <__adddf3>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	ec43 2b17 	vmov	d7, r2, r3
 80029ba:	eeb0 0a47 	vmov.f32	s0, s14
 80029be:	eef0 0a67 	vmov.f32	s1, s15
 80029c2:	f007 fe0d 	bl	800a5e0 <sin>
 80029c6:	ec53 2b10 	vmov	r2, r3, d0
 80029ca:	4620      	mov	r0, r4
 80029cc:	4629      	mov	r1, r5
 80029ce:	f7fd fe33 	bl	8000638 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4c18      	ldr	r4, [pc, #96]	; (8002a38 <TIM8_UP_TIM13_IRQHandler+0x1c8>)
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f7fe f8ee 	bl	8000bbc <__aeabi_d2uiz>
 80029e0:	4603      	mov	r3, r0
 80029e2:	63e3      	str	r3, [r4, #60]	; 0x3c

					  countIndex++;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <TIM8_UP_TIM13_IRQHandler+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <TIM8_UP_TIM13_IRQHandler+0x1c0>)
 80029ec:	6013      	str	r3, [r2, #0]
					  if (countIndex > maxTime) {
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <TIM8_UP_TIM13_IRQHandler+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	da02      	bge.n	80029fe <TIM8_UP_TIM13_IRQHandler+0x18e>
						  countIndex = 0;
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <TIM8_UP_TIM13_IRQHandler+0x1c0>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
					  }


					  __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE); // Clear IT pending Bits
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <TIM8_UP_TIM13_IRQHandler+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f06f 0201 	mvn.w	r2, #1
 8002a06:	611a      	str	r2, [r3, #16]
				  }
			  }

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002a08:	4807      	ldr	r0, [pc, #28]	; (8002a28 <TIM8_UP_TIM13_IRQHandler+0x1b8>)
 8002a0a:	f005 fdb5 	bl	8008578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bdb0      	pop	{r4, r5, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	54442d18 	.word	0x54442d18
 8002a1c:	401921fb 	.word	0x401921fb
 8002a20:	382d7365 	.word	0x382d7365
 8002a24:	4000c152 	.word	0x4000c152
 8002a28:	200004dc 	.word	0x200004dc
 8002a2c:	3fe00000 	.word	0x3fe00000
 8002a30:	200004cc 	.word	0x200004cc
 8002a34:	40010400 	.word	0x40010400
 8002a38:	40010000 	.word	0x40010000

08002a3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <DMA2_Stream0_IRQHandler+0x10>)
 8002a42:	f001 f8bd 	bl	8003bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200006b0 	.word	0x200006b0

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f007 f912 	bl	8009ca8 <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20020000 	.word	0x20020000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	200004d0 	.word	0x200004d0
 8002ab8:	20000818 	.word	0x20000818

08002abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ae4:	480d      	ldr	r0, [pc, #52]	; (8002b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ae6:	490e      	ldr	r1, [pc, #56]	; (8002b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aec:	e002      	b.n	8002af4 <LoopCopyDataInit>

08002aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002af2:	3304      	adds	r3, #4

08002af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af8:	d3f9      	bcc.n	8002aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002afc:	4c0b      	ldr	r4, [pc, #44]	; (8002b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b00:	e001      	b.n	8002b06 <LoopFillZerobss>

08002b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b04:	3204      	adds	r2, #4

08002b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b08:	d3fb      	bcc.n	8002b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b0a:	f7ff ffd7 	bl	8002abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f007 f8d1 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b12:	f7fe fc5d 	bl	80013d0 <main>
  bx  lr    
 8002b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002b24:	0800b938 	.word	0x0800b938
  ldr r2, =_sbss
 8002b28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002b2c:	20000818 	.word	0x20000818

08002b30 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <CAN1_RX0_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0d      	ldr	r2, [pc, #52]	; (8002b74 <HAL_Init+0x40>)
 8002b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_Init+0x40>)
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <HAL_Init+0x40>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <HAL_Init+0x40>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	f000 fec5 	bl	80038ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f808 	bl	8002b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b68:	f7ff fa42 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00

08002b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_InitTick+0x54>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <HAL_InitTick+0x58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 fedd 	bl	8003956 <HAL_SYSTICK_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00e      	b.n	8002bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d80a      	bhi.n	8002bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb4:	f000 fea5 	bl	8003902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <HAL_InitTick+0x5c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e000      	b.n	8002bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000008 	.word	0x20000008
 8002bd4:	20000004 	.word	0x20000004

08002bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_IncTick+0x20>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	461a      	mov	r2, r3
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x24>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	4a04      	ldr	r2, [pc, #16]	; (8002bfc <HAL_IncTick+0x24>)
 8002bea:	6013      	str	r3, [r2, #0]
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000008 	.word	0x20000008
 8002bfc:	20000804 	.word	0x20000804

08002c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  return uwTick;
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <HAL_GetTick+0x14>)
 8002c06:	681b      	ldr	r3, [r3, #0]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	20000804 	.word	0x20000804

08002c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff ffee 	bl	8002c00 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c30:	d005      	beq.n	8002c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_Delay+0x44>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c3e:	bf00      	nop
 8002c40:	f7ff ffde 	bl	8002c00 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d8f7      	bhi.n	8002c40 <HAL_Delay+0x28>
  {
  }
}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008

08002c60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e033      	b.n	8002cde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff f9de 	bl	8002040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca6:	f023 0302 	bic.w	r3, r3, #2
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fbc2 	bl	800343c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	f043 0201 	orr.w	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cce:	e001      	b.n	8002cd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d049      	beq.n	8002dbc <HAL_ADC_IRQHandler+0xd6>
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d046      	beq.n	8002dbc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d105      	bne.n	8002d46 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d12b      	bne.n	8002dac <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d127      	bne.n	8002dac <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d119      	bne.n	8002dac <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0220 	bic.w	r2, r2, #32
 8002d86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f043 0201 	orr.w	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9eb 	bl	8003188 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0212 	mvn.w	r2, #18
 8002dba:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d057      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x1b8>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d054      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d139      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d006      	beq.n	8002e36 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12b      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d124      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11d      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d119      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fc52 	bl	8003738 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 020c 	mvn.w	r2, #12
 8002e9c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b40      	cmp	r3, #64	; 0x40
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d017      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x21a>
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d014      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d10d      	bne.n	8002f00 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f95d 	bl	80031b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 0201 	mvn.w	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x27a>
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f043 0202 	orr.w	r2, r3, #2
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0220 	mvn.w	r2, #32
 8002f4e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f937 	bl	80031c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0220 	mvn.w	r2, #32
 8002f5e:	601a      	str	r2, [r3, #0]
  }
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x1e>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e0e9      	b.n	800315a <HAL_ADC_Start_DMA+0x1f2>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d018      	beq.n	8002fce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fac:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_ADC_Start_DMA+0x1fc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6d      	ldr	r2, [pc, #436]	; (8003168 <HAL_ADC_Start_DMA+0x200>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9a      	lsrs	r2, r3, #18
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d107      	bne.n	8002fee <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fec:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	f040 80a1 	bne.w	8003140 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	2b00      	cmp	r3, #0
 800301e:	d007      	beq.n	8003030 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003028:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d106      	bne.n	800304c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f023 0206 	bic.w	r2, r3, #6
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
 800304a:	e002      	b.n	8003052 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_ADC_Start_DMA+0x204>)
 800305c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	4a43      	ldr	r2, [pc, #268]	; (8003170 <HAL_ADC_Start_DMA+0x208>)
 8003064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	4a42      	ldr	r2, [pc, #264]	; (8003174 <HAL_ADC_Start_DMA+0x20c>)
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	4a41      	ldr	r2, [pc, #260]	; (8003178 <HAL_ADC_Start_DMA+0x210>)
 8003074:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800307e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800308e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800309e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	334c      	adds	r3, #76	; 0x4c
 80030aa:	4619      	mov	r1, r3
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f000 fd0c 	bl	8003acc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d12a      	bne.n	8003116 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2d      	ldr	r2, [pc, #180]	; (800317c <HAL_ADC_Start_DMA+0x214>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d015      	beq.n	80030f6 <HAL_ADC_Start_DMA+0x18e>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2c      	ldr	r2, [pc, #176]	; (8003180 <HAL_ADC_Start_DMA+0x218>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d105      	bne.n	80030e0 <HAL_ADC_Start_DMA+0x178>
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_ADC_Start_DMA+0x204>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_ADC_Start_DMA+0x21c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d136      	bne.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
 80030ea:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_ADC_Start_DMA+0x204>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d130      	bne.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d129      	bne.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e020      	b.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_ADC_Start_DMA+0x214>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d11b      	bne.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d114      	bne.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e00b      	b.n	8003158 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000
 8003168:	431bde83 	.word	0x431bde83
 800316c:	40012300 	.word	0x40012300
 8003170:	08003635 	.word	0x08003635
 8003174:	080036ef 	.word	0x080036ef
 8003178:	0800370b 	.word	0x0800370b
 800317c:	40012000 	.word	0x40012000
 8003180:	40012100 	.word	0x40012100
 8003184:	40012200 	.word	0x40012200

08003188 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e113      	b.n	800341c <HAL_ADC_ConfigChannel+0x244>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d925      	bls.n	8003250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68d9      	ldr	r1, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	2207      	movs	r2, #7
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43da      	mvns	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	400a      	ands	r2, r1
 8003228:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	4603      	mov	r3, r0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4403      	add	r3, r0
 8003242:	3b1e      	subs	r3, #30
 8003244:	409a      	lsls	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e022      	b.n	8003296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6919      	ldr	r1, [r3, #16]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	2207      	movs	r2, #7
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	400a      	ands	r2, r1
 8003272:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6919      	ldr	r1, [r3, #16]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	4603      	mov	r3, r0
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4403      	add	r3, r0
 800328c:	409a      	lsls	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d824      	bhi.n	80032e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b05      	subs	r3, #5
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b05      	subs	r3, #5
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34
 80032e6:	e04c      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d824      	bhi.n	800333a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	3b23      	subs	r3, #35	; 0x23
 8003302:	221f      	movs	r2, #31
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	400a      	ands	r2, r1
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	3b23      	subs	r3, #35	; 0x23
 800332c:	fa00 f203 	lsl.w	r2, r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e023      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b41      	subs	r3, #65	; 0x41
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	400a      	ands	r2, r1
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b41      	subs	r3, #65	; 0x41
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003382:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_ADC_ConfigChannel+0x250>)
 8003384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a28      	ldr	r2, [pc, #160]	; (800342c <HAL_ADC_ConfigChannel+0x254>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d10f      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d8>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d10b      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	; (800342c <HAL_ADC_ConfigChannel+0x254>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12b      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <HAL_ADC_ConfigChannel+0x258>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x1f4>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d122      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a11      	ldr	r2, [pc, #68]	; (8003430 <HAL_ADC_ConfigChannel+0x258>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <HAL_ADC_ConfigChannel+0x25c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a11      	ldr	r2, [pc, #68]	; (8003438 <HAL_ADC_ConfigChannel+0x260>)
 80033f4:	fba2 2303 	umull	r2, r3, r2, r3
 80033f8:	0c9a      	lsrs	r2, r3, #18
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003404:	e002      	b.n	800340c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3b01      	subs	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f9      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	40012300 	.word	0x40012300
 800342c:	40012000 	.word	0x40012000
 8003430:	10000012 	.word	0x10000012
 8003434:	20000000 	.word	0x20000000
 8003438:	431bde83 	.word	0x431bde83

0800343c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003444:	4b79      	ldr	r3, [pc, #484]	; (800362c <ADC_Init+0x1f0>)
 8003446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6859      	ldr	r1, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	021a      	lsls	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68da      	ldr	r2, [r3, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	4a58      	ldr	r2, [pc, #352]	; (8003630 <ADC_Init+0x1f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	e00f      	b.n	800353a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0202 	bic.w	r2, r2, #2
 8003548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7e1b      	ldrb	r3, [r3, #24]
 8003554:	005a      	lsls	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01b      	beq.n	80035a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	035a      	lsls	r2, r3, #13
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e007      	b.n	80035b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	051a      	lsls	r2, r3, #20
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035f2:	025a      	lsls	r2, r3, #9
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	029a      	lsls	r2, r3, #10
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40012300 	.word	0x40012300
 8003630:	0f000001 	.word	0x0f000001

08003634 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800364a:	2b00      	cmp	r3, #0
 800364c:	d13c      	bne.n	80036c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d12b      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d127      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003688:	2b00      	cmp	r3, #0
 800368a:	d119      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0220 	bic.w	r2, r2, #32
 800369a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d105      	bne.n	80036c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fd61 	bl	8003188 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036c6:	e00e      	b.n	80036e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fd75 	bl	80031c4 <HAL_ADC_ErrorCallback>
}
 80036da:	e004      	b.n	80036e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fd4d 	bl	800319c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003716:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2240      	movs	r2, #64	; 0x40
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	f043 0204 	orr.w	r2, r3, #4
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fd4a 	bl	80031c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x44>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003798:	4b04      	ldr	r3, [pc, #16]	; (80037ac <__NVIC_GetPriorityGrouping+0x18>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 0307 	and.w	r3, r3, #7
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	db0b      	blt.n	80037da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	f003 021f 	and.w	r2, r3, #31
 80037c8:	4907      	ldr	r1, [pc, #28]	; (80037e8 <__NVIC_EnableIRQ+0x38>)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2001      	movs	r0, #1
 80037d2:	fa00 f202 	lsl.w	r2, r0, r2
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000e100 	.word	0xe000e100

080037ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	db0a      	blt.n	8003816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	490c      	ldr	r1, [pc, #48]	; (8003838 <__NVIC_SetPriority+0x4c>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	440b      	add	r3, r1
 8003810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003814:	e00a      	b.n	800382c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4908      	ldr	r1, [pc, #32]	; (800383c <__NVIC_SetPriority+0x50>)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3b04      	subs	r3, #4
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	440b      	add	r3, r1
 800382a:	761a      	strb	r2, [r3, #24]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000e100 	.word	0xe000e100
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f1c3 0307 	rsb	r3, r3, #7
 800385a:	2b04      	cmp	r3, #4
 800385c:	bf28      	it	cs
 800385e:	2304      	movcs	r3, #4
 8003860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3304      	adds	r3, #4
 8003866:	2b06      	cmp	r3, #6
 8003868:	d902      	bls.n	8003870 <NVIC_EncodePriority+0x30>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3b03      	subs	r3, #3
 800386e:	e000      	b.n	8003872 <NVIC_EncodePriority+0x32>
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	43d9      	mvns	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	4313      	orrs	r3, r2
         );
}
 800389a:	4618      	mov	r0, r3
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b8:	d301      	bcc.n	80038be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ba:	2301      	movs	r3, #1
 80038bc:	e00f      	b.n	80038de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <SysTick_Config+0x40>)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c6:	210f      	movs	r1, #15
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038cc:	f7ff ff8e 	bl	80037ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <SysTick_Config+0x40>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <SysTick_Config+0x40>)
 80038d8:	2207      	movs	r2, #7
 80038da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	e000e010 	.word	0xe000e010

080038ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff29 	bl	800374c <__NVIC_SetPriorityGrouping>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	4603      	mov	r3, r0
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003914:	f7ff ff3e 	bl	8003794 <__NVIC_GetPriorityGrouping>
 8003918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff ff8e 	bl	8003840 <NVIC_EncodePriority>
 8003924:	4602      	mov	r2, r0
 8003926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff5d 	bl	80037ec <__NVIC_SetPriority>
}
 8003932:	bf00      	nop
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	4603      	mov	r3, r0
 8003942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff31 	bl	80037b0 <__NVIC_EnableIRQ>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ffa2 	bl	80038a8 <SysTick_Config>
 8003964:	4603      	mov	r3, r0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800397c:	f7ff f940 	bl	8002c00 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e099      	b.n	8003ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ac:	e00f      	b.n	80039ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ae:	f7ff f927 	bl	8002c00 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d908      	bls.n	80039ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2203      	movs	r2, #3
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e078      	b.n	8003ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e8      	bne.n	80039ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_DMA_Init+0x158>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a30:	4313      	orrs	r3, r2
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f023 0307 	bic.w	r3, r3, #7
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d117      	bne.n	8003a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00e      	beq.n	8003a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 faab 	bl	8003fd0 <DMA_CheckFifoParam>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2240      	movs	r2, #64	; 0x40
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e016      	b.n	8003ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa62 	bl	8003f64 <DMA_CalcBaseAndBitshift>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	223f      	movs	r2, #63	; 0x3f
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	f010803f 	.word	0xf010803f

08003acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_DMA_Start_IT+0x26>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e040      	b.n	8003b74 <HAL_DMA_Start_IT+0xa8>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d12f      	bne.n	8003b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f9f4 	bl	8003f08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	223f      	movs	r2, #63	; 0x3f
 8003b26:	409a      	lsls	r2, r3
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0216 	orr.w	r2, r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d007      	beq.n	8003b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e005      	b.n	8003b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d004      	beq.n	8003b9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e00c      	b.n	8003bb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bcc:	4b92      	ldr	r3, [pc, #584]	; (8003e18 <HAL_DMA_IRQHandler+0x258>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a92      	ldr	r2, [pc, #584]	; (8003e1c <HAL_DMA_IRQHandler+0x25c>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	0a9b      	lsrs	r3, r3, #10
 8003bd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	2208      	movs	r2, #8
 8003bec:	409a      	lsls	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01a      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0204 	bic.w	r2, r2, #4
 8003c12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c18:	2208      	movs	r2, #8
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4013      	ands	r3, r2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d012      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5a:	f043 0202 	orr.w	r2, r3, #2
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	2204      	movs	r2, #4
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	2204      	movs	r2, #4
 8003c86:	409a      	lsls	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0204 	orr.w	r2, r3, #4
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	2210      	movs	r2, #16
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d043      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d03c      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	2210      	movs	r2, #16
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d018      	beq.n	8003d02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d108      	bne.n	8003cf0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d024      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
 8003cee:	e01f      	b.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01b      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	4798      	blx	r3
 8003d00:	e016      	b.n	8003d30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0208 	bic.w	r2, r2, #8
 8003d1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	2220      	movs	r2, #32
 8003d36:	409a      	lsls	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 808e 	beq.w	8003e5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8086 	beq.w	8003e5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d56:	2220      	movs	r2, #32
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d136      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0216 	bic.w	r2, r2, #22
 8003d78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695a      	ldr	r2, [r3, #20]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x1da>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	223f      	movs	r2, #63	; 0x3f
 8003db0:	409a      	lsls	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d07d      	beq.n	8003eca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	4798      	blx	r3
        }
        return;
 8003dd6:	e078      	b.n	8003eca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01c      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d108      	bne.n	8003e06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d030      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
 8003e04:	e02b      	b.n	8003e5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d027      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
 8003e16:	e022      	b.n	8003e5e <HAL_DMA_IRQHandler+0x29e>
 8003e18:	20000000 	.word	0x20000000
 8003e1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10f      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0210 	bic.w	r2, r2, #16
 8003e3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d032      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d022      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2205      	movs	r2, #5
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d307      	bcc.n	8003ea6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f2      	bne.n	8003e8a <HAL_DMA_IRQHandler+0x2ca>
 8003ea4:	e000      	b.n	8003ea8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003ea6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
 8003ec8:	e000      	b.n	8003ecc <HAL_DMA_IRQHandler+0x30c>
        return;
 8003eca:	bf00      	nop
    }
  }
}
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop

08003ed4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee2:	b2db      	uxtb	r3, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d108      	bne.n	8003f48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f46:	e007      	b.n	8003f58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	3b10      	subs	r3, #16
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f76:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f7e:	4a13      	ldr	r2, [pc, #76]	; (8003fcc <DMA_CalcBaseAndBitshift+0x68>)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d909      	bls.n	8003fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa4:	e007      	b.n	8003fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	aaaaaaab 	.word	0xaaaaaaab
 8003fcc:	0800b714 	.word	0x0800b714

08003fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11f      	bne.n	800402a <DMA_CheckFifoParam+0x5a>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d856      	bhi.n	800409e <DMA_CheckFifoParam+0xce>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <DMA_CheckFifoParam+0x28>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	0800401b 	.word	0x0800401b
 8004000:	08004009 	.word	0x08004009
 8004004:	0800409f 	.word	0x0800409f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d046      	beq.n	80040a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004018:	e043      	b.n	80040a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004022:	d140      	bne.n	80040a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e03d      	b.n	80040a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004032:	d121      	bne.n	8004078 <DMA_CheckFifoParam+0xa8>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b03      	cmp	r3, #3
 8004038:	d837      	bhi.n	80040aa <DMA_CheckFifoParam+0xda>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <DMA_CheckFifoParam+0x70>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004051 	.word	0x08004051
 8004044:	08004057 	.word	0x08004057
 8004048:	08004051 	.word	0x08004051
 800404c:	08004069 	.word	0x08004069
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      break;
 8004054:	e030      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d025      	beq.n	80040ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004066:	e022      	b.n	80040ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004070:	d11f      	bne.n	80040b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004076:	e01c      	b.n	80040b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d903      	bls.n	8004086 <DMA_CheckFifoParam+0xb6>
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d003      	beq.n	800408c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004084:	e018      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	73fb      	strb	r3, [r7, #15]
      break;
 800408a:	e015      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00e      	beq.n	80040b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      break;
 800409c:	e00b      	b.n	80040b6 <DMA_CheckFifoParam+0xe6>
      break;
 800409e:	bf00      	nop
 80040a0:	e00a      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a2:	bf00      	nop
 80040a4:	e008      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040a6:	bf00      	nop
 80040a8:	e006      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040aa:	bf00      	nop
 80040ac:	e004      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ae:	bf00      	nop
 80040b0:	e002      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
    }
  } 
  
  return status; 
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e165      	b.n	80043b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8154 	bne.w	80043aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d005      	beq.n	800411a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	2b02      	cmp	r3, #2
 8004118:	d130      	bne.n	800417c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d017      	beq.n	80041b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80ae 	beq.w	80043aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_GPIO_Init+0x300>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_GPIO_Init+0x304>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4f      	ldr	r2, [pc, #316]	; (80043d0 <HAL_GPIO_Init+0x308>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d025      	beq.n	80042e2 <HAL_GPIO_Init+0x21a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4e      	ldr	r2, [pc, #312]	; (80043d4 <HAL_GPIO_Init+0x30c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01f      	beq.n	80042de <HAL_GPIO_Init+0x216>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a4d      	ldr	r2, [pc, #308]	; (80043d8 <HAL_GPIO_Init+0x310>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d019      	beq.n	80042da <HAL_GPIO_Init+0x212>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4c      	ldr	r2, [pc, #304]	; (80043dc <HAL_GPIO_Init+0x314>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x20e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <HAL_GPIO_Init+0x318>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x20a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a4a      	ldr	r2, [pc, #296]	; (80043e4 <HAL_GPIO_Init+0x31c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x206>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a49      	ldr	r2, [pc, #292]	; (80043e8 <HAL_GPIO_Init+0x320>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x202>
 80042c6:	2306      	movs	r3, #6
 80042c8:	e00c      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042ca:	2307      	movs	r3, #7
 80042cc:	e00a      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042ce:	2305      	movs	r3, #5
 80042d0:	e008      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e006      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e004      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042da:	2302      	movs	r3, #2
 80042dc:	e002      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042de:	2301      	movs	r3, #1
 80042e0:	e000      	b.n	80042e4 <HAL_GPIO_Init+0x21c>
 80042e2:	2300      	movs	r3, #0
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f002 0203 	and.w	r2, r2, #3
 80042ea:	0092      	lsls	r2, r2, #2
 80042ec:	4093      	lsls	r3, r2
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042f4:	4935      	ldr	r1, [pc, #212]	; (80043cc <HAL_GPIO_Init+0x304>)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3302      	adds	r3, #2
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004326:	4a31      	ldr	r2, [pc, #196]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <HAL_GPIO_Init+0x324>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004356:	4b25      	ldr	r3, [pc, #148]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800437a:	4a1c      	ldr	r2, [pc, #112]	; (80043ec <HAL_GPIO_Init+0x324>)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004380:	4b1a      	ldr	r3, [pc, #104]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043a4:	4a11      	ldr	r2, [pc, #68]	; (80043ec <HAL_GPIO_Init+0x324>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b0f      	cmp	r3, #15
 80043b4:	f67f ae96 	bls.w	80040e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	40013800 	.word	0x40013800
 80043d0:	40020000 	.word	0x40020000
 80043d4:	40020400 	.word	0x40020400
 80043d8:	40020800 	.word	0x40020800
 80043dc:	40020c00 	.word	0x40020c00
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40021400 	.word	0x40021400
 80043e8:	40021800 	.word	0x40021800
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
 80043fc:	4613      	mov	r3, r2
 80043fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004400:	787b      	ldrb	r3, [r7, #1]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800440c:	e003      	b.n	8004416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800440e:	887b      	ldrh	r3, [r7, #2]
 8004410:	041a      	lsls	r2, r3, #16
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	619a      	str	r2, [r3, #24]
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e12b      	b.n	800468e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd fe78 	bl	8002140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2224      	movs	r2, #36	; 0x24
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004488:	f003 f8aa 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 800448c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4a81      	ldr	r2, [pc, #516]	; (8004698 <HAL_I2C_Init+0x274>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d807      	bhi.n	80044a8 <HAL_I2C_Init+0x84>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a80      	ldr	r2, [pc, #512]	; (800469c <HAL_I2C_Init+0x278>)
 800449c:	4293      	cmp	r3, r2
 800449e:	bf94      	ite	ls
 80044a0:	2301      	movls	r3, #1
 80044a2:	2300      	movhi	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e006      	b.n	80044b6 <HAL_I2C_Init+0x92>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a7d      	ldr	r2, [pc, #500]	; (80046a0 <HAL_I2C_Init+0x27c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bf94      	ite	ls
 80044b0:	2301      	movls	r3, #1
 80044b2:	2300      	movhi	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0e7      	b.n	800468e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a78      	ldr	r2, [pc, #480]	; (80046a4 <HAL_I2C_Init+0x280>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	0c9b      	lsrs	r3, r3, #18
 80044c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a6a      	ldr	r2, [pc, #424]	; (8004698 <HAL_I2C_Init+0x274>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d802      	bhi.n	80044f8 <HAL_I2C_Init+0xd4>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3301      	adds	r3, #1
 80044f6:	e009      	b.n	800450c <HAL_I2C_Init+0xe8>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	4a69      	ldr	r2, [pc, #420]	; (80046a8 <HAL_I2C_Init+0x284>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	3301      	adds	r3, #1
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	6812      	ldr	r2, [r2, #0]
 8004510:	430b      	orrs	r3, r1
 8004512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800451e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	495c      	ldr	r1, [pc, #368]	; (8004698 <HAL_I2C_Init+0x274>)
 8004528:	428b      	cmp	r3, r1
 800452a:	d819      	bhi.n	8004560 <HAL_I2C_Init+0x13c>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e59      	subs	r1, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fbb1 f3f3 	udiv	r3, r1, r3
 800453a:	1c59      	adds	r1, r3, #1
 800453c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004540:	400b      	ands	r3, r1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_I2C_Init+0x138>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1e59      	subs	r1, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fbb1 f3f3 	udiv	r3, r1, r3
 8004554:	3301      	adds	r3, #1
 8004556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800455a:	e051      	b.n	8004600 <HAL_I2C_Init+0x1dc>
 800455c:	2304      	movs	r3, #4
 800455e:	e04f      	b.n	8004600 <HAL_I2C_Init+0x1dc>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d111      	bne.n	800458c <HAL_I2C_Init+0x168>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1e58      	subs	r0, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6859      	ldr	r1, [r3, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	440b      	add	r3, r1
 8004576:	fbb0 f3f3 	udiv	r3, r0, r3
 800457a:	3301      	adds	r3, #1
 800457c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	e012      	b.n	80045b2 <HAL_I2C_Init+0x18e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e58      	subs	r0, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	0099      	lsls	r1, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Init+0x196>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e022      	b.n	8004600 <HAL_I2C_Init+0x1dc>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10e      	bne.n	80045e0 <HAL_I2C_Init+0x1bc>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1e58      	subs	r0, r3, #1
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6859      	ldr	r1, [r3, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	440b      	add	r3, r1
 80045d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045de:	e00f      	b.n	8004600 <HAL_I2C_Init+0x1dc>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	1e58      	subs	r0, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6859      	ldr	r1, [r3, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	0099      	lsls	r1, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f6:	3301      	adds	r3, #1
 80045f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	6809      	ldr	r1, [r1, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800462e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6911      	ldr	r1, [r2, #16]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68d2      	ldr	r2, [r2, #12]
 800463a:	4311      	orrs	r1, r2
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	430b      	orrs	r3, r1
 8004642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	000186a0 	.word	0x000186a0
 800469c:	001e847f 	.word	0x001e847f
 80046a0:	003d08ff 	.word	0x003d08ff
 80046a4:	431bde83 	.word	0x431bde83
 80046a8:	10624dd3 	.word	0x10624dd3

080046ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046c6:	f7fe fa9b 	bl	8002c00 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	f040 80d9 	bne.w	800488c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2319      	movs	r3, #25
 80046e0:	2201      	movs	r2, #1
 80046e2:	496d      	ldr	r1, [pc, #436]	; (8004898 <HAL_I2C_Mem_Write+0x1ec>)
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f002 fc0f 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
 80046f2:	e0cc      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_Mem_Write+0x56>
 80046fe:	2302      	movs	r3, #2
 8004700:	e0c5      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d007      	beq.n	8004728 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2221      	movs	r2, #33	; 0x21
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a4d      	ldr	r2, [pc, #308]	; (800489c <HAL_I2C_Mem_Write+0x1f0>)
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476a:	88f8      	ldrh	r0, [r7, #6]
 800476c:	893a      	ldrh	r2, [r7, #8]
 800476e:	8979      	ldrh	r1, [r7, #10]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4603      	mov	r3, r0
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f002 f88c 	bl	8006898 <I2C_RequestMemoryWrite>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d052      	beq.n	800482c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e081      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f002 fc90 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d107      	bne.n	80047b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e06b      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	781a      	ldrb	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d11b      	bne.n	800482c <HAL_I2C_Mem_Write+0x180>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d017      	beq.n	800482c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1aa      	bne.n	800478a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f002 fc7c 	bl	8007136 <I2C_WaitOnBTFFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2b04      	cmp	r3, #4
 800484a:	d107      	bne.n	800485c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e016      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	00100002 	.word	0x00100002
 800489c:	ffff0000 	.word	0xffff0000

080048a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	; 0x30
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	4608      	mov	r0, r1
 80048aa:	4611      	mov	r1, r2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	817b      	strh	r3, [r7, #10]
 80048b2:	460b      	mov	r3, r1
 80048b4:	813b      	strh	r3, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ba:	f7fe f9a1 	bl	8002c00 <HAL_GetTick>
 80048be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	f040 8208 	bne.w	8004cde <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	2319      	movs	r3, #25
 80048d4:	2201      	movs	r2, #1
 80048d6:	497b      	ldr	r1, [pc, #492]	; (8004ac4 <HAL_I2C_Mem_Read+0x224>)
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f002 fb15 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80048e4:	2302      	movs	r3, #2
 80048e6:	e1fb      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x56>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e1f4      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d007      	beq.n	800491c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2222      	movs	r2, #34	; 0x22
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2240      	movs	r2, #64	; 0x40
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4a5b      	ldr	r2, [pc, #364]	; (8004ac8 <HAL_I2C_Mem_Read+0x228>)
 800495c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800495e:	88f8      	ldrh	r0, [r7, #6]
 8004960:	893a      	ldrh	r2, [r7, #8]
 8004962:	8979      	ldrh	r1, [r7, #10]
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	4603      	mov	r3, r0
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f002 f828 	bl	80069c4 <I2C_RequestMemoryRead>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e1b0      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d113      	bne.n	80049ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004986:	2300      	movs	r3, #0
 8004988:	623b      	str	r3, [r7, #32]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	623b      	str	r3, [r7, #32]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e184      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d11b      	bne.n	80049ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e164      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d11b      	bne.n	8004a2e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a04:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	61bb      	str	r3, [r7, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	e144      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	617b      	str	r3, [r7, #20]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a44:	e138      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	f200 80f1 	bhi.w	8004c32 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d123      	bne.n	8004aa0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f002 fbdd 	bl	800721c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e139      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a9e:	e10b      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d14e      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4906      	ldr	r1, [pc, #24]	; (8004acc <HAL_I2C_Mem_Read+0x22c>)
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f002 fa28 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e10e      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
 8004ac2:	bf00      	nop
 8004ac4:	00100002 	.word	0x00100002
 8004ac8:	ffff0000 	.word	0xffff0000
 8004acc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b44:	e0b8      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	4966      	ldr	r1, [pc, #408]	; (8004ce8 <HAL_I2C_Mem_Read+0x448>)
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f002 f9d9 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0bf      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	2200      	movs	r2, #0
 8004baa:	494f      	ldr	r1, [pc, #316]	; (8004ce8 <HAL_I2C_Mem_Read+0x448>)
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f002 f9ab 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e091      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c30:	e042      	b.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f002 faf0 	bl	800721c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e04c      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0304 	and.w	r3, r3, #4
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d118      	bne.n	8004cb8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f47f aec2 	bne.w	8004a46 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3728      	adds	r7, #40	; 0x28
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	00010004 	.word	0x00010004

08004cec <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	f040 808e 	bne.w	8004e34 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d18:	4b4a      	ldr	r3, [pc, #296]	; (8004e44 <HAL_I2C_Mem_Write_IT+0x158>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	08db      	lsrs	r3, r3, #3
 8004d1e:	4a4a      	ldr	r2, [pc, #296]	; (8004e48 <HAL_I2C_Mem_Write_IT+0x15c>)
 8004d20:	fba2 2303 	umull	r2, r3, r2, r3
 8004d24:	0a1a      	lsrs	r2, r3, #8
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009a      	lsls	r2, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d116      	bne.n	8004d6c <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e064      	b.n	8004e36 <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d0db      	beq.n	8004d32 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_I2C_Mem_Write_IT+0x9c>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e056      	b.n	8004e36 <HAL_I2C_Mem_Write_IT+0x14a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d007      	beq.n	8004dae <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dbc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2240      	movs	r2, #64	; 0x40
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <HAL_I2C_Mem_Write_IT+0x160>)
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004df0:	897a      	ldrh	r2, [r7, #10]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004df6:	893a      	ldrh	r2, [r7, #8]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004dfc:	88fa      	ldrh	r2, [r7, #6]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e16:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004e2e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000000 	.word	0x20000000
 8004e48:	14f8b589 	.word	0x14f8b589
 8004e4c:	ffff0000 	.word	0xffff0000

08004e50 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	817b      	strh	r3, [r7, #10]
 8004e62:	460b      	mov	r3, r1
 8004e64:	813b      	strh	r3, [r7, #8]
 8004e66:	4613      	mov	r3, r2
 8004e68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e6e:	f7fd fec7 	bl	8002c00 <HAL_GetTick>
 8004e72:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	f040 812e 	bne.w	80050de <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e82:	4b99      	ldr	r3, [pc, #612]	; (80050e8 <HAL_I2C_Mem_Write_DMA+0x298>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	08db      	lsrs	r3, r3, #3
 8004e88:	4a98      	ldr	r2, [pc, #608]	; (80050ec <HAL_I2C_Mem_Write_DMA+0x29c>)
 8004e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8e:	0a1a      	lsrs	r2, r3, #8
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	009a      	lsls	r2, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d116      	bne.n	8004ed6 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0220 	orr.w	r2, r3, #32
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e104      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d0db      	beq.n	8004e9c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0f6      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d007      	beq.n	8004f18 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2221      	movs	r2, #33	; 0x21
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2240      	movs	r2, #64	; 0x40
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a66      	ldr	r2, [pc, #408]	; (80050f0 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8004f58:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80a9 	beq.w	80050b6 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02a      	beq.n	8004fc2 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f70:	4a60      	ldr	r2, [pc, #384]	; (80050f4 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f78:	4a5f      	ldr	r2, [pc, #380]	; (80050f8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004f7a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	2200      	movs	r2, #0
 8004f82:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	2200      	movs	r2, #0
 8004f8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	2200      	movs	r2, #0
 8004f92:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	2200      	movs	r2, #0
 8004f9a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3310      	adds	r3, #16
 8004fac:	461a      	mov	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	f7fe fd8b 	bl	8003acc <HAL_DMA_Start_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004fba:	7efb      	ldrb	r3, [r7, #27]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d166      	bne.n	800508e <HAL_I2C_Mem_Write_DMA+0x23e>
 8004fc0:	e013      	b.n	8004fea <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07a      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004fea:	88f8      	ldrh	r0, [r7, #6]
 8004fec:	893a      	ldrh	r2, [r7, #8]
 8004fee:	8979      	ldrh	r1, [r7, #10]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9301      	str	r3, [sp, #4]
 8004ff4:	2323      	movs	r3, #35	; 0x23
 8004ff6:	9300      	str	r3, [sp, #0]
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f001 fc4c 	bl	8006898 <I2C_RequestMemoryWrite>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d022      	beq.n	800504c <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fdb6 	bl	8003b7c <HAL_DMA_Abort_IT>
 8005010:	4603      	mov	r3, r0
 8005012:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	2200      	movs	r2, #0
 800501a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e049      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005078:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005088:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e028      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f043 0210 	orr.w	r2, r3, #16
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e014      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000000 	.word	0x20000000
 80050ec:	14f8b589 	.word	0x14f8b589
 80050f0:	ffff0000 	.word	0xffff0000
 80050f4:	08006b95 	.word	0x08006b95
 80050f8:	08006d3f 	.word	0x08006d3f

080050fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005124:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d003      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0x38>
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	f040 80bd 	bne.w	80052ae <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_I2C_EV_IRQHandler+0x6e>
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005154:	d003      	beq.n	800515e <HAL_I2C_EV_IRQHandler+0x62>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800515c:	d101      	bne.n	8005162 <HAL_I2C_EV_IRQHandler+0x66>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_I2C_EV_IRQHandler+0x68>
 8005162:	2300      	movs	r3, #0
 8005164:	2b01      	cmp	r3, #1
 8005166:	f000 812e 	beq.w	80053c6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <HAL_I2C_EV_IRQHandler+0x92>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0a5b      	lsrs	r3, r3, #9
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d006      	beq.n	800518e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f002 f8d0 	bl	8007326 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fd70 	bl	8005c6c <I2C_Master_SB>
 800518c:	e08e      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	08db      	lsrs	r3, r3, #3
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_I2C_EV_IRQHandler+0xb2>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fde6 	bl	8005d78 <I2C_Master_ADD10>
 80051ac:	e07e      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	085b      	lsrs	r3, r3, #1
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_I2C_EV_IRQHandler+0xd2>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	0a5b      	lsrs	r3, r3, #9
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fe00 	bl	8005dcc <I2C_Master_ADDR>
 80051cc:	e06e      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d037      	beq.n	800524a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e8:	f000 80ef 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	09db      	lsrs	r3, r3, #7
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00f      	beq.n	8005218 <HAL_I2C_EV_IRQHandler+0x11c>
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	0a9b      	lsrs	r3, r3, #10
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d009      	beq.n	8005218 <HAL_I2C_EV_IRQHandler+0x11c>
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d103      	bne.n	8005218 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f9fd 	bl	8005610 <I2C_MasterTransmit_TXE>
 8005216:	e049      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	089b      	lsrs	r3, r3, #2
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80d2 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	0a5b      	lsrs	r3, r3, #9
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80cb 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b10      	cmp	r3, #16
 8005238:	d103      	bne.n	8005242 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa84 	bl	8005748 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005240:	e0c3      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fae8 	bl	8005818 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005248:	e0bf      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005258:	f000 80b7 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	099b      	lsrs	r3, r3, #6
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00f      	beq.n	8005288 <HAL_I2C_EV_IRQHandler+0x18c>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	0a9b      	lsrs	r3, r3, #10
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_I2C_EV_IRQHandler+0x18c>
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	089b      	lsrs	r3, r3, #2
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb58 	bl	8005936 <I2C_MasterReceive_RXNE>
 8005286:	e011      	b.n	80052ac <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 809a 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	0a5b      	lsrs	r3, r3, #9
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8093 	beq.w	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fbf7 	bl	8005a98 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052aa:	e08e      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
 80052ac:	e08d      	b.n	80053ca <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e007      	b.n	80052d0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d012      	beq.n	8005302 <HAL_I2C_EV_IRQHandler+0x206>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	0a5b      	lsrs	r3, r3, #9
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80052f8:	69b9      	ldr	r1, [r7, #24]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 ffb5 	bl	800626a <I2C_Slave_ADDR>
 8005300:	e066      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x226>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	0a5b      	lsrs	r3, r3, #9
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 ffea 	bl	80062f4 <I2C_Slave_STOPF>
 8005320:	e056      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	2b21      	cmp	r3, #33	; 0x21
 8005326:	d002      	beq.n	800532e <HAL_I2C_EV_IRQHandler+0x232>
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b29      	cmp	r3, #41	; 0x29
 800532c:	d125      	bne.n	800537a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	09db      	lsrs	r3, r3, #7
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00f      	beq.n	800535a <HAL_I2C_EV_IRQHandler+0x25e>
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	0a9b      	lsrs	r3, r3, #10
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <HAL_I2C_EV_IRQHandler+0x25e>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fecb 	bl	80060ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005358:	e039      	b.n	80053ce <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d033      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x2d2>
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	0a5b      	lsrs	r3, r3, #9
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02d      	beq.n	80053ce <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fef8 	bl	8006168 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005378:	e029      	b.n	80053ce <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00f      	beq.n	80053a6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	0a9b      	lsrs	r3, r3, #10
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d103      	bne.n	80053a6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 ff03 	bl	80061aa <I2C_SlaveReceive_RXNE>
 80053a4:	e014      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	0a5b      	lsrs	r3, r3, #9
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 ff31 	bl	8006226 <I2C_SlaveReceive_BTF>
 80053c4:	e004      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80053c6:	bf00      	nop
 80053c8:	e002      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053ce:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b08a      	sub	sp, #40	; 0x28
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <HAL_I2C_ER_IRQHandler+0x4e>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	0a1b      	lsrs	r3, r3, #8
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	f043 0301 	orr.w	r3, r3, #1
 8005418:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005422:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <HAL_I2C_ER_IRQHandler+0x78>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	0a1b      	lsrs	r3, r3, #8
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	f043 0302 	orr.w	r3, r3, #2
 8005442:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800544c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	0a9b      	lsrs	r3, r3, #10
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d03f      	beq.n	80054da <HAL_I2C_ER_IRQHandler+0x104>
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	0a1b      	lsrs	r3, r3, #8
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d039      	beq.n	80054da <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005466:	7efb      	ldrb	r3, [r7, #27]
 8005468:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005480:	7ebb      	ldrb	r3, [r7, #26]
 8005482:	2b20      	cmp	r3, #32
 8005484:	d112      	bne.n	80054ac <HAL_I2C_ER_IRQHandler+0xd6>
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10f      	bne.n	80054ac <HAL_I2C_ER_IRQHandler+0xd6>
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b21      	cmp	r3, #33	; 0x21
 8005490:	d008      	beq.n	80054a4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	2b29      	cmp	r3, #41	; 0x29
 8005496:	d005      	beq.n	80054a4 <HAL_I2C_ER_IRQHandler+0xce>
 8005498:	7cfb      	ldrb	r3, [r7, #19]
 800549a:	2b28      	cmp	r3, #40	; 0x28
 800549c:	d106      	bne.n	80054ac <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b21      	cmp	r3, #33	; 0x21
 80054a2:	d103      	bne.n	80054ac <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 f855 	bl	8006554 <I2C_Slave_AF>
 80054aa:	e016      	b.n	80054da <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80054be:	7efb      	ldrb	r3, [r7, #27]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d002      	beq.n	80054ca <HAL_I2C_ER_IRQHandler+0xf4>
 80054c4:	7efb      	ldrb	r3, [r7, #27]
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d107      	bne.n	80054da <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	0adb      	lsrs	r3, r3, #11
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00e      	beq.n	8005504 <HAL_I2C_ER_IRQHandler+0x12e>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	f043 0308 	orr.w	r3, r3, #8
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005502:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 f88c 	bl	8006634 <I2C_ITError>
  }
}
 800551c:	bf00      	nop
 800551e:	3728      	adds	r7, #40	; 0x28
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
 8005580:	4613      	mov	r3, r2
 8005582:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005602:	b2db      	uxtb	r3, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800561e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005626:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d150      	bne.n	80056d8 <I2C_MasterTransmit_TXE+0xc8>
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b21      	cmp	r3, #33	; 0x21
 800563a:	d14d      	bne.n	80056d8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b08      	cmp	r3, #8
 8005640:	d01d      	beq.n	800567e <I2C_MasterTransmit_TXE+0x6e>
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b20      	cmp	r3, #32
 8005646:	d01a      	beq.n	800567e <I2C_MasterTransmit_TXE+0x6e>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800564e:	d016      	beq.n	800567e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2211      	movs	r2, #17
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff ff54 	bl	8005524 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800567c:	e060      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800568c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d107      	bne.n	80056c8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff6f 	bl	80055a4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056c6:	e03b      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ff27 	bl	8005524 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80056d6:	e033      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	2b21      	cmp	r3, #33	; 0x21
 80056dc:	d005      	beq.n	80056ea <I2C_MasterTransmit_TXE+0xda>
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d12d      	bne.n	8005740 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b22      	cmp	r3, #34	; 0x22
 80056e8:	d12a      	bne.n	8005740 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d108      	bne.n	8005706 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005704:	e01c      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d103      	bne.n	800571a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f880 	bl	8005818 <I2C_MemoryTransmit_TXE_BTF>
}
 8005718:	e012      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	781a      	ldrb	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005734:	b29b      	uxth	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	b29a      	uxth	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800573e:	e7ff      	b.n	8005740 <I2C_MasterTransmit_TXE+0x130>
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b21      	cmp	r3, #33	; 0x21
 8005760:	d156      	bne.n	8005810 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d012      	beq.n	8005792 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005790:	e03e      	b.n	8005810 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d01d      	beq.n	80057d4 <I2C_MasterTransmit_BTF+0x8c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b20      	cmp	r3, #32
 800579c:	d01a      	beq.n	80057d4 <I2C_MasterTransmit_BTF+0x8c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057a4:	d016      	beq.n	80057d4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057b4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2211      	movs	r2, #17
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2220      	movs	r2, #32
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fea9 	bl	8005524 <HAL_I2C_MasterTxCpltCallback>
}
 80057d2:	e01d      	b.n	8005810 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe8a 	bl	8005524 <HAL_I2C_MasterTxCpltCallback>
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005826:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	2b00      	cmp	r3, #0
 800582e:	d11d      	bne.n	800586c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10b      	bne.n	8005850 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583c:	b2da      	uxtb	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	1c9a      	adds	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800584e:	e06e      	b.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	b29b      	uxth	r3, r3
 8005856:	121b      	asrs	r3, r3, #8
 8005858:	b2da      	uxtb	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	651a      	str	r2, [r3, #80]	; 0x50
}
 800586a:	e060      	b.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	2b01      	cmp	r3, #1
 8005872:	d10b      	bne.n	800588c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005878:	b2da      	uxtb	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
}
 800588a:	e050      	b.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005890:	2b02      	cmp	r3, #2
 8005892:	d14c      	bne.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005894:	7bfb      	ldrb	r3, [r7, #15]
 8005896:	2b22      	cmp	r3, #34	; 0x22
 8005898:	d108      	bne.n	80058ac <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a8:	601a      	str	r2, [r3, #0]
}
 80058aa:	e040      	b.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d015      	beq.n	80058e2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	2b21      	cmp	r3, #33	; 0x21
 80058ba:	d112      	bne.n	80058e2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058e0:	e025      	b.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d120      	bne.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b21      	cmp	r3, #33	; 0x21
 80058f0:	d11d      	bne.n	800592e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005900:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005910:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fe3b 	bl	80055a4 <HAL_I2C_MemTxCpltCallback>
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b22      	cmp	r3, #34	; 0x22
 8005948:	f040 80a2 	bne.w	8005a90 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d921      	bls.n	800599e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b03      	cmp	r3, #3
 8005988:	f040 8082 	bne.w	8005a90 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800599c:	e078      	b.n	8005a90 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d074      	beq.n	8005a90 <I2C_MasterReceive_RXNE+0x15a>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d002      	beq.n	80059b2 <I2C_MasterReceive_RXNE+0x7c>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d16e      	bne.n	8005a90 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fc00 	bl	80071b8 <I2C_WaitOnSTOPRequestThroughIT>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d142      	bne.n	8005a44 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059cc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d10a      	bne.n	8005a2e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff fdc6 	bl	80055b8 <HAL_I2C_MemRxCpltCallback>
}
 8005a2c:	e030      	b.n	8005a90 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2212      	movs	r2, #18
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7ff fd7b 	bl	8005538 <HAL_I2C_MasterRxCpltCallback>
}
 8005a42:	e025      	b.n	8005a90 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a52:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fd9e 	bl	80055cc <HAL_I2C_ErrorCallback>
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d11b      	bne.n	8005ae8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005ae6:	e0bd      	b.n	8005c64 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d129      	bne.n	8005b46 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b00:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d00a      	beq.n	8005b1e <I2C_MasterReceive_BTF+0x86>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d007      	beq.n	8005b1e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b44:	e08e      	b.n	8005c64 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d176      	bne.n	8005c3e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d002      	beq.n	8005b5c <I2C_MasterReceive_BTF+0xc4>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d108      	bne.n	8005b6e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e019      	b.n	8005ba2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d002      	beq.n	8005b7a <I2C_MasterReceive_BTF+0xe2>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d108      	bne.n	8005b8c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e00a      	b.n	8005ba2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d007      	beq.n	8005ba2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bfc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b40      	cmp	r3, #64	; 0x40
 8005c10:	d10a      	bne.n	8005c28 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fcc9 	bl	80055b8 <HAL_I2C_MemRxCpltCallback>
}
 8005c26:	e01d      	b.n	8005c64 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2212      	movs	r2, #18
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff fc7e 	bl	8005538 <HAL_I2C_MasterRxCpltCallback>
}
 8005c3c:	e012      	b.n	8005c64 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691a      	ldr	r2, [r3, #16]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d117      	bne.n	8005cb0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c98:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005c9a:	e067      	b.n	8005d6c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	611a      	str	r2, [r3, #16]
}
 8005cae:	e05d      	b.n	8005d6c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cb8:	d133      	bne.n	8005d22 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b21      	cmp	r3, #33	; 0x21
 8005cc4:	d109      	bne.n	8005cda <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd6:	611a      	str	r2, [r3, #16]
 8005cd8:	e008      	b.n	8005cec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <I2C_Master_SB+0x92>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d108      	bne.n	8005d10 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d032      	beq.n	8005d6c <I2C_Master_SB+0x100>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d02d      	beq.n	8005d6c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1e:	605a      	str	r2, [r3, #4]
}
 8005d20:	e024      	b.n	8005d6c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10e      	bne.n	8005d48 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	11db      	asrs	r3, r3, #7
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	f003 0306 	and.w	r3, r3, #6
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	f063 030f 	orn	r3, r3, #15
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	611a      	str	r2, [r3, #16]
}
 8005d46:	e011      	b.n	8005d6c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10d      	bne.n	8005d6c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	11db      	asrs	r3, r3, #7
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0306 	and.w	r3, r3, #6
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f063 030e 	orn	r3, r3, #14
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	611a      	str	r2, [r3, #16]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <I2C_Master_ADD10+0x26>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d108      	bne.n	8005db0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00c      	beq.n	8005dc0 <I2C_Master_ADD10+0x48>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	605a      	str	r2, [r3, #4]
  }
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b091      	sub	sp, #68	; 0x44
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b22      	cmp	r3, #34	; 0x22
 8005df4:	f040 8169 	bne.w	80060ca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10f      	bne.n	8005e20 <I2C_Master_ADDR+0x54>
 8005e00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d10b      	bne.n	8005e20 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1e:	e160      	b.n	80060e2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d11d      	bne.n	8005e64 <I2C_Master_ADDR+0x98>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e30:	d118      	bne.n	8005e64 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e32:	2300      	movs	r3, #0
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e56:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	651a      	str	r2, [r3, #80]	; 0x50
 8005e62:	e13e      	b.n	80060e2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d113      	bne.n	8005e96 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	e115      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	f040 808a 	bne.w	8005fb6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ea8:	d137      	bne.n	8005f1a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec8:	d113      	bne.n	8005ef2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	e0e7      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	623b      	str	r3, [r7, #32]
 8005f06:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e0d3      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d02e      	beq.n	8005f7e <I2C_Master_ADDR+0x1b2>
 8005f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f22:	2b20      	cmp	r3, #32
 8005f24:	d02b      	beq.n	8005f7e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f28:	2b12      	cmp	r3, #18
 8005f2a:	d102      	bne.n	8005f32 <I2C_Master_ADDR+0x166>
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d125      	bne.n	8005f7e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	2b04      	cmp	r3, #4
 8005f36:	d00e      	beq.n	8005f56 <I2C_Master_ADDR+0x18a>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d00b      	beq.n	8005f56 <I2C_Master_ADDR+0x18a>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d008      	beq.n	8005f56 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e007      	b.n	8005f66 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f64:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	e0a1      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	e085      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d14d      	bne.n	800605c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d016      	beq.n	8005ff4 <I2C_Master_ADDR+0x228>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d013      	beq.n	8005ff4 <I2C_Master_ADDR+0x228>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d010      	beq.n	8005ff4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e007      	b.n	8006004 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006002:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800600e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006012:	d117      	bne.n	8006044 <I2C_Master_ADDR+0x278>
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800601a:	d00b      	beq.n	8006034 <I2C_Master_ADDR+0x268>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2b01      	cmp	r3, #1
 8006020:	d008      	beq.n	8006034 <I2C_Master_ADDR+0x268>
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	2b08      	cmp	r3, #8
 8006026:	d005      	beq.n	8006034 <I2C_Master_ADDR+0x268>
 8006028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602a:	2b10      	cmp	r3, #16
 800602c:	d002      	beq.n	8006034 <I2C_Master_ADDR+0x268>
 800602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006030:	2b20      	cmp	r3, #32
 8006032:	d107      	bne.n	8006044 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006042:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	e032      	b.n	80060c2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800606a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607a:	d117      	bne.n	80060ac <I2C_Master_ADDR+0x2e0>
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006082:	d00b      	beq.n	800609c <I2C_Master_ADDR+0x2d0>
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	2b01      	cmp	r3, #1
 8006088:	d008      	beq.n	800609c <I2C_Master_ADDR+0x2d0>
 800608a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608c:	2b08      	cmp	r3, #8
 800608e:	d005      	beq.n	800609c <I2C_Master_ADDR+0x2d0>
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	2b10      	cmp	r3, #16
 8006094:	d002      	beq.n	800609c <I2C_Master_ADDR+0x2d0>
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	2b20      	cmp	r3, #32
 800609a:	d107      	bne.n	80060ac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80060c8:	e00b      	b.n	80060e2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	e7ff      	b.n	80060e2 <I2C_Master_ADDR+0x316>
 80060e2:	bf00      	nop
 80060e4:	3744      	adds	r7, #68	; 0x44
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02b      	beq.n	8006160 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d114      	bne.n	8006160 <I2C_SlaveTransmit_TXE+0x72>
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	2b29      	cmp	r3, #41	; 0x29
 800613a:	d111      	bne.n	8006160 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2221      	movs	r2, #33	; 0x21
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2228      	movs	r2, #40	; 0x28
 8006156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff f9f6 	bl	800554c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006160:	bf00      	nop
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	781a      	ldrb	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d02c      	beq.n	800621e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d114      	bne.n	800621e <I2C_SlaveReceive_RXNE+0x74>
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b2a      	cmp	r3, #42	; 0x2a
 80061f8:	d111      	bne.n	800621e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006208:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2222      	movs	r2, #34	; 0x22
 800620e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2228      	movs	r2, #40	; 0x28
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff f9a1 	bl	8005560 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d012      	beq.n	800625e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006254:	b29b      	uxth	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006284:	2b28      	cmp	r3, #40	; 0x28
 8006286:	d127      	bne.n	80062d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006296:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	81bb      	strh	r3, [r7, #12]
 80062ba:	e002      	b.n	80062c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80062ca:	89ba      	ldrh	r2, [r7, #12]
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f94f 	bl	8005574 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80062d6:	e008      	b.n	80062ea <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0202 	mvn.w	r2, #2
 80062e0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006302:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006312:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006314:	2300      	movs	r3, #0
 8006316:	60bb      	str	r3, [r7, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006340:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800634c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006350:	d172      	bne.n	8006438 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	2b22      	cmp	r3, #34	; 0x22
 8006356:	d002      	beq.n	800635e <I2C_Slave_STOPF+0x6a>
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	2b2a      	cmp	r3, #42	; 0x2a
 800635c:	d135      	bne.n	80063ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b29a      	uxth	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0204 	orr.w	r2, r3, #4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	4618      	mov	r0, r3
 8006398:	f7fd fd9c 	bl	8003ed4 <HAL_DMA_GetState>
 800639c:	4603      	mov	r3, r0
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d049      	beq.n	8006436 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	4a69      	ldr	r2, [pc, #420]	; (800654c <I2C_Slave_STOPF+0x258>)
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fd fbe4 	bl	8003b7c <HAL_DMA_Abort_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d03d      	beq.n	8006436 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80063c8:	e035      	b.n	8006436 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f043 0204 	orr.w	r2, r3, #4
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	4618      	mov	r0, r3
 8006404:	f7fd fd66 	bl	8003ed4 <HAL_DMA_GetState>
 8006408:	4603      	mov	r3, r0
 800640a:	2b01      	cmp	r3, #1
 800640c:	d014      	beq.n	8006438 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006412:	4a4e      	ldr	r2, [pc, #312]	; (800654c <I2C_Slave_STOPF+0x258>)
 8006414:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800641a:	4618      	mov	r0, r3
 800641c:	f7fd fbae 	bl	8003b7c <HAL_DMA_Abort_IT>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006430:	4610      	mov	r0, r2
 8006432:	4798      	blx	r3
 8006434:	e000      	b.n	8006438 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006436:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d03e      	beq.n	80064c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d112      	bne.n	8006476 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	3b01      	subs	r3, #1
 8006470:	b29a      	uxth	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d112      	bne.n	80064aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d005      	beq.n	80064c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	f043 0204 	orr.w	r2, r3, #4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8b3 	bl	8006634 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80064ce:	e039      	b.n	8006544 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	2b2a      	cmp	r3, #42	; 0x2a
 80064d4:	d109      	bne.n	80064ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2228      	movs	r2, #40	; 0x28
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff f83b 	bl	8005560 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b28      	cmp	r3, #40	; 0x28
 80064f4:	d111      	bne.n	800651a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <I2C_Slave_STOPF+0x25c>)
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff f83c 	bl	8005590 <HAL_I2C_ListenCpltCallback>
}
 8006518:	e014      	b.n	8006544 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	2b22      	cmp	r3, #34	; 0x22
 8006520:	d002      	beq.n	8006528 <I2C_Slave_STOPF+0x234>
 8006522:	7bfb      	ldrb	r3, [r7, #15]
 8006524:	2b22      	cmp	r3, #34	; 0x22
 8006526:	d10d      	bne.n	8006544 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff f80e 	bl	8005560 <HAL_I2C_SlaveRxCpltCallback>
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	08006db9 	.word	0x08006db9
 8006550:	ffff0000 	.word	0xffff0000

08006554 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006562:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b08      	cmp	r3, #8
 800656e:	d002      	beq.n	8006576 <I2C_Slave_AF+0x22>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b20      	cmp	r3, #32
 8006574:	d129      	bne.n	80065ca <I2C_Slave_AF+0x76>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b28      	cmp	r3, #40	; 0x28
 800657a:	d126      	bne.n	80065ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <I2C_Slave_AF+0xdc>)
 8006580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006590:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800659a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe ffe4 	bl	8005590 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80065c8:	e02e      	b.n	8006628 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	2b21      	cmp	r3, #33	; 0x21
 80065ce:	d126      	bne.n	800661e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <I2C_Slave_AF+0xdc>)
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2221      	movs	r2, #33	; 0x21
 80065da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006604:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006614:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe ff98 	bl	800554c <HAL_I2C_SlaveTxCpltCallback>
}
 800661c:	e004      	b.n	8006628 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006626:	615a      	str	r2, [r3, #20]
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	ffff0000 	.word	0xffff0000

08006634 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006642:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800664a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b10      	cmp	r3, #16
 8006650:	d002      	beq.n	8006658 <I2C_ITError+0x24>
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b40      	cmp	r3, #64	; 0x40
 8006656:	d10a      	bne.n	800666e <I2C_ITError+0x3a>
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b22      	cmp	r3, #34	; 0x22
 800665c:	d107      	bne.n	800666e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800666c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800666e:	7bfb      	ldrb	r3, [r7, #15]
 8006670:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006674:	2b28      	cmp	r3, #40	; 0x28
 8006676:	d107      	bne.n	8006688 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2228      	movs	r2, #40	; 0x28
 8006682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006686:	e015      	b.n	80066b4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006696:	d00a      	beq.n	80066ae <I2C_ITError+0x7a>
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b60      	cmp	r3, #96	; 0x60
 800669c:	d007      	beq.n	80066ae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c2:	d162      	bne.n	800678a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066d2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d020      	beq.n	8006724 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e6:	4a6a      	ldr	r2, [pc, #424]	; (8006890 <I2C_ITError+0x25c>)
 80066e8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fd fa44 	bl	8003b7c <HAL_DMA_Abort_IT>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8089 	beq.w	800680e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800671e:	4610      	mov	r0, r2
 8006720:	4798      	blx	r3
 8006722:	e074      	b.n	800680e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006728:	4a59      	ldr	r2, [pc, #356]	; (8006890 <I2C_ITError+0x25c>)
 800672a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	4618      	mov	r0, r3
 8006732:	f7fd fa23 	bl	8003b7c <HAL_DMA_Abort_IT>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d068      	beq.n	800680e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d10b      	bne.n	8006762 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	b2d2      	uxtb	r2, r2
 8006756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006784:	4610      	mov	r0, r2
 8006786:	4798      	blx	r3
 8006788:	e041      	b.n	800680e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b60      	cmp	r3, #96	; 0x60
 8006794:	d125      	bne.n	80067e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d10b      	bne.n	80067ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691a      	ldr	r2, [r3, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fe ff00 	bl	80055e0 <HAL_I2C_AbortCpltCallback>
 80067e0:	e015      	b.n	800680e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d10b      	bne.n	8006808 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fe fedf 	bl	80055cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10e      	bne.n	800683c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d113      	bne.n	8006888 <I2C_ITError+0x254>
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b28      	cmp	r3, #40	; 0x28
 8006864:	d110      	bne.n	8006888 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <I2C_ITError+0x260>)
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fe84 	bl	8005590 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	08006db9 	.word	0x08006db9
 8006894:	ffff0000 	.word	0xffff0000

08006898 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	817b      	strh	r3, [r7, #10]
 80068aa:	460b      	mov	r3, r1
 80068ac:	813b      	strh	r3, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 fb1a 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e8:	d103      	bne.n	80068f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e05f      	b.n	80069b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068f6:	897b      	ldrh	r3, [r7, #10]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006904:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	6a3a      	ldr	r2, [r7, #32]
 800690a:	492d      	ldr	r1, [pc, #180]	; (80069c0 <I2C_RequestMemoryWrite+0x128>)
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fb52 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e04c      	b.n	80069b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006934:	6a39      	ldr	r1, [r7, #32]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fbbc 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00d      	beq.n	800695e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006946:	2b04      	cmp	r3, #4
 8006948:	d107      	bne.n	800695a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006958:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e02b      	b.n	80069b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800695e:	88fb      	ldrh	r3, [r7, #6]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d105      	bne.n	8006970 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006964:	893b      	ldrh	r3, [r7, #8]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	611a      	str	r2, [r3, #16]
 800696e:	e021      	b.n	80069b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006970:	893b      	ldrh	r3, [r7, #8]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	b29b      	uxth	r3, r3
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800697e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006980:	6a39      	ldr	r1, [r7, #32]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fb96 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	2b04      	cmp	r3, #4
 8006994:	d107      	bne.n	80069a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e005      	b.n	80069b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069aa:	893b      	ldrh	r3, [r7, #8]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	00010002 	.word	0x00010002

080069c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	4608      	mov	r0, r1
 80069ce:	4611      	mov	r1, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	817b      	strh	r3, [r7, #10]
 80069d6:	460b      	mov	r3, r1
 80069d8:	813b      	strh	r3, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fa7c 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a24:	d103      	bne.n	8006a2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e0aa      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a32:	897b      	ldrh	r3, [r7, #10]
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	6a3a      	ldr	r2, [r7, #32]
 8006a46:	4952      	ldr	r1, [pc, #328]	; (8006b90 <I2C_RequestMemoryRead+0x1cc>)
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fab4 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e097      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a70:	6a39      	ldr	r1, [r7, #32]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 fb1e 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00d      	beq.n	8006a9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d107      	bne.n	8006a96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e076      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d105      	bne.n	8006aac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa0:	893b      	ldrh	r3, [r7, #8]
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	611a      	str	r2, [r3, #16]
 8006aaa:	e021      	b.n	8006af0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aac:	893b      	ldrh	r3, [r7, #8]
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006abc:	6a39      	ldr	r1, [r7, #32]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 faf8 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00d      	beq.n	8006ae6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d107      	bne.n	8006ae2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e050      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ae6:	893b      	ldrh	r3, [r7, #8]
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af2:	6a39      	ldr	r1, [r7, #32]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fadd 	bl	80070b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00d      	beq.n	8006b1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d107      	bne.n	8006b18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e035      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f9e5 	bl	8006f08 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00d      	beq.n	8006b60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b52:	d103      	bne.n	8006b5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e013      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b60:	897b      	ldrh	r3, [r7, #10]
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	4906      	ldr	r1, [pc, #24]	; (8006b90 <I2C_RequestMemoryRead+0x1cc>)
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f000 fa1d 	bl	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	00010002 	.word	0x00010002

08006b94 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bb0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006bc6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	2200      	movs	r2, #0
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006bee:	2b21      	cmp	r3, #33	; 0x21
 8006bf0:	d007      	beq.n	8006c02 <I2C_DMAXferCplt+0x6e>
 8006bf2:	7cfb      	ldrb	r3, [r7, #19]
 8006bf4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006bf8:	2b22      	cmp	r3, #34	; 0x22
 8006bfa:	d131      	bne.n	8006c60 <I2C_DMAXferCplt+0xcc>
 8006bfc:	7cbb      	ldrb	r3, [r7, #18]
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d12e      	bne.n	8006c60 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c10:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	2b29      	cmp	r3, #41	; 0x29
 8006c1c:	d10a      	bne.n	8006c34 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2221      	movs	r2, #33	; 0x21
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	2228      	movs	r2, #40	; 0x28
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c2c:	6978      	ldr	r0, [r7, #20]
 8006c2e:	f7fe fc8d 	bl	800554c <HAL_I2C_SlaveTxCpltCallback>
 8006c32:	e00c      	b.n	8006c4e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	2b2a      	cmp	r3, #42	; 0x2a
 8006c38:	d109      	bne.n	8006c4e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2222      	movs	r2, #34	; 0x22
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2228      	movs	r2, #40	; 0x28
 8006c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	f7fe fc89 	bl	8005560 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006c5c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c5e:	e06a      	b.n	8006d36 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d064      	beq.n	8006d36 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d107      	bne.n	8006c86 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c94:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c9c:	d009      	beq.n	8006cb2 <I2C_DMAXferCplt+0x11e>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	d006      	beq.n	8006cb2 <I2C_DMAXferCplt+0x11e>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006caa:	d002      	beq.n	8006cb2 <I2C_DMAXferCplt+0x11e>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d107      	bne.n	8006cc2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cc0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cd0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ce0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f7fe fc6b 	bl	80055cc <HAL_I2C_ErrorCallback>
}
 8006cf6:	e01e      	b.n	8006d36 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d10a      	bne.n	8006d22 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f7fe fc4c 	bl	80055b8 <HAL_I2C_MemRxCpltCallback>
}
 8006d20:	e009      	b.n	8006d36 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2212      	movs	r2, #18
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d30:	6978      	ldr	r0, [r7, #20]
 8006d32:	f7fe fc01 	bl	8005538 <HAL_I2C_MasterRxCpltCallback>
}
 8006d36:	bf00      	nop
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d58:	2200      	movs	r2, #0
 8006d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	2200      	movs	r2, #0
 8006d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7fd f8bf 	bl	8003ef0 <HAL_DMA_GetError>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d01b      	beq.n	8006db0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d86:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0210 	orr.w	r2, r3, #16
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7fe fc0e 	bl	80055cc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dd2:	4b4b      	ldr	r3, [pc, #300]	; (8006f00 <I2C_DMAAbort+0x148>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	08db      	lsrs	r3, r3, #3
 8006dd8:	4a4a      	ldr	r2, [pc, #296]	; (8006f04 <I2C_DMAAbort+0x14c>)
 8006dda:	fba2 2303 	umull	r2, r3, r2, r3
 8006dde:	0a1a      	lsrs	r2, r3, #8
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	00da      	lsls	r2, r3, #3
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d106      	bne.n	8006e00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006dfe:	e00a      	b.n	8006e16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d0ea      	beq.n	8006dec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d003      	beq.n	8006e26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e22:	2200      	movs	r2, #0
 8006e24:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	2200      	movs	r2, #0
 8006e34:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	2200      	movs	r2, #0
 8006e5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	2200      	movs	r2, #0
 8006e6a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f022 0201 	bic.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b60      	cmp	r3, #96	; 0x60
 8006e86:	d10e      	bne.n	8006ea6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e9e:	6978      	ldr	r0, [r7, #20]
 8006ea0:	f7fe fb9e 	bl	80055e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ea4:	e027      	b.n	8006ef6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ea6:	7cfb      	ldrb	r3, [r7, #19]
 8006ea8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006eac:	2b28      	cmp	r3, #40	; 0x28
 8006eae:	d117      	bne.n	8006ee0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ece:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	2228      	movs	r2, #40	; 0x28
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ede:	e007      	b.n	8006ef0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7fe fb6b 	bl	80055cc <HAL_I2C_ErrorCallback>
}
 8006ef6:	bf00      	nop
 8006ef8:	3718      	adds	r7, #24
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	20000000 	.word	0x20000000
 8006f04:	14f8b589 	.word	0x14f8b589

08006f08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	603b      	str	r3, [r7, #0]
 8006f14:	4613      	mov	r3, r2
 8006f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f18:	e025      	b.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f20:	d021      	beq.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f22:	f7fb fe6d 	bl	8002c00 <HAL_GetTick>
 8006f26:	4602      	mov	r2, r0
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d302      	bcc.n	8006f38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d116      	bne.n	8006f66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	f043 0220 	orr.w	r2, r3, #32
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e023      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d10d      	bne.n	8006f8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	43da      	mvns	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	e00c      	b.n	8006fa6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	43da      	mvns	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0b6      	beq.n	8006f1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fc4:	e051      	b.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	695b      	ldr	r3, [r3, #20]
 8006fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd4:	d123      	bne.n	800701e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	f043 0204 	orr.w	r2, r3, #4
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e046      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007024:	d021      	beq.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fb fdeb 	bl	8002c00 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d116      	bne.n	800706a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e020      	b.n	80070ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	0c1b      	lsrs	r3, r3, #16
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10c      	bne.n	800708e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	43da      	mvns	r2, r3
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e00b      	b.n	80070a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	43da      	mvns	r2, r3
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d18d      	bne.n	8006fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070c0:	e02d      	b.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f900 	bl	80072c8 <I2C_IsAcknowledgeFailed>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e02d      	b.n	800712e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d8:	d021      	beq.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fb fd91 	bl	8002c00 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d116      	bne.n	800711e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e007      	b.n	800712e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d1ca      	bne.n	80070c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007142:	e02d      	b.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f8bf 	bl	80072c8 <I2C_IsAcknowledgeFailed>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e02d      	b.n	80071b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715a:	d021      	beq.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fb fd50 	bl	8002c00 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d116      	bne.n	80071a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e007      	b.n	80071b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d1ca      	bne.n	8007144 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80071c4:	4b13      	ldr	r3, [pc, #76]	; (8007214 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	08db      	lsrs	r3, r3, #3
 80071ca:	4a13      	ldr	r2, [pc, #76]	; (8007218 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80071cc:	fba2 2303 	umull	r2, r3, r2, r3
 80071d0:	0a1a      	lsrs	r2, r3, #8
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3b01      	subs	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d107      	bne.n	80071f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f043 0220 	orr.w	r2, r3, #32
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e008      	b.n	8007208 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007204:	d0e9      	beq.n	80071da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000000 	.word	0x20000000
 8007218:	14f8b589 	.word	0x14f8b589

0800721c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007228:	e042      	b.n	80072b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b10      	cmp	r3, #16
 8007236:	d119      	bne.n	800726c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0210 	mvn.w	r2, #16
 8007240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e029      	b.n	80072c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726c:	f7fb fcc8 	bl	8002c00 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d116      	bne.n	80072b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2220      	movs	r2, #32
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	f043 0220 	orr.w	r2, r3, #32
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e007      	b.n	80072c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d1b5      	bne.n	800722a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072de:	d11b      	bne.n	8007318 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2220      	movs	r2, #32
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	f043 0204 	orr.w	r2, r3, #4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007332:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007336:	d103      	bne.n	8007340 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800733e:	e007      	b.n	8007350 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007344:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007348:	d102      	bne.n	8007350 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2208      	movs	r2, #8
 800734e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007366:	2300      	movs	r3, #0
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <HAL_PWREx_EnableOverDrive+0x90>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <HAL_PWREx_EnableOverDrive+0x90>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007374:	6413      	str	r3, [r2, #64]	; 0x40
 8007376:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <HAL_PWREx_EnableOverDrive+0x90>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007384:	2201      	movs	r2, #1
 8007386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007388:	f7fb fc3a 	bl	8002c00 <HAL_GetTick>
 800738c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800738e:	e009      	b.n	80073a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007390:	f7fb fc36 	bl	8002c00 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739e:	d901      	bls.n	80073a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e01f      	b.n	80073e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073a4:	4b13      	ldr	r3, [pc, #76]	; (80073f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b0:	d1ee      	bne.n	8007390 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80073b2:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073b8:	f7fb fc22 	bl	8002c00 <HAL_GetTick>
 80073bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073be:	e009      	b.n	80073d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073c0:	f7fb fc1e 	bl	8002c00 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ce:	d901      	bls.n	80073d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e007      	b.n	80073e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073e0:	d1ee      	bne.n	80073c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40023800 	.word	0x40023800
 80073f0:	420e0040 	.word	0x420e0040
 80073f4:	40007000 	.word	0x40007000
 80073f8:	420e0044 	.word	0x420e0044

080073fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e0cc      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007410:	4b68      	ldr	r3, [pc, #416]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d90c      	bls.n	8007438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800741e:	4b65      	ldr	r3, [pc, #404]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	b2d2      	uxtb	r2, r2
 8007424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007426:	4b63      	ldr	r3, [pc, #396]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	429a      	cmp	r2, r3
 8007432:	d001      	beq.n	8007438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0b8      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007450:	4b59      	ldr	r3, [pc, #356]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a58      	ldr	r2, [pc, #352]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800745a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007468:	4b53      	ldr	r3, [pc, #332]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a52      	ldr	r2, [pc, #328]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007474:	4b50      	ldr	r3, [pc, #320]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	494d      	ldr	r1, [pc, #308]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d044      	beq.n	800751c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d107      	bne.n	80074aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d119      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e07f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d003      	beq.n	80074ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d107      	bne.n	80074ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ba:	4b3f      	ldr	r3, [pc, #252]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e06f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ca:	4b3b      	ldr	r3, [pc, #236]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e067      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074da:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f023 0203 	bic.w	r2, r3, #3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	4934      	ldr	r1, [pc, #208]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074ec:	f7fb fb88 	bl	8002c00 <HAL_GetTick>
 80074f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f2:	e00a      	b.n	800750a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074f4:	f7fb fb84 	bl	8002c00 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e04f      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 020c 	and.w	r2, r3, #12
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	429a      	cmp	r2, r3
 800751a:	d1eb      	bne.n	80074f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800751c:	4b25      	ldr	r3, [pc, #148]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d20c      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752a:	4b22      	ldr	r3, [pc, #136]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007532:	4b20      	ldr	r3, [pc, #128]	; (80075b4 <HAL_RCC_ClockConfig+0x1b8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d001      	beq.n	8007544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e032      	b.n	80075aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	4916      	ldr	r1, [pc, #88]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800756e:	4b12      	ldr	r3, [pc, #72]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	490e      	ldr	r1, [pc, #56]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007582:	f000 f855 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 8007586:	4602      	mov	r2, r0
 8007588:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <HAL_RCC_ClockConfig+0x1bc>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	f003 030f 	and.w	r3, r3, #15
 8007592:	490a      	ldr	r1, [pc, #40]	; (80075bc <HAL_RCC_ClockConfig+0x1c0>)
 8007594:	5ccb      	ldrb	r3, [r1, r3]
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <HAL_RCC_ClockConfig+0x1c8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fb fae8 	bl	8002b78 <HAL_InitTick>

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40023c00 	.word	0x40023c00
 80075b8:	40023800 	.word	0x40023800
 80075bc:	0800b6fc 	.word	0x0800b6fc
 80075c0:	20000000 	.word	0x20000000
 80075c4:	20000004 	.word	0x20000004

080075c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <HAL_RCC_GetHCLKFreq+0x14>)
 80075ce:	681b      	ldr	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000000 	.word	0x20000000

080075e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075e4:	f7ff fff0 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 80075e8:	4602      	mov	r2, r0
 80075ea:	4b05      	ldr	r3, [pc, #20]	; (8007600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0a9b      	lsrs	r3, r3, #10
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	4903      	ldr	r1, [pc, #12]	; (8007604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075f6:	5ccb      	ldrb	r3, [r1, r3]
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	40023800 	.word	0x40023800
 8007604:	0800b70c 	.word	0x0800b70c

08007608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800760c:	f7ff ffdc 	bl	80075c8 <HAL_RCC_GetHCLKFreq>
 8007610:	4602      	mov	r2, r0
 8007612:	4b05      	ldr	r3, [pc, #20]	; (8007628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	0b5b      	lsrs	r3, r3, #13
 8007618:	f003 0307 	and.w	r3, r3, #7
 800761c:	4903      	ldr	r1, [pc, #12]	; (800762c <HAL_RCC_GetPCLK2Freq+0x24>)
 800761e:	5ccb      	ldrb	r3, [r1, r3]
 8007620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	bd80      	pop	{r7, pc}
 8007628:	40023800 	.word	0x40023800
 800762c:	0800b70c 	.word	0x0800b70c

08007630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b088      	sub	sp, #32
 8007636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800764c:	4bce      	ldr	r3, [pc, #824]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b0c      	cmp	r3, #12
 8007656:	f200 818d 	bhi.w	8007974 <HAL_RCC_GetSysClockFreq+0x344>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <HAL_RCC_GetSysClockFreq+0x30>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007695 	.word	0x08007695
 8007664:	08007975 	.word	0x08007975
 8007668:	08007975 	.word	0x08007975
 800766c:	08007975 	.word	0x08007975
 8007670:	0800769b 	.word	0x0800769b
 8007674:	08007975 	.word	0x08007975
 8007678:	08007975 	.word	0x08007975
 800767c:	08007975 	.word	0x08007975
 8007680:	080076a1 	.word	0x080076a1
 8007684:	08007975 	.word	0x08007975
 8007688:	08007975 	.word	0x08007975
 800768c:	08007975 	.word	0x08007975
 8007690:	08007815 	.word	0x08007815
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007694:	4bbd      	ldr	r3, [pc, #756]	; (800798c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007696:	61bb      	str	r3, [r7, #24]
       break;
 8007698:	e16f      	b.n	800797a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800769a:	4bbd      	ldr	r3, [pc, #756]	; (8007990 <HAL_RCC_GetSysClockFreq+0x360>)
 800769c:	61bb      	str	r3, [r7, #24]
      break;
 800769e:	e16c      	b.n	800797a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076a0:	4bb9      	ldr	r3, [pc, #740]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076aa:	4bb7      	ldr	r3, [pc, #732]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d053      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076b6:	4bb4      	ldr	r3, [pc, #720]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	099b      	lsrs	r3, r3, #6
 80076bc:	461a      	mov	r2, r3
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076c6:	f04f 0100 	mov.w	r1, #0
 80076ca:	ea02 0400 	and.w	r4, r2, r0
 80076ce:	603c      	str	r4, [r7, #0]
 80076d0:	400b      	ands	r3, r1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	f04f 0300 	mov.w	r3, #0
 80076e4:	014b      	lsls	r3, r1, #5
 80076e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076ea:	0142      	lsls	r2, r0, #5
 80076ec:	4610      	mov	r0, r2
 80076ee:	4619      	mov	r1, r3
 80076f0:	4623      	mov	r3, r4
 80076f2:	1ac0      	subs	r0, r0, r3
 80076f4:	462b      	mov	r3, r5
 80076f6:	eb61 0103 	sbc.w	r1, r1, r3
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	018b      	lsls	r3, r1, #6
 8007704:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007708:	0182      	lsls	r2, r0, #6
 800770a:	1a12      	subs	r2, r2, r0
 800770c:	eb63 0301 	sbc.w	r3, r3, r1
 8007710:	f04f 0000 	mov.w	r0, #0
 8007714:	f04f 0100 	mov.w	r1, #0
 8007718:	00d9      	lsls	r1, r3, #3
 800771a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800771e:	00d0      	lsls	r0, r2, #3
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4621      	mov	r1, r4
 8007726:	1852      	adds	r2, r2, r1
 8007728:	4629      	mov	r1, r5
 800772a:	eb43 0101 	adc.w	r1, r3, r1
 800772e:	460b      	mov	r3, r1
 8007730:	f04f 0000 	mov.w	r0, #0
 8007734:	f04f 0100 	mov.w	r1, #0
 8007738:	0259      	lsls	r1, r3, #9
 800773a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800773e:	0250      	lsls	r0, r2, #9
 8007740:	4602      	mov	r2, r0
 8007742:	460b      	mov	r3, r1
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	461a      	mov	r2, r3
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	f7f9 fa54 	bl	8000bfc <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4613      	mov	r3, r2
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	e04c      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800775e:	4b8a      	ldr	r3, [pc, #552]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	099b      	lsrs	r3, r3, #6
 8007764:	461a      	mov	r2, r3
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800776e:	f04f 0100 	mov.w	r1, #0
 8007772:	ea02 0a00 	and.w	sl, r2, r0
 8007776:	ea03 0b01 	and.w	fp, r3, r1
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	014b      	lsls	r3, r1, #5
 8007788:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800778c:	0142      	lsls	r2, r0, #5
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	ebb0 000a 	subs.w	r0, r0, sl
 8007796:	eb61 010b 	sbc.w	r1, r1, fp
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	018b      	lsls	r3, r1, #6
 80077a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077a8:	0182      	lsls	r2, r0, #6
 80077aa:	1a12      	subs	r2, r2, r0
 80077ac:	eb63 0301 	sbc.w	r3, r3, r1
 80077b0:	f04f 0000 	mov.w	r0, #0
 80077b4:	f04f 0100 	mov.w	r1, #0
 80077b8:	00d9      	lsls	r1, r3, #3
 80077ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077be:	00d0      	lsls	r0, r2, #3
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	eb12 020a 	adds.w	r2, r2, sl
 80077c8:	eb43 030b 	adc.w	r3, r3, fp
 80077cc:	f04f 0000 	mov.w	r0, #0
 80077d0:	f04f 0100 	mov.w	r1, #0
 80077d4:	0299      	lsls	r1, r3, #10
 80077d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80077da:	0290      	lsls	r0, r2, #10
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	f7f9 fa06 	bl	8000bfc <__aeabi_uldivmod>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4613      	mov	r3, r2
 80077f6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f8:	4b63      	ldr	r3, [pc, #396]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	3301      	adds	r3, #1
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	61bb      	str	r3, [r7, #24]
      break;
 8007812:	e0b2      	b.n	800797a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007814:	4b5c      	ldr	r3, [pc, #368]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800781e:	4b5a      	ldr	r3, [pc, #360]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04d      	beq.n	80078c6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800782a:	4b57      	ldr	r3, [pc, #348]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	099b      	lsrs	r3, r3, #6
 8007830:	461a      	mov	r2, r3
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800783a:	f04f 0100 	mov.w	r1, #0
 800783e:	ea02 0800 	and.w	r8, r2, r0
 8007842:	ea03 0901 	and.w	r9, r3, r1
 8007846:	4640      	mov	r0, r8
 8007848:	4649      	mov	r1, r9
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	014b      	lsls	r3, r1, #5
 8007854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007858:	0142      	lsls	r2, r0, #5
 800785a:	4610      	mov	r0, r2
 800785c:	4619      	mov	r1, r3
 800785e:	ebb0 0008 	subs.w	r0, r0, r8
 8007862:	eb61 0109 	sbc.w	r1, r1, r9
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	018b      	lsls	r3, r1, #6
 8007870:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007874:	0182      	lsls	r2, r0, #6
 8007876:	1a12      	subs	r2, r2, r0
 8007878:	eb63 0301 	sbc.w	r3, r3, r1
 800787c:	f04f 0000 	mov.w	r0, #0
 8007880:	f04f 0100 	mov.w	r1, #0
 8007884:	00d9      	lsls	r1, r3, #3
 8007886:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800788a:	00d0      	lsls	r0, r2, #3
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	eb12 0208 	adds.w	r2, r2, r8
 8007894:	eb43 0309 	adc.w	r3, r3, r9
 8007898:	f04f 0000 	mov.w	r0, #0
 800789c:	f04f 0100 	mov.w	r1, #0
 80078a0:	0259      	lsls	r1, r3, #9
 80078a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80078a6:	0250      	lsls	r0, r2, #9
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4610      	mov	r0, r2
 80078ae:	4619      	mov	r1, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f7f9 f9a0 	bl	8000bfc <__aeabi_uldivmod>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4613      	mov	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]
 80078c4:	e04a      	b.n	800795c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c6:	4b30      	ldr	r3, [pc, #192]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	099b      	lsrs	r3, r3, #6
 80078cc:	461a      	mov	r2, r3
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80078d6:	f04f 0100 	mov.w	r1, #0
 80078da:	ea02 0400 	and.w	r4, r2, r0
 80078de:	ea03 0501 	and.w	r5, r3, r1
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	014b      	lsls	r3, r1, #5
 80078f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80078f4:	0142      	lsls	r2, r0, #5
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	1b00      	subs	r0, r0, r4
 80078fc:	eb61 0105 	sbc.w	r1, r1, r5
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	018b      	lsls	r3, r1, #6
 800790a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800790e:	0182      	lsls	r2, r0, #6
 8007910:	1a12      	subs	r2, r2, r0
 8007912:	eb63 0301 	sbc.w	r3, r3, r1
 8007916:	f04f 0000 	mov.w	r0, #0
 800791a:	f04f 0100 	mov.w	r1, #0
 800791e:	00d9      	lsls	r1, r3, #3
 8007920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007924:	00d0      	lsls	r0, r2, #3
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	1912      	adds	r2, r2, r4
 800792c:	eb45 0303 	adc.w	r3, r5, r3
 8007930:	f04f 0000 	mov.w	r0, #0
 8007934:	f04f 0100 	mov.w	r1, #0
 8007938:	0299      	lsls	r1, r3, #10
 800793a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800793e:	0290      	lsls	r0, r2, #10
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4610      	mov	r0, r2
 8007946:	4619      	mov	r1, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	461a      	mov	r2, r3
 800794c:	f04f 0300 	mov.w	r3, #0
 8007950:	f7f9 f954 	bl	8000bfc <__aeabi_uldivmod>
 8007954:	4602      	mov	r2, r0
 8007956:	460b      	mov	r3, r1
 8007958:	4613      	mov	r3, r2
 800795a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <HAL_RCC_GetSysClockFreq+0x358>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	0f1b      	lsrs	r3, r3, #28
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	61bb      	str	r3, [r7, #24]
      break;
 8007972:	e002      	b.n	800797a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007976:	61bb      	str	r3, [r7, #24]
      break;
 8007978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800797a:	69bb      	ldr	r3, [r7, #24]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3720      	adds	r7, #32
 8007980:	46bd      	mov	sp, r7
 8007982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007986:	bf00      	nop
 8007988:	40023800 	.word	0x40023800
 800798c:	00f42400 	.word	0x00f42400
 8007990:	007a1200 	.word	0x007a1200

08007994 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e28d      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8083 	beq.w	8007aba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079b4:	4b94      	ldr	r3, [pc, #592]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d019      	beq.n	80079f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079c0:	4b91      	ldr	r3, [pc, #580]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d106      	bne.n	80079da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079cc:	4b8e      	ldr	r3, [pc, #568]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079d8:	d00c      	beq.n	80079f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079da:	4b8b      	ldr	r3, [pc, #556]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079e2:	2b0c      	cmp	r3, #12
 80079e4:	d112      	bne.n	8007a0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079e6:	4b88      	ldr	r3, [pc, #544]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079f2:	d10b      	bne.n	8007a0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f4:	4b84      	ldr	r3, [pc, #528]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d05b      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x124>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d157      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e25a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d106      	bne.n	8007a24 <HAL_RCC_OscConfig+0x90>
 8007a16:	4b7c      	ldr	r3, [pc, #496]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a7b      	ldr	r2, [pc, #492]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	e01d      	b.n	8007a60 <HAL_RCC_OscConfig+0xcc>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a2c:	d10c      	bne.n	8007a48 <HAL_RCC_OscConfig+0xb4>
 8007a2e:	4b76      	ldr	r3, [pc, #472]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a75      	ldr	r2, [pc, #468]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	4b73      	ldr	r3, [pc, #460]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a72      	ldr	r2, [pc, #456]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	e00b      	b.n	8007a60 <HAL_RCC_OscConfig+0xcc>
 8007a48:	4b6f      	ldr	r3, [pc, #444]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6e      	ldr	r2, [pc, #440]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	4b6c      	ldr	r3, [pc, #432]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a6b      	ldr	r2, [pc, #428]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d013      	beq.n	8007a90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fb f8ca 	bl	8002c00 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a70:	f7fb f8c6 	bl	8002c00 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b64      	cmp	r3, #100	; 0x64
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e21f      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a82:	4b61      	ldr	r3, [pc, #388]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d0f0      	beq.n	8007a70 <HAL_RCC_OscConfig+0xdc>
 8007a8e:	e014      	b.n	8007aba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a90:	f7fb f8b6 	bl	8002c00 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a98:	f7fb f8b2 	bl	8002c00 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b64      	cmp	r3, #100	; 0x64
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e20b      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aaa:	4b57      	ldr	r3, [pc, #348]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f0      	bne.n	8007a98 <HAL_RCC_OscConfig+0x104>
 8007ab6:	e000      	b.n	8007aba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d06f      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ac6:	4b50      	ldr	r3, [pc, #320]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d017      	beq.n	8007b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ad2:	4b4d      	ldr	r3, [pc, #308]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ada:	2b08      	cmp	r3, #8
 8007adc:	d105      	bne.n	8007aea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ade:	4b4a      	ldr	r3, [pc, #296]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aea:	4b47      	ldr	r3, [pc, #284]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007af2:	2b0c      	cmp	r3, #12
 8007af4:	d11c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af6:	4b44      	ldr	r3, [pc, #272]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d116      	bne.n	8007b30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b02:	4b41      	ldr	r3, [pc, #260]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_RCC_OscConfig+0x186>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d001      	beq.n	8007b1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e1d3      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b1a:	4b3b      	ldr	r3, [pc, #236]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	4937      	ldr	r1, [pc, #220]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b2e:	e03a      	b.n	8007ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d020      	beq.n	8007b7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b38:	4b34      	ldr	r3, [pc, #208]	; (8007c0c <HAL_RCC_OscConfig+0x278>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3e:	f7fb f85f 	bl	8002c00 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b46:	f7fb f85b 	bl	8002c00 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e1b4      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b58:	4b2b      	ldr	r3, [pc, #172]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b64:	4b28      	ldr	r3, [pc, #160]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4925      	ldr	r1, [pc, #148]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	600b      	str	r3, [r1, #0]
 8007b78:	e015      	b.n	8007ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b7a:	4b24      	ldr	r3, [pc, #144]	; (8007c0c <HAL_RCC_OscConfig+0x278>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fb f83e 	bl	8002c00 <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b88:	f7fb f83a 	bl	8002c00 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e193      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b9a:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0308 	and.w	r3, r3, #8
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d036      	beq.n	8007c20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d016      	beq.n	8007be8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bba:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <HAL_RCC_OscConfig+0x27c>)
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bc0:	f7fb f81e 	bl	8002c00 <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bc8:	f7fb f81a 	bl	8002c00 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e173      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bda:	4b0b      	ldr	r3, [pc, #44]	; (8007c08 <HAL_RCC_OscConfig+0x274>)
 8007bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x234>
 8007be6:	e01b      	b.n	8007c20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007be8:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <HAL_RCC_OscConfig+0x27c>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bee:	f7fb f807 	bl	8002c00 <HAL_GetTick>
 8007bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bf4:	e00e      	b.n	8007c14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bf6:	f7fb f803 	bl	8002c00 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d907      	bls.n	8007c14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e15c      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	42470000 	.word	0x42470000
 8007c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c14:	4b8a      	ldr	r3, [pc, #552]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1ea      	bne.n	8007bf6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8097 	beq.w	8007d5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c32:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10f      	bne.n	8007c5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	4b7f      	ldr	r3, [pc, #508]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c46:	4a7e      	ldr	r2, [pc, #504]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c4e:	4b7c      	ldr	r3, [pc, #496]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c56:	60bb      	str	r3, [r7, #8]
 8007c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5e:	4b79      	ldr	r3, [pc, #484]	; (8007e44 <HAL_RCC_OscConfig+0x4b0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d118      	bne.n	8007c9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c6a:	4b76      	ldr	r3, [pc, #472]	; (8007e44 <HAL_RCC_OscConfig+0x4b0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a75      	ldr	r2, [pc, #468]	; (8007e44 <HAL_RCC_OscConfig+0x4b0>)
 8007c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c76:	f7fa ffc3 	bl	8002c00 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c7e:	f7fa ffbf 	bl	8002c00 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e118      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c90:	4b6c      	ldr	r3, [pc, #432]	; (8007e44 <HAL_RCC_OscConfig+0x4b0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d106      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x31e>
 8007ca4:	4b66      	ldr	r3, [pc, #408]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca8:	4a65      	ldr	r2, [pc, #404]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007caa:	f043 0301 	orr.w	r3, r3, #1
 8007cae:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb0:	e01c      	b.n	8007cec <HAL_RCC_OscConfig+0x358>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b05      	cmp	r3, #5
 8007cb8:	d10c      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x340>
 8007cba:	4b61      	ldr	r3, [pc, #388]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	4a60      	ldr	r2, [pc, #384]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007cc0:	f043 0304 	orr.w	r3, r3, #4
 8007cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc6:	4b5e      	ldr	r3, [pc, #376]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	4a5d      	ldr	r2, [pc, #372]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd2:	e00b      	b.n	8007cec <HAL_RCC_OscConfig+0x358>
 8007cd4:	4b5a      	ldr	r3, [pc, #360]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd8:	4a59      	ldr	r2, [pc, #356]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007cda:	f023 0301 	bic.w	r3, r3, #1
 8007cde:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce0:	4b57      	ldr	r3, [pc, #348]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce4:	4a56      	ldr	r2, [pc, #344]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007ce6:	f023 0304 	bic.w	r3, r3, #4
 8007cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d015      	beq.n	8007d20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf4:	f7fa ff84 	bl	8002c00 <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cfa:	e00a      	b.n	8007d12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cfc:	f7fa ff80 	bl	8002c00 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e0d7      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d12:	4b4b      	ldr	r3, [pc, #300]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	f003 0302 	and.w	r3, r3, #2
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0ee      	beq.n	8007cfc <HAL_RCC_OscConfig+0x368>
 8007d1e:	e014      	b.n	8007d4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d20:	f7fa ff6e 	bl	8002c00 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d26:	e00a      	b.n	8007d3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d28:	f7fa ff6a 	bl	8002c00 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e0c1      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d3e:	4b40      	ldr	r3, [pc, #256]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1ee      	bne.n	8007d28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d105      	bne.n	8007d5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d50:	4b3b      	ldr	r3, [pc, #236]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d54:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f000 80ad 	beq.w	8007ec0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d66:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 030c 	and.w	r3, r3, #12
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d060      	beq.n	8007e34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d145      	bne.n	8007e06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d7a:	4b33      	ldr	r3, [pc, #204]	; (8007e48 <HAL_RCC_OscConfig+0x4b4>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fa ff3e 	bl	8002c00 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d88:	f7fa ff3a 	bl	8002c00 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e093      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d9a:	4b29      	ldr	r3, [pc, #164]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1f0      	bne.n	8007d88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69da      	ldr	r2, [r3, #28]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	019b      	lsls	r3, r3, #6
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	085b      	lsrs	r3, r3, #1
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	041b      	lsls	r3, r3, #16
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	061b      	lsls	r3, r3, #24
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	071b      	lsls	r3, r3, #28
 8007dd2:	491b      	ldr	r1, [pc, #108]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <HAL_RCC_OscConfig+0x4b4>)
 8007dda:	2201      	movs	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dde:	f7fa ff0f 	bl	8002c00 <HAL_GetTick>
 8007de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de4:	e008      	b.n	8007df8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007de6:	f7fa ff0b 	bl	8002c00 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e064      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d0f0      	beq.n	8007de6 <HAL_RCC_OscConfig+0x452>
 8007e04:	e05c      	b.n	8007ec0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <HAL_RCC_OscConfig+0x4b4>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fa fef8 	bl	8002c00 <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e14:	f7fa fef4 	bl	8002c00 <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e04d      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e26:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <HAL_RCC_OscConfig+0x4ac>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x480>
 8007e32:	e045      	b.n	8007ec0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d107      	bne.n	8007e4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e040      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40007000 	.word	0x40007000
 8007e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e4c:	4b1f      	ldr	r3, [pc, #124]	; (8007ecc <HAL_RCC_OscConfig+0x538>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d030      	beq.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d129      	bne.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d122      	bne.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d119      	bne.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	3b01      	subs	r3, #1
 8007e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d10f      	bne.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d107      	bne.n	8007ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3718      	adds	r7, #24
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40023800 	.word	0x40023800

08007ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e041      	b.n	8007f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fa f9e0 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f000 febc 	bl	8008c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d001      	beq.n	8007f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e04e      	b.n	8008026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a23      	ldr	r2, [pc, #140]	; (8008034 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d022      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb2:	d01d      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <HAL_TIM_Base_Start_IT+0xc8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d018      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a1e      	ldr	r2, [pc, #120]	; (800803c <HAL_TIM_Base_Start_IT+0xcc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d013      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d009      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a19      	ldr	r2, [pc, #100]	; (8008048 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <HAL_TIM_Base_Start_IT+0x80>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a18      	ldr	r2, [pc, #96]	; (800804c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d111      	bne.n	8008014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2b06      	cmp	r3, #6
 8008000:	d010      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008012:	e007      	b.n	8008024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010000 	.word	0x40010000
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40000c00 	.word	0x40000c00
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40001800 	.word	0x40001800

08008050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e041      	b.n	80080e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d106      	bne.n	800807c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f839 	bl	80080ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3304      	adds	r3, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4610      	mov	r0, r2
 8008090:	f000 fdfc 	bl	8008c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d109      	bne.n	8008128 <HAL_TIM_PWM_Start+0x24>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b01      	cmp	r3, #1
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	e022      	b.n	800816e <HAL_TIM_PWM_Start+0x6a>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b04      	cmp	r3, #4
 800812c:	d109      	bne.n	8008142 <HAL_TIM_PWM_Start+0x3e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	bf14      	ite	ne
 800813a:	2301      	movne	r3, #1
 800813c:	2300      	moveq	r3, #0
 800813e:	b2db      	uxtb	r3, r3
 8008140:	e015      	b.n	800816e <HAL_TIM_PWM_Start+0x6a>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b08      	cmp	r3, #8
 8008146:	d109      	bne.n	800815c <HAL_TIM_PWM_Start+0x58>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b01      	cmp	r3, #1
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e008      	b.n	800816e <HAL_TIM_PWM_Start+0x6a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	bf14      	ite	ne
 8008168:	2301      	movne	r3, #1
 800816a:	2300      	moveq	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e07c      	b.n	8008270 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <HAL_TIM_PWM_Start+0x82>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008184:	e013      	b.n	80081ae <HAL_TIM_PWM_Start+0xaa>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b04      	cmp	r3, #4
 800818a:	d104      	bne.n	8008196 <HAL_TIM_PWM_Start+0x92>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008194:	e00b      	b.n	80081ae <HAL_TIM_PWM_Start+0xaa>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b08      	cmp	r3, #8
 800819a:	d104      	bne.n	80081a6 <HAL_TIM_PWM_Start+0xa2>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a4:	e003      	b.n	80081ae <HAL_TIM_PWM_Start+0xaa>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 f97c 	bl	80094b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	; (8008278 <HAL_TIM_PWM_Start+0x174>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d004      	beq.n	80081d0 <HAL_TIM_PWM_Start+0xcc>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2c      	ldr	r2, [pc, #176]	; (800827c <HAL_TIM_PWM_Start+0x178>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d101      	bne.n	80081d4 <HAL_TIM_PWM_Start+0xd0>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_TIM_PWM_Start+0xd2>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a22      	ldr	r2, [pc, #136]	; (8008278 <HAL_TIM_PWM_Start+0x174>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d022      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fc:	d01d      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <HAL_TIM_PWM_Start+0x17c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d018      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <HAL_TIM_PWM_Start+0x180>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d013      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <HAL_TIM_PWM_Start+0x184>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00e      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a16      	ldr	r2, [pc, #88]	; (800827c <HAL_TIM_PWM_Start+0x178>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d009      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a18      	ldr	r2, [pc, #96]	; (800828c <HAL_TIM_PWM_Start+0x188>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d004      	beq.n	800823a <HAL_TIM_PWM_Start+0x136>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a16      	ldr	r2, [pc, #88]	; (8008290 <HAL_TIM_PWM_Start+0x18c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d111      	bne.n	800825e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b06      	cmp	r3, #6
 800824a:	d010      	beq.n	800826e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825c:	e007      	b.n	800826e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0201 	orr.w	r2, r2, #1
 800826c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40010000 	.word	0x40010000
 800827c:	40010400 	.word	0x40010400
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40014000 	.word	0x40014000
 8008290:	40001800 	.word	0x40001800

08008294 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e041      	b.n	800832a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d106      	bne.n	80082c0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7fa f85a 	bl	8002374 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2202      	movs	r2, #2
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f000 fcda 	bl	8008c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_TIM_IC_Start_IT+0x1a>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800834a:	b2db      	uxtb	r3, r3
 800834c:	e013      	b.n	8008376 <HAL_TIM_IC_Start_IT+0x42>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b04      	cmp	r3, #4
 8008352:	d104      	bne.n	800835e <HAL_TIM_IC_Start_IT+0x2a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800835a:	b2db      	uxtb	r3, r3
 800835c:	e00b      	b.n	8008376 <HAL_TIM_IC_Start_IT+0x42>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b08      	cmp	r3, #8
 8008362:	d104      	bne.n	800836e <HAL_TIM_IC_Start_IT+0x3a>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800836a:	b2db      	uxtb	r3, r3
 800836c:	e003      	b.n	8008376 <HAL_TIM_IC_Start_IT+0x42>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008374:	b2db      	uxtb	r3, r3
 8008376:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d104      	bne.n	8008388 <HAL_TIM_IC_Start_IT+0x54>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008384:	b2db      	uxtb	r3, r3
 8008386:	e013      	b.n	80083b0 <HAL_TIM_IC_Start_IT+0x7c>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b04      	cmp	r3, #4
 800838c:	d104      	bne.n	8008398 <HAL_TIM_IC_Start_IT+0x64>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008394:	b2db      	uxtb	r3, r3
 8008396:	e00b      	b.n	80083b0 <HAL_TIM_IC_Start_IT+0x7c>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b08      	cmp	r3, #8
 800839c:	d104      	bne.n	80083a8 <HAL_TIM_IC_Start_IT+0x74>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	e003      	b.n	80083b0 <HAL_TIM_IC_Start_IT+0x7c>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d001      	beq.n	80083c2 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e0c7      	b.n	8008552 <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <HAL_TIM_IC_Start_IT+0x9e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d0:	e013      	b.n	80083fa <HAL_TIM_IC_Start_IT+0xc6>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d104      	bne.n	80083e2 <HAL_TIM_IC_Start_IT+0xae>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083e0:	e00b      	b.n	80083fa <HAL_TIM_IC_Start_IT+0xc6>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b08      	cmp	r3, #8
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_IC_Start_IT+0xbe>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083f0:	e003      	b.n	80083fa <HAL_TIM_IC_Start_IT+0xc6>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2202      	movs	r2, #2
 80083f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_TIM_IC_Start_IT+0xd6>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008408:	e013      	b.n	8008432 <HAL_TIM_IC_Start_IT+0xfe>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b04      	cmp	r3, #4
 800840e:	d104      	bne.n	800841a <HAL_TIM_IC_Start_IT+0xe6>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008418:	e00b      	b.n	8008432 <HAL_TIM_IC_Start_IT+0xfe>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d104      	bne.n	800842a <HAL_TIM_IC_Start_IT+0xf6>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008428:	e003      	b.n	8008432 <HAL_TIM_IC_Start_IT+0xfe>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b0c      	cmp	r3, #12
 8008436:	d841      	bhi.n	80084bc <HAL_TIM_IC_Start_IT+0x188>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <HAL_TIM_IC_Start_IT+0x10c>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008475 	.word	0x08008475
 8008444:	080084bd 	.word	0x080084bd
 8008448:	080084bd 	.word	0x080084bd
 800844c:	080084bd 	.word	0x080084bd
 8008450:	08008487 	.word	0x08008487
 8008454:	080084bd 	.word	0x080084bd
 8008458:	080084bd 	.word	0x080084bd
 800845c:	080084bd 	.word	0x080084bd
 8008460:	08008499 	.word	0x08008499
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084bd 	.word	0x080084bd
 800846c:	080084bd 	.word	0x080084bd
 8008470:	080084ab 	.word	0x080084ab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0202 	orr.w	r2, r2, #2
 8008482:	60da      	str	r2, [r3, #12]
      break;
 8008484:	e01b      	b.n	80084be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f042 0204 	orr.w	r2, r2, #4
 8008494:	60da      	str	r2, [r3, #12]
      break;
 8008496:	e012      	b.n	80084be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68da      	ldr	r2, [r3, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0208 	orr.w	r2, r2, #8
 80084a6:	60da      	str	r2, [r3, #12]
      break;
 80084a8:	e009      	b.n	80084be <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68da      	ldr	r2, [r3, #12]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0210 	orr.w	r2, r2, #16
 80084b8:	60da      	str	r2, [r3, #12]
      break;
 80084ba:	e000      	b.n	80084be <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80084bc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fff4 	bl	80094b4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a22      	ldr	r2, [pc, #136]	; (800855c <HAL_TIM_IC_Start_IT+0x228>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d022      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084de:	d01d      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a1e      	ldr	r2, [pc, #120]	; (8008560 <HAL_TIM_IC_Start_IT+0x22c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d018      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <HAL_TIM_IC_Start_IT+0x230>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d013      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <HAL_TIM_IC_Start_IT+0x234>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00e      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a1a      	ldr	r2, [pc, #104]	; (800856c <HAL_TIM_IC_Start_IT+0x238>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d009      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a18      	ldr	r2, [pc, #96]	; (8008570 <HAL_TIM_IC_Start_IT+0x23c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d004      	beq.n	800851c <HAL_TIM_IC_Start_IT+0x1e8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a17      	ldr	r2, [pc, #92]	; (8008574 <HAL_TIM_IC_Start_IT+0x240>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d111      	bne.n	8008540 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b06      	cmp	r3, #6
 800852c:	d010      	beq.n	8008550 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0201 	orr.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853e:	e007      	b.n	8008550 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40010000 	.word	0x40010000
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800
 8008568:	40000c00 	.word	0x40000c00
 800856c:	40010400 	.word	0x40010400
 8008570:	40014000 	.word	0x40014000
 8008574:	40001800 	.word	0x40001800

08008578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d122      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b02      	cmp	r3, #2
 800859a:	d11b      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0202 	mvn.w	r2, #2
 80085a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f8 fea0 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fb44 	bl	8008c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fb4b 	bl	8008c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d122      	bne.n	8008628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d11b      	bne.n	8008628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0204 	mvn.w	r2, #4
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2202      	movs	r2, #2
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7f8 fe76 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fb1a 	bl	8008c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fb21 	bl	8008c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0308 	and.w	r3, r3, #8
 8008632:	2b08      	cmp	r3, #8
 8008634:	d122      	bne.n	800867c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b08      	cmp	r3, #8
 8008642:	d11b      	bne.n	800867c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0208 	mvn.w	r2, #8
 800864c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2204      	movs	r2, #4
 8008652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7f8 fe4c 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 faf0 	bl	8008c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 faf7 	bl	8008c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b10      	cmp	r3, #16
 8008688:	d122      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b10      	cmp	r3, #16
 8008696:	d11b      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0210 	mvn.w	r2, #16
 80086a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2208      	movs	r2, #8
 80086a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7f8 fe22 	bl	8001300 <HAL_TIM_IC_CaptureCallback>
 80086bc:	e005      	b.n	80086ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fac6 	bl	8008c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 facd 	bl	8008c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10e      	bne.n	80086fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d107      	bne.n	80086fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0201 	mvn.w	r2, #1
 80086f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 faa0 	bl	8008c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008706:	2b80      	cmp	r3, #128	; 0x80
 8008708:	d10e      	bne.n	8008728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008714:	2b80      	cmp	r3, #128	; 0x80
 8008716:	d107      	bne.n	8008728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 ffc4 	bl	80096b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b40      	cmp	r3, #64	; 0x40
 8008734:	d10e      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b40      	cmp	r3, #64	; 0x40
 8008742:	d107      	bne.n	8008754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800874c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa92 	bl	8008c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b20      	cmp	r3, #32
 8008760:	d10e      	bne.n	8008780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b20      	cmp	r3, #32
 800876e:	d107      	bne.n	8008780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f06f 0220 	mvn.w	r2, #32
 8008778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 ff8e 	bl	800969c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008780:	bf00      	nop
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_TIM_IC_ConfigChannel+0x1a>
 800879e:	2302      	movs	r3, #2
 80087a0:	e082      	b.n	80088a8 <HAL_TIM_IC_ConfigChannel+0x120>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6818      	ldr	r0, [r3, #0]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6819      	ldr	r1, [r3, #0]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f000 fcb4 	bl	800912c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 020c 	bic.w	r2, r2, #12
 80087d2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6999      	ldr	r1, [r3, #24]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	689a      	ldr	r2, [r3, #8]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	430a      	orrs	r2, r1
 80087e4:	619a      	str	r2, [r3, #24]
 80087e6:	e05a      	b.n	800889e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	d11c      	bne.n	8008828 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	f000 fd38 	bl	8009272 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008810:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6999      	ldr	r1, [r3, #24]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	021a      	lsls	r2, r3, #8
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	619a      	str	r2, [r3, #24]
 8008826:	e03a      	b.n	800889e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b08      	cmp	r3, #8
 800882c:	d11b      	bne.n	8008866 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f000 fd85 	bl	800934c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 020c 	bic.w	r2, r2, #12
 8008850:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69d9      	ldr	r1, [r3, #28]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	61da      	str	r2, [r3, #28]
 8008864:	e01b      	b.n	800889e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6819      	ldr	r1, [r3, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f000 fda5 	bl	80093c4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008888:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69d9      	ldr	r1, [r3, #28]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	021a      	lsls	r2, r3, #8
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	430a      	orrs	r2, r1
 800889c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80088c6:	2302      	movs	r3, #2
 80088c8:	e0ac      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x174>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b0c      	cmp	r3, #12
 80088d6:	f200 809f 	bhi.w	8008a18 <HAL_TIM_PWM_ConfigChannel+0x168>
 80088da:	a201      	add	r2, pc, #4	; (adr r2, 80088e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e0:	08008915 	.word	0x08008915
 80088e4:	08008a19 	.word	0x08008a19
 80088e8:	08008a19 	.word	0x08008a19
 80088ec:	08008a19 	.word	0x08008a19
 80088f0:	08008955 	.word	0x08008955
 80088f4:	08008a19 	.word	0x08008a19
 80088f8:	08008a19 	.word	0x08008a19
 80088fc:	08008a19 	.word	0x08008a19
 8008900:	08008997 	.word	0x08008997
 8008904:	08008a19 	.word	0x08008a19
 8008908:	08008a19 	.word	0x08008a19
 800890c:	08008a19 	.word	0x08008a19
 8008910:	080089d7 	.word	0x080089d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fa56 	bl	8008dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699a      	ldr	r2, [r3, #24]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0208 	orr.w	r2, r2, #8
 800892e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0204 	bic.w	r2, r2, #4
 800893e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6999      	ldr	r1, [r3, #24]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	619a      	str	r2, [r3, #24]
      break;
 8008952:	e062      	b.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 faa6 	bl	8008eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800896e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6999      	ldr	r1, [r3, #24]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	021a      	lsls	r2, r3, #8
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	619a      	str	r2, [r3, #24]
      break;
 8008994:	e041      	b.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fafb 	bl	8008f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0208 	orr.w	r2, r2, #8
 80089b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69da      	ldr	r2, [r3, #28]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0204 	bic.w	r2, r2, #4
 80089c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69d9      	ldr	r1, [r3, #28]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	61da      	str	r2, [r3, #28]
      break;
 80089d4:	e021      	b.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fb4f 	bl	8009080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69da      	ldr	r2, [r3, #28]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69d9      	ldr	r1, [r3, #28]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	021a      	lsls	r2, r3, #8
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	61da      	str	r2, [r3, #28]
      break;
 8008a16:	e000      	b.n	8008a1a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008a18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIM_ConfigClockSource+0x18>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e0b3      	b.n	8008bac <HAL_TIM_ConfigClockSource+0x180>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2202      	movs	r2, #2
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	d03e      	beq.n	8008afc <HAL_TIM_ConfigClockSource+0xd0>
 8008a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a82:	f200 8087 	bhi.w	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8a:	f000 8085 	beq.w	8008b98 <HAL_TIM_ConfigClockSource+0x16c>
 8008a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a92:	d87f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008a94:	2b70      	cmp	r3, #112	; 0x70
 8008a96:	d01a      	beq.n	8008ace <HAL_TIM_ConfigClockSource+0xa2>
 8008a98:	2b70      	cmp	r3, #112	; 0x70
 8008a9a:	d87b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008a9c:	2b60      	cmp	r3, #96	; 0x60
 8008a9e:	d050      	beq.n	8008b42 <HAL_TIM_ConfigClockSource+0x116>
 8008aa0:	2b60      	cmp	r3, #96	; 0x60
 8008aa2:	d877      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008aa4:	2b50      	cmp	r3, #80	; 0x50
 8008aa6:	d03c      	beq.n	8008b22 <HAL_TIM_ConfigClockSource+0xf6>
 8008aa8:	2b50      	cmp	r3, #80	; 0x50
 8008aaa:	d873      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d058      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x136>
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d86f      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d064      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x156>
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d86b      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d060      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x156>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d867      	bhi.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d05c      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x156>
 8008ac8:	2b10      	cmp	r3, #16
 8008aca:	d05a      	beq.n	8008b82 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008acc:	e062      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	6899      	ldr	r1, [r3, #8]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f000 fcc9 	bl	8009474 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008af0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	609a      	str	r2, [r3, #8]
      break;
 8008afa:	e04e      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	6899      	ldr	r1, [r3, #8]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f000 fcb2 	bl	8009474 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689a      	ldr	r2, [r3, #8]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1e:	609a      	str	r2, [r3, #8]
      break;
 8008b20:	e03b      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6818      	ldr	r0, [r3, #0]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	6859      	ldr	r1, [r3, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f000 fb70 	bl	8009214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2150      	movs	r1, #80	; 0x50
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fc7f 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8008b40:	e02b      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6859      	ldr	r1, [r3, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f000 fbcc 	bl	80092ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2160      	movs	r1, #96	; 0x60
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fc6f 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8008b60:	e01b      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	f000 fb50 	bl	8009214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2140      	movs	r1, #64	; 0x40
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fc5f 	bl	800943e <TIM_ITRx_SetConfig>
      break;
 8008b80:	e00b      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	f000 fc56 	bl	800943e <TIM_ITRx_SetConfig>
        break;
 8008b92:	e002      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b94:	bf00      	nop
 8008b96:	e000      	b.n	8008b9a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008b98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d831      	bhi.n	8008c2c <HAL_TIM_ReadCapturedValue+0x78>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008c05 	.word	0x08008c05
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c2d 	.word	0x08008c2d
 8008bdc:	08008c2d 	.word	0x08008c2d
 8008be0:	08008c0f 	.word	0x08008c0f
 8008be4:	08008c2d 	.word	0x08008c2d
 8008be8:	08008c2d 	.word	0x08008c2d
 8008bec:	08008c2d 	.word	0x08008c2d
 8008bf0:	08008c19 	.word	0x08008c19
 8008bf4:	08008c2d 	.word	0x08008c2d
 8008bf8:	08008c2d 	.word	0x08008c2d
 8008bfc:	08008c2d 	.word	0x08008c2d
 8008c00:	08008c23 	.word	0x08008c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0a:	60fb      	str	r3, [r7, #12]

      break;
 8008c0c:	e00f      	b.n	8008c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	60fb      	str	r3, [r7, #12]

      break;
 8008c16:	e00a      	b.n	8008c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1e:	60fb      	str	r3, [r7, #12]

      break;
 8008c20:	e005      	b.n	8008c2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c28:	60fb      	str	r3, [r7, #12]

      break;
 8008c2a:	e000      	b.n	8008c2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008c2c:	bf00      	nop
  }

  return tmpreg;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a40      	ldr	r2, [pc, #256]	; (8008da0 <TIM_Base_SetConfig+0x114>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d013      	beq.n	8008ccc <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008caa:	d00f      	beq.n	8008ccc <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a3d      	ldr	r2, [pc, #244]	; (8008da4 <TIM_Base_SetConfig+0x118>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00b      	beq.n	8008ccc <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a3c      	ldr	r2, [pc, #240]	; (8008da8 <TIM_Base_SetConfig+0x11c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d007      	beq.n	8008ccc <TIM_Base_SetConfig+0x40>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a3b      	ldr	r2, [pc, #236]	; (8008dac <TIM_Base_SetConfig+0x120>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d003      	beq.n	8008ccc <TIM_Base_SetConfig+0x40>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a3a      	ldr	r2, [pc, #232]	; (8008db0 <TIM_Base_SetConfig+0x124>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d108      	bne.n	8008cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a2f      	ldr	r2, [pc, #188]	; (8008da0 <TIM_Base_SetConfig+0x114>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d02b      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d027      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a2c      	ldr	r2, [pc, #176]	; (8008da4 <TIM_Base_SetConfig+0x118>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d023      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a2b      	ldr	r2, [pc, #172]	; (8008da8 <TIM_Base_SetConfig+0x11c>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01f      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2a      	ldr	r2, [pc, #168]	; (8008dac <TIM_Base_SetConfig+0x120>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d01b      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a29      	ldr	r2, [pc, #164]	; (8008db0 <TIM_Base_SetConfig+0x124>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d017      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a28      	ldr	r2, [pc, #160]	; (8008db4 <TIM_Base_SetConfig+0x128>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d013      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a27      	ldr	r2, [pc, #156]	; (8008db8 <TIM_Base_SetConfig+0x12c>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00f      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a26      	ldr	r2, [pc, #152]	; (8008dbc <TIM_Base_SetConfig+0x130>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00b      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a25      	ldr	r2, [pc, #148]	; (8008dc0 <TIM_Base_SetConfig+0x134>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d007      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a24      	ldr	r2, [pc, #144]	; (8008dc4 <TIM_Base_SetConfig+0x138>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d003      	beq.n	8008d3e <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a23      	ldr	r2, [pc, #140]	; (8008dc8 <TIM_Base_SetConfig+0x13c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d108      	bne.n	8008d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	689a      	ldr	r2, [r3, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a0a      	ldr	r2, [pc, #40]	; (8008da0 <TIM_Base_SetConfig+0x114>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_Base_SetConfig+0xf8>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a0c      	ldr	r2, [pc, #48]	; (8008db0 <TIM_Base_SetConfig+0x124>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d103      	bne.n	8008d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	691a      	ldr	r2, [r3, #16]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	615a      	str	r2, [r3, #20]
}
 8008d92:	bf00      	nop
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	40010000 	.word	0x40010000
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40000800 	.word	0x40000800
 8008dac:	40000c00 	.word	0x40000c00
 8008db0:	40010400 	.word	0x40010400
 8008db4:	40014000 	.word	0x40014000
 8008db8:	40014400 	.word	0x40014400
 8008dbc:	40014800 	.word	0x40014800
 8008dc0:	40001800 	.word	0x40001800
 8008dc4:	40001c00 	.word	0x40001c00
 8008dc8:	40002000 	.word	0x40002000

08008dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	f023 0201 	bic.w	r2, r3, #1
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f023 0303 	bic.w	r3, r3, #3
 8008e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f023 0302 	bic.w	r3, r3, #2
 8008e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a20      	ldr	r2, [pc, #128]	; (8008ea4 <TIM_OC1_SetConfig+0xd8>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d003      	beq.n	8008e30 <TIM_OC1_SetConfig+0x64>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <TIM_OC1_SetConfig+0xdc>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d10c      	bne.n	8008e4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	f023 0308 	bic.w	r3, r3, #8
 8008e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f023 0304 	bic.w	r3, r3, #4
 8008e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <TIM_OC1_SetConfig+0xd8>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d003      	beq.n	8008e5a <TIM_OC1_SetConfig+0x8e>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a14      	ldr	r2, [pc, #80]	; (8008ea8 <TIM_OC1_SetConfig+0xdc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d111      	bne.n	8008e7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	621a      	str	r2, [r3, #32]
}
 8008e98:	bf00      	nop
 8008e9a:	371c      	adds	r7, #28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40010400 	.word	0x40010400

08008eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f023 0210 	bic.w	r2, r3, #16
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f023 0320 	bic.w	r3, r3, #32
 8008ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	011b      	lsls	r3, r3, #4
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a22      	ldr	r2, [pc, #136]	; (8008f90 <TIM_OC2_SetConfig+0xe4>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d003      	beq.n	8008f14 <TIM_OC2_SetConfig+0x68>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a21      	ldr	r2, [pc, #132]	; (8008f94 <TIM_OC2_SetConfig+0xe8>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d10d      	bne.n	8008f30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a17      	ldr	r2, [pc, #92]	; (8008f90 <TIM_OC2_SetConfig+0xe4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_OC2_SetConfig+0x94>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a16      	ldr	r2, [pc, #88]	; (8008f94 <TIM_OC2_SetConfig+0xe8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d113      	bne.n	8008f68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	621a      	str	r2, [r3, #32]
}
 8008f82:	bf00      	nop
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40010400 	.word	0x40010400

08008f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	021b      	lsls	r3, r3, #8
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a21      	ldr	r2, [pc, #132]	; (8009078 <TIM_OC3_SetConfig+0xe0>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d003      	beq.n	8008ffe <TIM_OC3_SetConfig+0x66>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4a20      	ldr	r2, [pc, #128]	; (800907c <TIM_OC3_SetConfig+0xe4>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d10d      	bne.n	800901a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a16      	ldr	r2, [pc, #88]	; (8009078 <TIM_OC3_SetConfig+0xe0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d003      	beq.n	800902a <TIM_OC3_SetConfig+0x92>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a15      	ldr	r2, [pc, #84]	; (800907c <TIM_OC3_SetConfig+0xe4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d113      	bne.n	8009052 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	011b      	lsls	r3, r3, #4
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	621a      	str	r2, [r3, #32]
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	40010000 	.word	0x40010000
 800907c:	40010400 	.word	0x40010400

08009080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	031b      	lsls	r3, r3, #12
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a12      	ldr	r2, [pc, #72]	; (8009124 <TIM_OC4_SetConfig+0xa4>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d003      	beq.n	80090e8 <TIM_OC4_SetConfig+0x68>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a11      	ldr	r2, [pc, #68]	; (8009128 <TIM_OC4_SetConfig+0xa8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d109      	bne.n	80090fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	019b      	lsls	r3, r3, #6
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	621a      	str	r2, [r3, #32]
}
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40010000 	.word	0x40010000
 8009128:	40010400 	.word	0x40010400

0800912c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f023 0201 	bic.w	r2, r3, #1
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	699b      	ldr	r3, [r3, #24]
 800914a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6a1b      	ldr	r3, [r3, #32]
 8009150:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a28      	ldr	r2, [pc, #160]	; (80091f8 <TIM_TI1_SetConfig+0xcc>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01b      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009160:	d017      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4a25      	ldr	r2, [pc, #148]	; (80091fc <TIM_TI1_SetConfig+0xd0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a24      	ldr	r2, [pc, #144]	; (8009200 <TIM_TI1_SetConfig+0xd4>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00f      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4a23      	ldr	r2, [pc, #140]	; (8009204 <TIM_TI1_SetConfig+0xd8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00b      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4a22      	ldr	r2, [pc, #136]	; (8009208 <TIM_TI1_SetConfig+0xdc>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	4a21      	ldr	r2, [pc, #132]	; (800920c <TIM_TI1_SetConfig+0xe0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_TI1_SetConfig+0x66>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4a20      	ldr	r2, [pc, #128]	; (8009210 <TIM_TI1_SetConfig+0xe4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d101      	bne.n	8009196 <TIM_TI1_SetConfig+0x6a>
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <TIM_TI1_SetConfig+0x6c>
 8009196:	2300      	movs	r3, #0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d008      	beq.n	80091ae <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
 80091ac:	e003      	b.n	80091b6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f023 030a 	bic.w	r3, r3, #10
 80091d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	f003 030a 	and.w	r3, r3, #10
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	697a      	ldr	r2, [r7, #20]
 80091e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	621a      	str	r2, [r3, #32]
}
 80091ea:	bf00      	nop
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
 80091f6:	bf00      	nop
 80091f8:	40010000 	.word	0x40010000
 80091fc:	40000400 	.word	0x40000400
 8009200:	40000800 	.word	0x40000800
 8009204:	40000c00 	.word	0x40000c00
 8009208:	40010400 	.word	0x40010400
 800920c:	40014000 	.word	0x40014000
 8009210:	40001800 	.word	0x40001800

08009214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a1b      	ldr	r3, [r3, #32]
 800922a:	f023 0201 	bic.w	r2, r3, #1
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	699b      	ldr	r3, [r3, #24]
 8009236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800923e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f023 030a 	bic.w	r3, r3, #10
 8009250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	621a      	str	r2, [r3, #32]
}
 8009266:	bf00      	nop
 8009268:	371c      	adds	r7, #28
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009272:	b480      	push	{r7}
 8009274:	b087      	sub	sp, #28
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
 800927e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	f023 0210 	bic.w	r2, r3, #16
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800929e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	031b      	lsls	r3, r3, #12
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	621a      	str	r2, [r3, #32]
}
 80092e0:	bf00      	nop
 80092e2:	371c      	adds	r7, #28
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6a1b      	ldr	r3, [r3, #32]
 80092fc:	f023 0210 	bic.w	r2, r3, #16
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009316:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	031b      	lsls	r3, r3, #12
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009328:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	693a      	ldr	r2, [r7, #16]
 800933e:	621a      	str	r2, [r3, #32]
}
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f023 0303 	bic.w	r3, r3, #3
 8009378:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009388:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	b2db      	uxtb	r3, r3
 8009390:	697a      	ldr	r2, [r7, #20]
 8009392:	4313      	orrs	r3, r2
 8009394:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800939c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	697a      	ldr	r2, [r7, #20]
 80093b0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b087      	sub	sp, #28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a1b      	ldr	r3, [r3, #32]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009402:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	031b      	lsls	r3, r3, #12
 8009408:	b29b      	uxth	r3, r3
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009416:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	031b      	lsls	r3, r3, #12
 800941c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	621a      	str	r2, [r3, #32]
}
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800943e:	b480      	push	{r7}
 8009440:	b085      	sub	sp, #20
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4313      	orrs	r3, r2
 800945c:	f043 0307 	orr.w	r3, r3, #7
 8009460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	609a      	str	r2, [r3, #8]
}
 8009468:	bf00      	nop
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800948e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	021a      	lsls	r2, r3, #8
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	431a      	orrs	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4313      	orrs	r3, r2
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	609a      	str	r2, [r3, #8]
}
 80094a8:	bf00      	nop
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b087      	sub	sp, #28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f003 031f 	and.w	r3, r3, #31
 80094c6:	2201      	movs	r2, #1
 80094c8:	fa02 f303 	lsl.w	r3, r2, r3
 80094cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a1a      	ldr	r2, [r3, #32]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	43db      	mvns	r3, r3
 80094d6:	401a      	ands	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a1a      	ldr	r2, [r3, #32]
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f003 031f 	and.w	r3, r3, #31
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ec:	431a      	orrs	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	621a      	str	r2, [r3, #32]
}
 80094f2:	bf00      	nop
 80094f4:	371c      	adds	r7, #28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
	...

08009500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d101      	bne.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009514:	2302      	movs	r3, #2
 8009516:	e05a      	b.n	80095ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2202      	movs	r2, #2
 8009524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800953e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a21      	ldr	r2, [pc, #132]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d022      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009564:	d01d      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1d      	ldr	r2, [pc, #116]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d018      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1b      	ldr	r2, [pc, #108]	; (80095e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d013      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a1a      	ldr	r2, [pc, #104]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d00e      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a18      	ldr	r2, [pc, #96]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d009      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a17      	ldr	r2, [pc, #92]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a15      	ldr	r2, [pc, #84]	; (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d10c      	bne.n	80095bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3714      	adds	r7, #20
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	40010000 	.word	0x40010000
 80095e0:	40000400 	.word	0x40000400
 80095e4:	40000800 	.word	0x40000800
 80095e8:	40000c00 	.word	0x40000c00
 80095ec:	40010400 	.word	0x40010400
 80095f0:	40014000 	.word	0x40014000
 80095f4:	40001800 	.word	0x40001800

080095f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009610:	2302      	movs	r3, #2
 8009612:	e03d      	b.n	8009690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	4313      	orrs	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	4313      	orrs	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	4313      	orrs	r3, r2
 800967c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68fa      	ldr	r2, [r7, #12]
 8009684:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e03f      	b.n	8009756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f8 fef4 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2224      	movs	r2, #36	; 0x24
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f905 	bl	8009918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691a      	ldr	r2, [r3, #16]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800971c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695a      	ldr	r2, [r3, #20]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800972c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800973c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2220      	movs	r2, #32
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2220      	movs	r2, #32
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b08a      	sub	sp, #40	; 0x28
 8009762:	af02      	add	r7, sp, #8
 8009764:	60f8      	str	r0, [r7, #12]
 8009766:	60b9      	str	r1, [r7, #8]
 8009768:	603b      	str	r3, [r7, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b20      	cmp	r3, #32
 800977c:	d17c      	bne.n	8009878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d002      	beq.n	800978a <HAL_UART_Transmit+0x2c>
 8009784:	88fb      	ldrh	r3, [r7, #6]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e075      	b.n	800987a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_UART_Transmit+0x3e>
 8009798:	2302      	movs	r3, #2
 800979a:	e06e      	b.n	800987a <HAL_UART_Transmit+0x11c>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2221      	movs	r2, #33	; 0x21
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097b2:	f7f9 fa25 	bl	8002c00 <HAL_GetTick>
 80097b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	88fa      	ldrh	r2, [r7, #6]
 80097bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	88fa      	ldrh	r2, [r7, #6]
 80097c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097cc:	d108      	bne.n	80097e0 <HAL_UART_Transmit+0x82>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	691b      	ldr	r3, [r3, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	61bb      	str	r3, [r7, #24]
 80097de:	e003      	b.n	80097e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097e4:	2300      	movs	r3, #0
 80097e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80097f0:	e02a      	b.n	8009848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2180      	movs	r1, #128	; 0x80
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f840 	bl	8009882 <UART_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e036      	b.n	800987a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10b      	bne.n	800982a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	881b      	ldrh	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	3302      	adds	r3, #2
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e007      	b.n	800983a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800983e:	b29b      	uxth	r3, r3
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800984c:	b29b      	uxth	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1cf      	bne.n	80097f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2140      	movs	r1, #64	; 0x40
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 f810 	bl	8009882 <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e006      	b.n	800987a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3720      	adds	r7, #32
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	603b      	str	r3, [r7, #0]
 800988e:	4613      	mov	r3, r2
 8009890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009892:	e02c      	b.n	80098ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989a:	d028      	beq.n	80098ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d007      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80098a2:	f7f9 f9ad 	bl	8002c00 <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d21d      	bcs.n	80098ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695a      	ldr	r2, [r3, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0201 	bic.w	r2, r2, #1
 80098d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2220      	movs	r2, #32
 80098de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e00f      	b.n	800990e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4013      	ands	r3, r2
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	bf0c      	ite	eq
 80098fe:	2301      	moveq	r3, #1
 8009900:	2300      	movne	r3, #0
 8009902:	b2db      	uxtb	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	429a      	cmp	r2, r3
 800990a:	d0c3      	beq.n	8009894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991c:	b09f      	sub	sp, #124	; 0x7c
 800991e:	af00      	add	r7, sp, #0
 8009920:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800992c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992e:	68d9      	ldr	r1, [r3, #12]
 8009930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	ea40 0301 	orr.w	r3, r0, r1
 8009938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800993a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800993c:	689a      	ldr	r2, [r3, #8]
 800993e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	431a      	orrs	r2, r3
 8009944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	431a      	orrs	r2, r3
 800994a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	4313      	orrs	r3, r2
 8009950:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68db      	ldr	r3, [r3, #12]
 8009958:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800995c:	f021 010c 	bic.w	r1, r1, #12
 8009960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009966:	430b      	orrs	r3, r1
 8009968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800996a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009976:	6999      	ldr	r1, [r3, #24]
 8009978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	ea40 0301 	orr.w	r3, r0, r1
 8009980:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4bc5      	ldr	r3, [pc, #788]	; (8009c9c <UART_SetConfig+0x384>)
 8009988:	429a      	cmp	r2, r3
 800998a:	d004      	beq.n	8009996 <UART_SetConfig+0x7e>
 800998c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	4bc3      	ldr	r3, [pc, #780]	; (8009ca0 <UART_SetConfig+0x388>)
 8009992:	429a      	cmp	r2, r3
 8009994:	d103      	bne.n	800999e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009996:	f7fd fe37 	bl	8007608 <HAL_RCC_GetPCLK2Freq>
 800999a:	6778      	str	r0, [r7, #116]	; 0x74
 800999c:	e002      	b.n	80099a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800999e:	f7fd fe1f 	bl	80075e0 <HAL_RCC_GetPCLK1Freq>
 80099a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099ac:	f040 80b6 	bne.w	8009b1c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099b2:	461c      	mov	r4, r3
 80099b4:	f04f 0500 	mov.w	r5, #0
 80099b8:	4622      	mov	r2, r4
 80099ba:	462b      	mov	r3, r5
 80099bc:	1891      	adds	r1, r2, r2
 80099be:	6439      	str	r1, [r7, #64]	; 0x40
 80099c0:	415b      	adcs	r3, r3
 80099c2:	647b      	str	r3, [r7, #68]	; 0x44
 80099c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80099c8:	1912      	adds	r2, r2, r4
 80099ca:	eb45 0303 	adc.w	r3, r5, r3
 80099ce:	f04f 0000 	mov.w	r0, #0
 80099d2:	f04f 0100 	mov.w	r1, #0
 80099d6:	00d9      	lsls	r1, r3, #3
 80099d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80099dc:	00d0      	lsls	r0, r2, #3
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	1911      	adds	r1, r2, r4
 80099e4:	6639      	str	r1, [r7, #96]	; 0x60
 80099e6:	416b      	adcs	r3, r5
 80099e8:	667b      	str	r3, [r7, #100]	; 0x64
 80099ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	1891      	adds	r1, r2, r2
 80099f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80099f8:	415b      	adcs	r3, r3
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a00:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009a04:	f7f7 f8fa 	bl	8000bfc <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4ba5      	ldr	r3, [pc, #660]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	011e      	lsls	r6, r3, #4
 8009a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a18:	461c      	mov	r4, r3
 8009a1a:	f04f 0500 	mov.w	r5, #0
 8009a1e:	4622      	mov	r2, r4
 8009a20:	462b      	mov	r3, r5
 8009a22:	1891      	adds	r1, r2, r2
 8009a24:	6339      	str	r1, [r7, #48]	; 0x30
 8009a26:	415b      	adcs	r3, r3
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
 8009a2a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009a2e:	1912      	adds	r2, r2, r4
 8009a30:	eb45 0303 	adc.w	r3, r5, r3
 8009a34:	f04f 0000 	mov.w	r0, #0
 8009a38:	f04f 0100 	mov.w	r1, #0
 8009a3c:	00d9      	lsls	r1, r3, #3
 8009a3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a42:	00d0      	lsls	r0, r2, #3
 8009a44:	4602      	mov	r2, r0
 8009a46:	460b      	mov	r3, r1
 8009a48:	1911      	adds	r1, r2, r4
 8009a4a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a4c:	416b      	adcs	r3, r5
 8009a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	461a      	mov	r2, r3
 8009a56:	f04f 0300 	mov.w	r3, #0
 8009a5a:	1891      	adds	r1, r2, r2
 8009a5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a5e:	415b      	adcs	r3, r3
 8009a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009a6a:	f7f7 f8c7 	bl	8000bfc <__aeabi_uldivmod>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	4b8c      	ldr	r3, [pc, #560]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009a74:	fba3 1302 	umull	r1, r3, r3, r2
 8009a78:	095b      	lsrs	r3, r3, #5
 8009a7a:	2164      	movs	r1, #100	; 0x64
 8009a7c:	fb01 f303 	mul.w	r3, r1, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	3332      	adds	r3, #50	; 0x32
 8009a86:	4a87      	ldr	r2, [pc, #540]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009a88:	fba2 2303 	umull	r2, r3, r2, r3
 8009a8c:	095b      	lsrs	r3, r3, #5
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a94:	441e      	add	r6, r3
 8009a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f04f 0100 	mov.w	r1, #0
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	1894      	adds	r4, r2, r2
 8009aa4:	623c      	str	r4, [r7, #32]
 8009aa6:	415b      	adcs	r3, r3
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8009aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009aae:	1812      	adds	r2, r2, r0
 8009ab0:	eb41 0303 	adc.w	r3, r1, r3
 8009ab4:	f04f 0400 	mov.w	r4, #0
 8009ab8:	f04f 0500 	mov.w	r5, #0
 8009abc:	00dd      	lsls	r5, r3, #3
 8009abe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ac2:	00d4      	lsls	r4, r2, #3
 8009ac4:	4622      	mov	r2, r4
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	1814      	adds	r4, r2, r0
 8009aca:	653c      	str	r4, [r7, #80]	; 0x50
 8009acc:	414b      	adcs	r3, r1
 8009ace:	657b      	str	r3, [r7, #84]	; 0x54
 8009ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f04f 0300 	mov.w	r3, #0
 8009ada:	1891      	adds	r1, r2, r2
 8009adc:	61b9      	str	r1, [r7, #24]
 8009ade:	415b      	adcs	r3, r3
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ae6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009aea:	f7f7 f887 	bl	8000bfc <__aeabi_uldivmod>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4b6c      	ldr	r3, [pc, #432]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009af4:	fba3 1302 	umull	r1, r3, r3, r2
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	2164      	movs	r1, #100	; 0x64
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	3332      	adds	r3, #50	; 0x32
 8009b06:	4a67      	ldr	r2, [pc, #412]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009b08:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0c:	095b      	lsrs	r3, r3, #5
 8009b0e:	f003 0207 	and.w	r2, r3, #7
 8009b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4432      	add	r2, r6
 8009b18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b1a:	e0b9      	b.n	8009c90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b1e:	461c      	mov	r4, r3
 8009b20:	f04f 0500 	mov.w	r5, #0
 8009b24:	4622      	mov	r2, r4
 8009b26:	462b      	mov	r3, r5
 8009b28:	1891      	adds	r1, r2, r2
 8009b2a:	6139      	str	r1, [r7, #16]
 8009b2c:	415b      	adcs	r3, r3
 8009b2e:	617b      	str	r3, [r7, #20]
 8009b30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009b34:	1912      	adds	r2, r2, r4
 8009b36:	eb45 0303 	adc.w	r3, r5, r3
 8009b3a:	f04f 0000 	mov.w	r0, #0
 8009b3e:	f04f 0100 	mov.w	r1, #0
 8009b42:	00d9      	lsls	r1, r3, #3
 8009b44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b48:	00d0      	lsls	r0, r2, #3
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	eb12 0804 	adds.w	r8, r2, r4
 8009b52:	eb43 0905 	adc.w	r9, r3, r5
 8009b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f04f 0100 	mov.w	r1, #0
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	008b      	lsls	r3, r1, #2
 8009b6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009b6e:	0082      	lsls	r2, r0, #2
 8009b70:	4640      	mov	r0, r8
 8009b72:	4649      	mov	r1, r9
 8009b74:	f7f7 f842 	bl	8000bfc <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4b49      	ldr	r3, [pc, #292]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	011e      	lsls	r6, r3, #4
 8009b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f04f 0100 	mov.w	r1, #0
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	1894      	adds	r4, r2, r2
 8009b94:	60bc      	str	r4, [r7, #8]
 8009b96:	415b      	adcs	r3, r3
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b9e:	1812      	adds	r2, r2, r0
 8009ba0:	eb41 0303 	adc.w	r3, r1, r3
 8009ba4:	f04f 0400 	mov.w	r4, #0
 8009ba8:	f04f 0500 	mov.w	r5, #0
 8009bac:	00dd      	lsls	r5, r3, #3
 8009bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bb2:	00d4      	lsls	r4, r2, #3
 8009bb4:	4622      	mov	r2, r4
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	1814      	adds	r4, r2, r0
 8009bba:	64bc      	str	r4, [r7, #72]	; 0x48
 8009bbc:	414b      	adcs	r3, r1
 8009bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f04f 0100 	mov.w	r1, #0
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	008b      	lsls	r3, r1, #2
 8009bd4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009bd8:	0082      	lsls	r2, r0, #2
 8009bda:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009bde:	f7f7 f80d 	bl	8000bfc <__aeabi_uldivmod>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	4b2f      	ldr	r3, [pc, #188]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009be8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	2164      	movs	r1, #100	; 0x64
 8009bf0:	fb01 f303 	mul.w	r3, r1, r3
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	3332      	adds	r3, #50	; 0x32
 8009bfa:	4a2a      	ldr	r2, [pc, #168]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c06:	441e      	add	r6, r3
 8009c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f04f 0100 	mov.w	r1, #0
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	1894      	adds	r4, r2, r2
 8009c16:	603c      	str	r4, [r7, #0]
 8009c18:	415b      	adcs	r3, r3
 8009c1a:	607b      	str	r3, [r7, #4]
 8009c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c20:	1812      	adds	r2, r2, r0
 8009c22:	eb41 0303 	adc.w	r3, r1, r3
 8009c26:	f04f 0400 	mov.w	r4, #0
 8009c2a:	f04f 0500 	mov.w	r5, #0
 8009c2e:	00dd      	lsls	r5, r3, #3
 8009c30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c34:	00d4      	lsls	r4, r2, #3
 8009c36:	4622      	mov	r2, r4
 8009c38:	462b      	mov	r3, r5
 8009c3a:	eb12 0a00 	adds.w	sl, r2, r0
 8009c3e:	eb43 0b01 	adc.w	fp, r3, r1
 8009c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	f04f 0200 	mov.w	r2, #0
 8009c50:	f04f 0300 	mov.w	r3, #0
 8009c54:	008b      	lsls	r3, r1, #2
 8009c56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009c5a:	0082      	lsls	r2, r0, #2
 8009c5c:	4650      	mov	r0, sl
 8009c5e:	4659      	mov	r1, fp
 8009c60:	f7f6 ffcc 	bl	8000bfc <__aeabi_uldivmod>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8009c6e:	095b      	lsrs	r3, r3, #5
 8009c70:	2164      	movs	r1, #100	; 0x64
 8009c72:	fb01 f303 	mul.w	r3, r1, r3
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	3332      	adds	r3, #50	; 0x32
 8009c7c:	4a09      	ldr	r2, [pc, #36]	; (8009ca4 <UART_SetConfig+0x38c>)
 8009c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c82:	095b      	lsrs	r3, r3, #5
 8009c84:	f003 020f 	and.w	r2, r3, #15
 8009c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4432      	add	r2, r6
 8009c8e:	609a      	str	r2, [r3, #8]
}
 8009c90:	bf00      	nop
 8009c92:	377c      	adds	r7, #124	; 0x7c
 8009c94:	46bd      	mov	sp, r7
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	bf00      	nop
 8009c9c:	40011000 	.word	0x40011000
 8009ca0:	40011400 	.word	0x40011400
 8009ca4:	51eb851f 	.word	0x51eb851f

08009ca8 <__errno>:
 8009ca8:	4b01      	ldr	r3, [pc, #4]	; (8009cb0 <__errno+0x8>)
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	2000000c 	.word	0x2000000c

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	4d0d      	ldr	r5, [pc, #52]	; (8009cec <__libc_init_array+0x38>)
 8009cb8:	4c0d      	ldr	r4, [pc, #52]	; (8009cf0 <__libc_init_array+0x3c>)
 8009cba:	1b64      	subs	r4, r4, r5
 8009cbc:	10a4      	asrs	r4, r4, #2
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	4d0b      	ldr	r5, [pc, #44]	; (8009cf4 <__libc_init_array+0x40>)
 8009cc6:	4c0c      	ldr	r4, [pc, #48]	; (8009cf8 <__libc_init_array+0x44>)
 8009cc8:	f001 fcc0 	bl	800b64c <_init>
 8009ccc:	1b64      	subs	r4, r4, r5
 8009cce:	10a4      	asrs	r4, r4, #2
 8009cd0:	2600      	movs	r6, #0
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	0800b930 	.word	0x0800b930
 8009cf0:	0800b930 	.word	0x0800b930
 8009cf4:	0800b930 	.word	0x0800b930
 8009cf8:	0800b934 	.word	0x0800b934

08009cfc <memcpy>:
 8009cfc:	440a      	add	r2, r1
 8009cfe:	4291      	cmp	r1, r2
 8009d00:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d04:	d100      	bne.n	8009d08 <memcpy+0xc>
 8009d06:	4770      	bx	lr
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d12:	4291      	cmp	r1, r2
 8009d14:	d1f9      	bne.n	8009d0a <memcpy+0xe>
 8009d16:	bd10      	pop	{r4, pc}

08009d18 <memset>:
 8009d18:	4402      	add	r2, r0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d100      	bne.n	8009d22 <memset+0xa>
 8009d20:	4770      	bx	lr
 8009d22:	f803 1b01 	strb.w	r1, [r3], #1
 8009d26:	e7f9      	b.n	8009d1c <memset+0x4>

08009d28 <_vsniprintf_r>:
 8009d28:	b530      	push	{r4, r5, lr}
 8009d2a:	1e14      	subs	r4, r2, #0
 8009d2c:	4605      	mov	r5, r0
 8009d2e:	b09b      	sub	sp, #108	; 0x6c
 8009d30:	4618      	mov	r0, r3
 8009d32:	da05      	bge.n	8009d40 <_vsniprintf_r+0x18>
 8009d34:	238b      	movs	r3, #139	; 0x8b
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d3c:	b01b      	add	sp, #108	; 0x6c
 8009d3e:	bd30      	pop	{r4, r5, pc}
 8009d40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d44:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009d48:	bf14      	ite	ne
 8009d4a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009d4e:	4623      	moveq	r3, r4
 8009d50:	9302      	str	r3, [sp, #8]
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d58:	9100      	str	r1, [sp, #0]
 8009d5a:	9104      	str	r1, [sp, #16]
 8009d5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009d60:	4602      	mov	r2, r0
 8009d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d64:	4669      	mov	r1, sp
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 f894 	bl	8009e94 <_svfiprintf_r>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	bfbc      	itt	lt
 8009d70:	238b      	movlt	r3, #139	; 0x8b
 8009d72:	602b      	strlt	r3, [r5, #0]
 8009d74:	2c00      	cmp	r4, #0
 8009d76:	d0e1      	beq.n	8009d3c <_vsniprintf_r+0x14>
 8009d78:	9b00      	ldr	r3, [sp, #0]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
 8009d7e:	e7dd      	b.n	8009d3c <_vsniprintf_r+0x14>

08009d80 <vsniprintf>:
 8009d80:	b507      	push	{r0, r1, r2, lr}
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	460a      	mov	r2, r1
 8009d88:	4601      	mov	r1, r0
 8009d8a:	4803      	ldr	r0, [pc, #12]	; (8009d98 <vsniprintf+0x18>)
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f7ff ffcb 	bl	8009d28 <_vsniprintf_r>
 8009d92:	b003      	add	sp, #12
 8009d94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d98:	2000000c 	.word	0x2000000c

08009d9c <_vsiprintf_r>:
 8009d9c:	b500      	push	{lr}
 8009d9e:	b09b      	sub	sp, #108	; 0x6c
 8009da0:	9100      	str	r1, [sp, #0]
 8009da2:	9104      	str	r1, [sp, #16]
 8009da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009da8:	9105      	str	r1, [sp, #20]
 8009daa:	9102      	str	r1, [sp, #8]
 8009dac:	4905      	ldr	r1, [pc, #20]	; (8009dc4 <_vsiprintf_r+0x28>)
 8009dae:	9103      	str	r1, [sp, #12]
 8009db0:	4669      	mov	r1, sp
 8009db2:	f000 f86f 	bl	8009e94 <_svfiprintf_r>
 8009db6:	9b00      	ldr	r3, [sp, #0]
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
 8009dbc:	b01b      	add	sp, #108	; 0x6c
 8009dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009dc2:	bf00      	nop
 8009dc4:	ffff0208 	.word	0xffff0208

08009dc8 <vsiprintf>:
 8009dc8:	4613      	mov	r3, r2
 8009dca:	460a      	mov	r2, r1
 8009dcc:	4601      	mov	r1, r0
 8009dce:	4802      	ldr	r0, [pc, #8]	; (8009dd8 <vsiprintf+0x10>)
 8009dd0:	6800      	ldr	r0, [r0, #0]
 8009dd2:	f7ff bfe3 	b.w	8009d9c <_vsiprintf_r>
 8009dd6:	bf00      	nop
 8009dd8:	2000000c 	.word	0x2000000c

08009ddc <__ssputs_r>:
 8009ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de0:	688e      	ldr	r6, [r1, #8]
 8009de2:	429e      	cmp	r6, r3
 8009de4:	4682      	mov	sl, r0
 8009de6:	460c      	mov	r4, r1
 8009de8:	4690      	mov	r8, r2
 8009dea:	461f      	mov	r7, r3
 8009dec:	d838      	bhi.n	8009e60 <__ssputs_r+0x84>
 8009dee:	898a      	ldrh	r2, [r1, #12]
 8009df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009df4:	d032      	beq.n	8009e5c <__ssputs_r+0x80>
 8009df6:	6825      	ldr	r5, [r4, #0]
 8009df8:	6909      	ldr	r1, [r1, #16]
 8009dfa:	eba5 0901 	sub.w	r9, r5, r1
 8009dfe:	6965      	ldr	r5, [r4, #20]
 8009e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e08:	3301      	adds	r3, #1
 8009e0a:	444b      	add	r3, r9
 8009e0c:	106d      	asrs	r5, r5, #1
 8009e0e:	429d      	cmp	r5, r3
 8009e10:	bf38      	it	cc
 8009e12:	461d      	movcc	r5, r3
 8009e14:	0553      	lsls	r3, r2, #21
 8009e16:	d531      	bpl.n	8009e7c <__ssputs_r+0xa0>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	f000 fb39 	bl	800a490 <_malloc_r>
 8009e1e:	4606      	mov	r6, r0
 8009e20:	b950      	cbnz	r0, 8009e38 <__ssputs_r+0x5c>
 8009e22:	230c      	movs	r3, #12
 8009e24:	f8ca 3000 	str.w	r3, [sl]
 8009e28:	89a3      	ldrh	r3, [r4, #12]
 8009e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e38:	6921      	ldr	r1, [r4, #16]
 8009e3a:	464a      	mov	r2, r9
 8009e3c:	f7ff ff5e 	bl	8009cfc <memcpy>
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4a:	81a3      	strh	r3, [r4, #12]
 8009e4c:	6126      	str	r6, [r4, #16]
 8009e4e:	6165      	str	r5, [r4, #20]
 8009e50:	444e      	add	r6, r9
 8009e52:	eba5 0509 	sub.w	r5, r5, r9
 8009e56:	6026      	str	r6, [r4, #0]
 8009e58:	60a5      	str	r5, [r4, #8]
 8009e5a:	463e      	mov	r6, r7
 8009e5c:	42be      	cmp	r6, r7
 8009e5e:	d900      	bls.n	8009e62 <__ssputs_r+0x86>
 8009e60:	463e      	mov	r6, r7
 8009e62:	4632      	mov	r2, r6
 8009e64:	6820      	ldr	r0, [r4, #0]
 8009e66:	4641      	mov	r1, r8
 8009e68:	f000 faa8 	bl	800a3bc <memmove>
 8009e6c:	68a3      	ldr	r3, [r4, #8]
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	1b9b      	subs	r3, r3, r6
 8009e72:	4432      	add	r2, r6
 8009e74:	60a3      	str	r3, [r4, #8]
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	2000      	movs	r0, #0
 8009e7a:	e7db      	b.n	8009e34 <__ssputs_r+0x58>
 8009e7c:	462a      	mov	r2, r5
 8009e7e:	f000 fb61 	bl	800a544 <_realloc_r>
 8009e82:	4606      	mov	r6, r0
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d1e1      	bne.n	8009e4c <__ssputs_r+0x70>
 8009e88:	6921      	ldr	r1, [r4, #16]
 8009e8a:	4650      	mov	r0, sl
 8009e8c:	f000 fab0 	bl	800a3f0 <_free_r>
 8009e90:	e7c7      	b.n	8009e22 <__ssputs_r+0x46>
	...

08009e94 <_svfiprintf_r>:
 8009e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e98:	4698      	mov	r8, r3
 8009e9a:	898b      	ldrh	r3, [r1, #12]
 8009e9c:	061b      	lsls	r3, r3, #24
 8009e9e:	b09d      	sub	sp, #116	; 0x74
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	d50e      	bpl.n	8009ec6 <_svfiprintf_r+0x32>
 8009ea8:	690b      	ldr	r3, [r1, #16]
 8009eaa:	b963      	cbnz	r3, 8009ec6 <_svfiprintf_r+0x32>
 8009eac:	2140      	movs	r1, #64	; 0x40
 8009eae:	f000 faef 	bl	800a490 <_malloc_r>
 8009eb2:	6028      	str	r0, [r5, #0]
 8009eb4:	6128      	str	r0, [r5, #16]
 8009eb6:	b920      	cbnz	r0, 8009ec2 <_svfiprintf_r+0x2e>
 8009eb8:	230c      	movs	r3, #12
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec0:	e0d1      	b.n	800a066 <_svfiprintf_r+0x1d2>
 8009ec2:	2340      	movs	r3, #64	; 0x40
 8009ec4:	616b      	str	r3, [r5, #20]
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eca:	2320      	movs	r3, #32
 8009ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed4:	2330      	movs	r3, #48	; 0x30
 8009ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a080 <_svfiprintf_r+0x1ec>
 8009eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ede:	f04f 0901 	mov.w	r9, #1
 8009ee2:	4623      	mov	r3, r4
 8009ee4:	469a      	mov	sl, r3
 8009ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eea:	b10a      	cbz	r2, 8009ef0 <_svfiprintf_r+0x5c>
 8009eec:	2a25      	cmp	r2, #37	; 0x25
 8009eee:	d1f9      	bne.n	8009ee4 <_svfiprintf_r+0x50>
 8009ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef4:	d00b      	beq.n	8009f0e <_svfiprintf_r+0x7a>
 8009ef6:	465b      	mov	r3, fp
 8009ef8:	4622      	mov	r2, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff ff6d 	bl	8009ddc <__ssputs_r>
 8009f02:	3001      	adds	r0, #1
 8009f04:	f000 80aa 	beq.w	800a05c <_svfiprintf_r+0x1c8>
 8009f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f0a:	445a      	add	r2, fp
 8009f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 80a2 	beq.w	800a05c <_svfiprintf_r+0x1c8>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f22:	f10a 0a01 	add.w	sl, sl, #1
 8009f26:	9304      	str	r3, [sp, #16]
 8009f28:	9307      	str	r3, [sp, #28]
 8009f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f30:	4654      	mov	r4, sl
 8009f32:	2205      	movs	r2, #5
 8009f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f38:	4851      	ldr	r0, [pc, #324]	; (800a080 <_svfiprintf_r+0x1ec>)
 8009f3a:	f7f6 f971 	bl	8000220 <memchr>
 8009f3e:	9a04      	ldr	r2, [sp, #16]
 8009f40:	b9d8      	cbnz	r0, 8009f7a <_svfiprintf_r+0xe6>
 8009f42:	06d0      	lsls	r0, r2, #27
 8009f44:	bf44      	itt	mi
 8009f46:	2320      	movmi	r3, #32
 8009f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f4c:	0711      	lsls	r1, r2, #28
 8009f4e:	bf44      	itt	mi
 8009f50:	232b      	movmi	r3, #43	; 0x2b
 8009f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f56:	f89a 3000 	ldrb.w	r3, [sl]
 8009f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f5c:	d015      	beq.n	8009f8a <_svfiprintf_r+0xf6>
 8009f5e:	9a07      	ldr	r2, [sp, #28]
 8009f60:	4654      	mov	r4, sl
 8009f62:	2000      	movs	r0, #0
 8009f64:	f04f 0c0a 	mov.w	ip, #10
 8009f68:	4621      	mov	r1, r4
 8009f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f6e:	3b30      	subs	r3, #48	; 0x30
 8009f70:	2b09      	cmp	r3, #9
 8009f72:	d94e      	bls.n	800a012 <_svfiprintf_r+0x17e>
 8009f74:	b1b0      	cbz	r0, 8009fa4 <_svfiprintf_r+0x110>
 8009f76:	9207      	str	r2, [sp, #28]
 8009f78:	e014      	b.n	8009fa4 <_svfiprintf_r+0x110>
 8009f7a:	eba0 0308 	sub.w	r3, r0, r8
 8009f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f82:	4313      	orrs	r3, r2
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	46a2      	mov	sl, r4
 8009f88:	e7d2      	b.n	8009f30 <_svfiprintf_r+0x9c>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	1d19      	adds	r1, r3, #4
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	9103      	str	r1, [sp, #12]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	bfbb      	ittet	lt
 8009f96:	425b      	neglt	r3, r3
 8009f98:	f042 0202 	orrlt.w	r2, r2, #2
 8009f9c:	9307      	strge	r3, [sp, #28]
 8009f9e:	9307      	strlt	r3, [sp, #28]
 8009fa0:	bfb8      	it	lt
 8009fa2:	9204      	strlt	r2, [sp, #16]
 8009fa4:	7823      	ldrb	r3, [r4, #0]
 8009fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa8:	d10c      	bne.n	8009fc4 <_svfiprintf_r+0x130>
 8009faa:	7863      	ldrb	r3, [r4, #1]
 8009fac:	2b2a      	cmp	r3, #42	; 0x2a
 8009fae:	d135      	bne.n	800a01c <_svfiprintf_r+0x188>
 8009fb0:	9b03      	ldr	r3, [sp, #12]
 8009fb2:	1d1a      	adds	r2, r3, #4
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	9203      	str	r2, [sp, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bfb8      	it	lt
 8009fbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fc0:	3402      	adds	r4, #2
 8009fc2:	9305      	str	r3, [sp, #20]
 8009fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a090 <_svfiprintf_r+0x1fc>
 8009fc8:	7821      	ldrb	r1, [r4, #0]
 8009fca:	2203      	movs	r2, #3
 8009fcc:	4650      	mov	r0, sl
 8009fce:	f7f6 f927 	bl	8000220 <memchr>
 8009fd2:	b140      	cbz	r0, 8009fe6 <_svfiprintf_r+0x152>
 8009fd4:	2340      	movs	r3, #64	; 0x40
 8009fd6:	eba0 000a 	sub.w	r0, r0, sl
 8009fda:	fa03 f000 	lsl.w	r0, r3, r0
 8009fde:	9b04      	ldr	r3, [sp, #16]
 8009fe0:	4303      	orrs	r3, r0
 8009fe2:	3401      	adds	r4, #1
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fea:	4826      	ldr	r0, [pc, #152]	; (800a084 <_svfiprintf_r+0x1f0>)
 8009fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ff0:	2206      	movs	r2, #6
 8009ff2:	f7f6 f915 	bl	8000220 <memchr>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d038      	beq.n	800a06c <_svfiprintf_r+0x1d8>
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <_svfiprintf_r+0x1f4>)
 8009ffc:	bb1b      	cbnz	r3, 800a046 <_svfiprintf_r+0x1b2>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	3307      	adds	r3, #7
 800a002:	f023 0307 	bic.w	r3, r3, #7
 800a006:	3308      	adds	r3, #8
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a00c:	4433      	add	r3, r6
 800a00e:	9309      	str	r3, [sp, #36]	; 0x24
 800a010:	e767      	b.n	8009ee2 <_svfiprintf_r+0x4e>
 800a012:	fb0c 3202 	mla	r2, ip, r2, r3
 800a016:	460c      	mov	r4, r1
 800a018:	2001      	movs	r0, #1
 800a01a:	e7a5      	b.n	8009f68 <_svfiprintf_r+0xd4>
 800a01c:	2300      	movs	r3, #0
 800a01e:	3401      	adds	r4, #1
 800a020:	9305      	str	r3, [sp, #20]
 800a022:	4619      	mov	r1, r3
 800a024:	f04f 0c0a 	mov.w	ip, #10
 800a028:	4620      	mov	r0, r4
 800a02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a02e:	3a30      	subs	r2, #48	; 0x30
 800a030:	2a09      	cmp	r2, #9
 800a032:	d903      	bls.n	800a03c <_svfiprintf_r+0x1a8>
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0c5      	beq.n	8009fc4 <_svfiprintf_r+0x130>
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	e7c3      	b.n	8009fc4 <_svfiprintf_r+0x130>
 800a03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a040:	4604      	mov	r4, r0
 800a042:	2301      	movs	r3, #1
 800a044:	e7f0      	b.n	800a028 <_svfiprintf_r+0x194>
 800a046:	ab03      	add	r3, sp, #12
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	462a      	mov	r2, r5
 800a04c:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <_svfiprintf_r+0x1f8>)
 800a04e:	a904      	add	r1, sp, #16
 800a050:	4638      	mov	r0, r7
 800a052:	f3af 8000 	nop.w
 800a056:	1c42      	adds	r2, r0, #1
 800a058:	4606      	mov	r6, r0
 800a05a:	d1d6      	bne.n	800a00a <_svfiprintf_r+0x176>
 800a05c:	89ab      	ldrh	r3, [r5, #12]
 800a05e:	065b      	lsls	r3, r3, #25
 800a060:	f53f af2c 	bmi.w	8009ebc <_svfiprintf_r+0x28>
 800a064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a066:	b01d      	add	sp, #116	; 0x74
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	ab03      	add	r3, sp, #12
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	462a      	mov	r2, r5
 800a072:	4b06      	ldr	r3, [pc, #24]	; (800a08c <_svfiprintf_r+0x1f8>)
 800a074:	a904      	add	r1, sp, #16
 800a076:	4638      	mov	r0, r7
 800a078:	f000 f87a 	bl	800a170 <_printf_i>
 800a07c:	e7eb      	b.n	800a056 <_svfiprintf_r+0x1c2>
 800a07e:	bf00      	nop
 800a080:	0800b71c 	.word	0x0800b71c
 800a084:	0800b726 	.word	0x0800b726
 800a088:	00000000 	.word	0x00000000
 800a08c:	08009ddd 	.word	0x08009ddd
 800a090:	0800b722 	.word	0x0800b722

0800a094 <_printf_common>:
 800a094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a098:	4616      	mov	r6, r2
 800a09a:	4699      	mov	r9, r3
 800a09c:	688a      	ldr	r2, [r1, #8]
 800a09e:	690b      	ldr	r3, [r1, #16]
 800a0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	bfb8      	it	lt
 800a0a8:	4613      	movlt	r3, r2
 800a0aa:	6033      	str	r3, [r6, #0]
 800a0ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b10a      	cbz	r2, 800a0ba <_printf_common+0x26>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	0699      	lsls	r1, r3, #26
 800a0be:	bf42      	ittt	mi
 800a0c0:	6833      	ldrmi	r3, [r6, #0]
 800a0c2:	3302      	addmi	r3, #2
 800a0c4:	6033      	strmi	r3, [r6, #0]
 800a0c6:	6825      	ldr	r5, [r4, #0]
 800a0c8:	f015 0506 	ands.w	r5, r5, #6
 800a0cc:	d106      	bne.n	800a0dc <_printf_common+0x48>
 800a0ce:	f104 0a19 	add.w	sl, r4, #25
 800a0d2:	68e3      	ldr	r3, [r4, #12]
 800a0d4:	6832      	ldr	r2, [r6, #0]
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc26      	bgt.n	800a12a <_printf_common+0x96>
 800a0dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0e0:	1e13      	subs	r3, r2, #0
 800a0e2:	6822      	ldr	r2, [r4, #0]
 800a0e4:	bf18      	it	ne
 800a0e6:	2301      	movne	r3, #1
 800a0e8:	0692      	lsls	r2, r2, #26
 800a0ea:	d42b      	bmi.n	800a144 <_printf_common+0xb0>
 800a0ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	47c0      	blx	r8
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d01e      	beq.n	800a138 <_printf_common+0xa4>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	68e5      	ldr	r5, [r4, #12]
 800a0fe:	6832      	ldr	r2, [r6, #0]
 800a100:	f003 0306 	and.w	r3, r3, #6
 800a104:	2b04      	cmp	r3, #4
 800a106:	bf08      	it	eq
 800a108:	1aad      	subeq	r5, r5, r2
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	6922      	ldr	r2, [r4, #16]
 800a10e:	bf0c      	ite	eq
 800a110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a114:	2500      	movne	r5, #0
 800a116:	4293      	cmp	r3, r2
 800a118:	bfc4      	itt	gt
 800a11a:	1a9b      	subgt	r3, r3, r2
 800a11c:	18ed      	addgt	r5, r5, r3
 800a11e:	2600      	movs	r6, #0
 800a120:	341a      	adds	r4, #26
 800a122:	42b5      	cmp	r5, r6
 800a124:	d11a      	bne.n	800a15c <_printf_common+0xc8>
 800a126:	2000      	movs	r0, #0
 800a128:	e008      	b.n	800a13c <_printf_common+0xa8>
 800a12a:	2301      	movs	r3, #1
 800a12c:	4652      	mov	r2, sl
 800a12e:	4649      	mov	r1, r9
 800a130:	4638      	mov	r0, r7
 800a132:	47c0      	blx	r8
 800a134:	3001      	adds	r0, #1
 800a136:	d103      	bne.n	800a140 <_printf_common+0xac>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a140:	3501      	adds	r5, #1
 800a142:	e7c6      	b.n	800a0d2 <_printf_common+0x3e>
 800a144:	18e1      	adds	r1, r4, r3
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	2030      	movs	r0, #48	; 0x30
 800a14a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a14e:	4422      	add	r2, r4
 800a150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a158:	3302      	adds	r3, #2
 800a15a:	e7c7      	b.n	800a0ec <_printf_common+0x58>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4622      	mov	r2, r4
 800a160:	4649      	mov	r1, r9
 800a162:	4638      	mov	r0, r7
 800a164:	47c0      	blx	r8
 800a166:	3001      	adds	r0, #1
 800a168:	d0e6      	beq.n	800a138 <_printf_common+0xa4>
 800a16a:	3601      	adds	r6, #1
 800a16c:	e7d9      	b.n	800a122 <_printf_common+0x8e>
	...

0800a170 <_printf_i>:
 800a170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a174:	460c      	mov	r4, r1
 800a176:	4691      	mov	r9, r2
 800a178:	7e27      	ldrb	r7, [r4, #24]
 800a17a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a17c:	2f78      	cmp	r7, #120	; 0x78
 800a17e:	4680      	mov	r8, r0
 800a180:	469a      	mov	sl, r3
 800a182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a186:	d807      	bhi.n	800a198 <_printf_i+0x28>
 800a188:	2f62      	cmp	r7, #98	; 0x62
 800a18a:	d80a      	bhi.n	800a1a2 <_printf_i+0x32>
 800a18c:	2f00      	cmp	r7, #0
 800a18e:	f000 80d8 	beq.w	800a342 <_printf_i+0x1d2>
 800a192:	2f58      	cmp	r7, #88	; 0x58
 800a194:	f000 80a3 	beq.w	800a2de <_printf_i+0x16e>
 800a198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a19c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1a0:	e03a      	b.n	800a218 <_printf_i+0xa8>
 800a1a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1a6:	2b15      	cmp	r3, #21
 800a1a8:	d8f6      	bhi.n	800a198 <_printf_i+0x28>
 800a1aa:	a001      	add	r0, pc, #4	; (adr r0, 800a1b0 <_printf_i+0x40>)
 800a1ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a199 	.word	0x0800a199
 800a1bc:	0800a199 	.word	0x0800a199
 800a1c0:	0800a199 	.word	0x0800a199
 800a1c4:	0800a199 	.word	0x0800a199
 800a1c8:	0800a21d 	.word	0x0800a21d
 800a1cc:	0800a199 	.word	0x0800a199
 800a1d0:	0800a199 	.word	0x0800a199
 800a1d4:	0800a199 	.word	0x0800a199
 800a1d8:	0800a199 	.word	0x0800a199
 800a1dc:	0800a329 	.word	0x0800a329
 800a1e0:	0800a24d 	.word	0x0800a24d
 800a1e4:	0800a30b 	.word	0x0800a30b
 800a1e8:	0800a199 	.word	0x0800a199
 800a1ec:	0800a199 	.word	0x0800a199
 800a1f0:	0800a34b 	.word	0x0800a34b
 800a1f4:	0800a199 	.word	0x0800a199
 800a1f8:	0800a24d 	.word	0x0800a24d
 800a1fc:	0800a199 	.word	0x0800a199
 800a200:	0800a199 	.word	0x0800a199
 800a204:	0800a313 	.word	0x0800a313
 800a208:	680b      	ldr	r3, [r1, #0]
 800a20a:	1d1a      	adds	r2, r3, #4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	600a      	str	r2, [r1, #0]
 800a210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a218:	2301      	movs	r3, #1
 800a21a:	e0a3      	b.n	800a364 <_printf_i+0x1f4>
 800a21c:	6825      	ldr	r5, [r4, #0]
 800a21e:	6808      	ldr	r0, [r1, #0]
 800a220:	062e      	lsls	r6, r5, #24
 800a222:	f100 0304 	add.w	r3, r0, #4
 800a226:	d50a      	bpl.n	800a23e <_printf_i+0xce>
 800a228:	6805      	ldr	r5, [r0, #0]
 800a22a:	600b      	str	r3, [r1, #0]
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	da03      	bge.n	800a238 <_printf_i+0xc8>
 800a230:	232d      	movs	r3, #45	; 0x2d
 800a232:	426d      	negs	r5, r5
 800a234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a238:	485e      	ldr	r0, [pc, #376]	; (800a3b4 <_printf_i+0x244>)
 800a23a:	230a      	movs	r3, #10
 800a23c:	e019      	b.n	800a272 <_printf_i+0x102>
 800a23e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a242:	6805      	ldr	r5, [r0, #0]
 800a244:	600b      	str	r3, [r1, #0]
 800a246:	bf18      	it	ne
 800a248:	b22d      	sxthne	r5, r5
 800a24a:	e7ef      	b.n	800a22c <_printf_i+0xbc>
 800a24c:	680b      	ldr	r3, [r1, #0]
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	1d18      	adds	r0, r3, #4
 800a252:	6008      	str	r0, [r1, #0]
 800a254:	0628      	lsls	r0, r5, #24
 800a256:	d501      	bpl.n	800a25c <_printf_i+0xec>
 800a258:	681d      	ldr	r5, [r3, #0]
 800a25a:	e002      	b.n	800a262 <_printf_i+0xf2>
 800a25c:	0669      	lsls	r1, r5, #25
 800a25e:	d5fb      	bpl.n	800a258 <_printf_i+0xe8>
 800a260:	881d      	ldrh	r5, [r3, #0]
 800a262:	4854      	ldr	r0, [pc, #336]	; (800a3b4 <_printf_i+0x244>)
 800a264:	2f6f      	cmp	r7, #111	; 0x6f
 800a266:	bf0c      	ite	eq
 800a268:	2308      	moveq	r3, #8
 800a26a:	230a      	movne	r3, #10
 800a26c:	2100      	movs	r1, #0
 800a26e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a272:	6866      	ldr	r6, [r4, #4]
 800a274:	60a6      	str	r6, [r4, #8]
 800a276:	2e00      	cmp	r6, #0
 800a278:	bfa2      	ittt	ge
 800a27a:	6821      	ldrge	r1, [r4, #0]
 800a27c:	f021 0104 	bicge.w	r1, r1, #4
 800a280:	6021      	strge	r1, [r4, #0]
 800a282:	b90d      	cbnz	r5, 800a288 <_printf_i+0x118>
 800a284:	2e00      	cmp	r6, #0
 800a286:	d04d      	beq.n	800a324 <_printf_i+0x1b4>
 800a288:	4616      	mov	r6, r2
 800a28a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a28e:	fb03 5711 	mls	r7, r3, r1, r5
 800a292:	5dc7      	ldrb	r7, [r0, r7]
 800a294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a298:	462f      	mov	r7, r5
 800a29a:	42bb      	cmp	r3, r7
 800a29c:	460d      	mov	r5, r1
 800a29e:	d9f4      	bls.n	800a28a <_printf_i+0x11a>
 800a2a0:	2b08      	cmp	r3, #8
 800a2a2:	d10b      	bne.n	800a2bc <_printf_i+0x14c>
 800a2a4:	6823      	ldr	r3, [r4, #0]
 800a2a6:	07df      	lsls	r7, r3, #31
 800a2a8:	d508      	bpl.n	800a2bc <_printf_i+0x14c>
 800a2aa:	6923      	ldr	r3, [r4, #16]
 800a2ac:	6861      	ldr	r1, [r4, #4]
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	bfde      	ittt	le
 800a2b2:	2330      	movle	r3, #48	; 0x30
 800a2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2b8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a2bc:	1b92      	subs	r2, r2, r6
 800a2be:	6122      	str	r2, [r4, #16]
 800a2c0:	f8cd a000 	str.w	sl, [sp]
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	aa03      	add	r2, sp, #12
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f7ff fee2 	bl	800a094 <_printf_common>
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d14c      	bne.n	800a36e <_printf_i+0x1fe>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2d8:	b004      	add	sp, #16
 800a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2de:	4835      	ldr	r0, [pc, #212]	; (800a3b4 <_printf_i+0x244>)
 800a2e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	680e      	ldr	r6, [r1, #0]
 800a2e8:	061f      	lsls	r7, r3, #24
 800a2ea:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2ee:	600e      	str	r6, [r1, #0]
 800a2f0:	d514      	bpl.n	800a31c <_printf_i+0x1ac>
 800a2f2:	07d9      	lsls	r1, r3, #31
 800a2f4:	bf44      	itt	mi
 800a2f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a2fa:	6023      	strmi	r3, [r4, #0]
 800a2fc:	b91d      	cbnz	r5, 800a306 <_printf_i+0x196>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	f023 0320 	bic.w	r3, r3, #32
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	2310      	movs	r3, #16
 800a308:	e7b0      	b.n	800a26c <_printf_i+0xfc>
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	f043 0320 	orr.w	r3, r3, #32
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	2378      	movs	r3, #120	; 0x78
 800a314:	4828      	ldr	r0, [pc, #160]	; (800a3b8 <_printf_i+0x248>)
 800a316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a31a:	e7e3      	b.n	800a2e4 <_printf_i+0x174>
 800a31c:	065e      	lsls	r6, r3, #25
 800a31e:	bf48      	it	mi
 800a320:	b2ad      	uxthmi	r5, r5
 800a322:	e7e6      	b.n	800a2f2 <_printf_i+0x182>
 800a324:	4616      	mov	r6, r2
 800a326:	e7bb      	b.n	800a2a0 <_printf_i+0x130>
 800a328:	680b      	ldr	r3, [r1, #0]
 800a32a:	6826      	ldr	r6, [r4, #0]
 800a32c:	6960      	ldr	r0, [r4, #20]
 800a32e:	1d1d      	adds	r5, r3, #4
 800a330:	600d      	str	r5, [r1, #0]
 800a332:	0635      	lsls	r5, r6, #24
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	d501      	bpl.n	800a33c <_printf_i+0x1cc>
 800a338:	6018      	str	r0, [r3, #0]
 800a33a:	e002      	b.n	800a342 <_printf_i+0x1d2>
 800a33c:	0671      	lsls	r1, r6, #25
 800a33e:	d5fb      	bpl.n	800a338 <_printf_i+0x1c8>
 800a340:	8018      	strh	r0, [r3, #0]
 800a342:	2300      	movs	r3, #0
 800a344:	6123      	str	r3, [r4, #16]
 800a346:	4616      	mov	r6, r2
 800a348:	e7ba      	b.n	800a2c0 <_printf_i+0x150>
 800a34a:	680b      	ldr	r3, [r1, #0]
 800a34c:	1d1a      	adds	r2, r3, #4
 800a34e:	600a      	str	r2, [r1, #0]
 800a350:	681e      	ldr	r6, [r3, #0]
 800a352:	6862      	ldr	r2, [r4, #4]
 800a354:	2100      	movs	r1, #0
 800a356:	4630      	mov	r0, r6
 800a358:	f7f5 ff62 	bl	8000220 <memchr>
 800a35c:	b108      	cbz	r0, 800a362 <_printf_i+0x1f2>
 800a35e:	1b80      	subs	r0, r0, r6
 800a360:	6060      	str	r0, [r4, #4]
 800a362:	6863      	ldr	r3, [r4, #4]
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	2300      	movs	r3, #0
 800a368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a36c:	e7a8      	b.n	800a2c0 <_printf_i+0x150>
 800a36e:	6923      	ldr	r3, [r4, #16]
 800a370:	4632      	mov	r2, r6
 800a372:	4649      	mov	r1, r9
 800a374:	4640      	mov	r0, r8
 800a376:	47d0      	blx	sl
 800a378:	3001      	adds	r0, #1
 800a37a:	d0ab      	beq.n	800a2d4 <_printf_i+0x164>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	079b      	lsls	r3, r3, #30
 800a380:	d413      	bmi.n	800a3aa <_printf_i+0x23a>
 800a382:	68e0      	ldr	r0, [r4, #12]
 800a384:	9b03      	ldr	r3, [sp, #12]
 800a386:	4298      	cmp	r0, r3
 800a388:	bfb8      	it	lt
 800a38a:	4618      	movlt	r0, r3
 800a38c:	e7a4      	b.n	800a2d8 <_printf_i+0x168>
 800a38e:	2301      	movs	r3, #1
 800a390:	4632      	mov	r2, r6
 800a392:	4649      	mov	r1, r9
 800a394:	4640      	mov	r0, r8
 800a396:	47d0      	blx	sl
 800a398:	3001      	adds	r0, #1
 800a39a:	d09b      	beq.n	800a2d4 <_printf_i+0x164>
 800a39c:	3501      	adds	r5, #1
 800a39e:	68e3      	ldr	r3, [r4, #12]
 800a3a0:	9903      	ldr	r1, [sp, #12]
 800a3a2:	1a5b      	subs	r3, r3, r1
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	dcf2      	bgt.n	800a38e <_printf_i+0x21e>
 800a3a8:	e7eb      	b.n	800a382 <_printf_i+0x212>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	f104 0619 	add.w	r6, r4, #25
 800a3b0:	e7f5      	b.n	800a39e <_printf_i+0x22e>
 800a3b2:	bf00      	nop
 800a3b4:	0800b72d 	.word	0x0800b72d
 800a3b8:	0800b73e 	.word	0x0800b73e

0800a3bc <memmove>:
 800a3bc:	4288      	cmp	r0, r1
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	eb01 0402 	add.w	r4, r1, r2
 800a3c4:	d902      	bls.n	800a3cc <memmove+0x10>
 800a3c6:	4284      	cmp	r4, r0
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	d807      	bhi.n	800a3dc <memmove+0x20>
 800a3cc:	1e43      	subs	r3, r0, #1
 800a3ce:	42a1      	cmp	r1, r4
 800a3d0:	d008      	beq.n	800a3e4 <memmove+0x28>
 800a3d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3da:	e7f8      	b.n	800a3ce <memmove+0x12>
 800a3dc:	4402      	add	r2, r0
 800a3de:	4601      	mov	r1, r0
 800a3e0:	428a      	cmp	r2, r1
 800a3e2:	d100      	bne.n	800a3e6 <memmove+0x2a>
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3ee:	e7f7      	b.n	800a3e0 <memmove+0x24>

0800a3f0 <_free_r>:
 800a3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3f2:	2900      	cmp	r1, #0
 800a3f4:	d048      	beq.n	800a488 <_free_r+0x98>
 800a3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fa:	9001      	str	r0, [sp, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a402:	bfb8      	it	lt
 800a404:	18e4      	addlt	r4, r4, r3
 800a406:	f000 f8d3 	bl	800a5b0 <__malloc_lock>
 800a40a:	4a20      	ldr	r2, [pc, #128]	; (800a48c <_free_r+0x9c>)
 800a40c:	9801      	ldr	r0, [sp, #4]
 800a40e:	6813      	ldr	r3, [r2, #0]
 800a410:	4615      	mov	r5, r2
 800a412:	b933      	cbnz	r3, 800a422 <_free_r+0x32>
 800a414:	6063      	str	r3, [r4, #4]
 800a416:	6014      	str	r4, [r2, #0]
 800a418:	b003      	add	sp, #12
 800a41a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a41e:	f000 b8cd 	b.w	800a5bc <__malloc_unlock>
 800a422:	42a3      	cmp	r3, r4
 800a424:	d90b      	bls.n	800a43e <_free_r+0x4e>
 800a426:	6821      	ldr	r1, [r4, #0]
 800a428:	1862      	adds	r2, r4, r1
 800a42a:	4293      	cmp	r3, r2
 800a42c:	bf04      	itt	eq
 800a42e:	681a      	ldreq	r2, [r3, #0]
 800a430:	685b      	ldreq	r3, [r3, #4]
 800a432:	6063      	str	r3, [r4, #4]
 800a434:	bf04      	itt	eq
 800a436:	1852      	addeq	r2, r2, r1
 800a438:	6022      	streq	r2, [r4, #0]
 800a43a:	602c      	str	r4, [r5, #0]
 800a43c:	e7ec      	b.n	800a418 <_free_r+0x28>
 800a43e:	461a      	mov	r2, r3
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	b10b      	cbz	r3, 800a448 <_free_r+0x58>
 800a444:	42a3      	cmp	r3, r4
 800a446:	d9fa      	bls.n	800a43e <_free_r+0x4e>
 800a448:	6811      	ldr	r1, [r2, #0]
 800a44a:	1855      	adds	r5, r2, r1
 800a44c:	42a5      	cmp	r5, r4
 800a44e:	d10b      	bne.n	800a468 <_free_r+0x78>
 800a450:	6824      	ldr	r4, [r4, #0]
 800a452:	4421      	add	r1, r4
 800a454:	1854      	adds	r4, r2, r1
 800a456:	42a3      	cmp	r3, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	d1dd      	bne.n	800a418 <_free_r+0x28>
 800a45c:	681c      	ldr	r4, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	4421      	add	r1, r4
 800a464:	6011      	str	r1, [r2, #0]
 800a466:	e7d7      	b.n	800a418 <_free_r+0x28>
 800a468:	d902      	bls.n	800a470 <_free_r+0x80>
 800a46a:	230c      	movs	r3, #12
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	e7d3      	b.n	800a418 <_free_r+0x28>
 800a470:	6825      	ldr	r5, [r4, #0]
 800a472:	1961      	adds	r1, r4, r5
 800a474:	428b      	cmp	r3, r1
 800a476:	bf04      	itt	eq
 800a478:	6819      	ldreq	r1, [r3, #0]
 800a47a:	685b      	ldreq	r3, [r3, #4]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	bf04      	itt	eq
 800a480:	1949      	addeq	r1, r1, r5
 800a482:	6021      	streq	r1, [r4, #0]
 800a484:	6054      	str	r4, [r2, #4]
 800a486:	e7c7      	b.n	800a418 <_free_r+0x28>
 800a488:	b003      	add	sp, #12
 800a48a:	bd30      	pop	{r4, r5, pc}
 800a48c:	200004d4 	.word	0x200004d4

0800a490 <_malloc_r>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	1ccd      	adds	r5, r1, #3
 800a494:	f025 0503 	bic.w	r5, r5, #3
 800a498:	3508      	adds	r5, #8
 800a49a:	2d0c      	cmp	r5, #12
 800a49c:	bf38      	it	cc
 800a49e:	250c      	movcc	r5, #12
 800a4a0:	2d00      	cmp	r5, #0
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	db01      	blt.n	800a4aa <_malloc_r+0x1a>
 800a4a6:	42a9      	cmp	r1, r5
 800a4a8:	d903      	bls.n	800a4b2 <_malloc_r+0x22>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	6033      	str	r3, [r6, #0]
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b2:	f000 f87d 	bl	800a5b0 <__malloc_lock>
 800a4b6:	4921      	ldr	r1, [pc, #132]	; (800a53c <_malloc_r+0xac>)
 800a4b8:	680a      	ldr	r2, [r1, #0]
 800a4ba:	4614      	mov	r4, r2
 800a4bc:	b99c      	cbnz	r4, 800a4e6 <_malloc_r+0x56>
 800a4be:	4f20      	ldr	r7, [pc, #128]	; (800a540 <_malloc_r+0xb0>)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	b923      	cbnz	r3, 800a4ce <_malloc_r+0x3e>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f000 f862 	bl	800a590 <_sbrk_r>
 800a4cc:	6038      	str	r0, [r7, #0]
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	f000 f85d 	bl	800a590 <_sbrk_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d123      	bne.n	800a522 <_malloc_r+0x92>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	6033      	str	r3, [r6, #0]
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f000 f86c 	bl	800a5bc <__malloc_unlock>
 800a4e4:	e7e3      	b.n	800a4ae <_malloc_r+0x1e>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	1b5b      	subs	r3, r3, r5
 800a4ea:	d417      	bmi.n	800a51c <_malloc_r+0x8c>
 800a4ec:	2b0b      	cmp	r3, #11
 800a4ee:	d903      	bls.n	800a4f8 <_malloc_r+0x68>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	441c      	add	r4, r3
 800a4f4:	6025      	str	r5, [r4, #0]
 800a4f6:	e004      	b.n	800a502 <_malloc_r+0x72>
 800a4f8:	6863      	ldr	r3, [r4, #4]
 800a4fa:	42a2      	cmp	r2, r4
 800a4fc:	bf0c      	ite	eq
 800a4fe:	600b      	streq	r3, [r1, #0]
 800a500:	6053      	strne	r3, [r2, #4]
 800a502:	4630      	mov	r0, r6
 800a504:	f000 f85a 	bl	800a5bc <__malloc_unlock>
 800a508:	f104 000b 	add.w	r0, r4, #11
 800a50c:	1d23      	adds	r3, r4, #4
 800a50e:	f020 0007 	bic.w	r0, r0, #7
 800a512:	1ac2      	subs	r2, r0, r3
 800a514:	d0cc      	beq.n	800a4b0 <_malloc_r+0x20>
 800a516:	1a1b      	subs	r3, r3, r0
 800a518:	50a3      	str	r3, [r4, r2]
 800a51a:	e7c9      	b.n	800a4b0 <_malloc_r+0x20>
 800a51c:	4622      	mov	r2, r4
 800a51e:	6864      	ldr	r4, [r4, #4]
 800a520:	e7cc      	b.n	800a4bc <_malloc_r+0x2c>
 800a522:	1cc4      	adds	r4, r0, #3
 800a524:	f024 0403 	bic.w	r4, r4, #3
 800a528:	42a0      	cmp	r0, r4
 800a52a:	d0e3      	beq.n	800a4f4 <_malloc_r+0x64>
 800a52c:	1a21      	subs	r1, r4, r0
 800a52e:	4630      	mov	r0, r6
 800a530:	f000 f82e 	bl	800a590 <_sbrk_r>
 800a534:	3001      	adds	r0, #1
 800a536:	d1dd      	bne.n	800a4f4 <_malloc_r+0x64>
 800a538:	e7cf      	b.n	800a4da <_malloc_r+0x4a>
 800a53a:	bf00      	nop
 800a53c:	200004d4 	.word	0x200004d4
 800a540:	200004d8 	.word	0x200004d8

0800a544 <_realloc_r>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	4607      	mov	r7, r0
 800a548:	4614      	mov	r4, r2
 800a54a:	460e      	mov	r6, r1
 800a54c:	b921      	cbnz	r1, 800a558 <_realloc_r+0x14>
 800a54e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a552:	4611      	mov	r1, r2
 800a554:	f7ff bf9c 	b.w	800a490 <_malloc_r>
 800a558:	b922      	cbnz	r2, 800a564 <_realloc_r+0x20>
 800a55a:	f7ff ff49 	bl	800a3f0 <_free_r>
 800a55e:	4625      	mov	r5, r4
 800a560:	4628      	mov	r0, r5
 800a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a564:	f000 f830 	bl	800a5c8 <_malloc_usable_size_r>
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d20f      	bcs.n	800a58c <_realloc_r+0x48>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4638      	mov	r0, r7
 800a570:	f7ff ff8e 	bl	800a490 <_malloc_r>
 800a574:	4605      	mov	r5, r0
 800a576:	2800      	cmp	r0, #0
 800a578:	d0f2      	beq.n	800a560 <_realloc_r+0x1c>
 800a57a:	4631      	mov	r1, r6
 800a57c:	4622      	mov	r2, r4
 800a57e:	f7ff fbbd 	bl	8009cfc <memcpy>
 800a582:	4631      	mov	r1, r6
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff ff33 	bl	800a3f0 <_free_r>
 800a58a:	e7e9      	b.n	800a560 <_realloc_r+0x1c>
 800a58c:	4635      	mov	r5, r6
 800a58e:	e7e7      	b.n	800a560 <_realloc_r+0x1c>

0800a590 <_sbrk_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	4d06      	ldr	r5, [pc, #24]	; (800a5ac <_sbrk_r+0x1c>)
 800a594:	2300      	movs	r3, #0
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	602b      	str	r3, [r5, #0]
 800a59c:	f7f8 fa58 	bl	8002a50 <_sbrk>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_sbrk_r+0x1a>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_sbrk_r+0x1a>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	20000808 	.word	0x20000808

0800a5b0 <__malloc_lock>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	; (800a5b8 <__malloc_lock+0x8>)
 800a5b2:	f000 b811 	b.w	800a5d8 <__retarget_lock_acquire_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	20000810 	.word	0x20000810

0800a5bc <__malloc_unlock>:
 800a5bc:	4801      	ldr	r0, [pc, #4]	; (800a5c4 <__malloc_unlock+0x8>)
 800a5be:	f000 b80c 	b.w	800a5da <__retarget_lock_release_recursive>
 800a5c2:	bf00      	nop
 800a5c4:	20000810 	.word	0x20000810

0800a5c8 <_malloc_usable_size_r>:
 800a5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5cc:	1f18      	subs	r0, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfbc      	itt	lt
 800a5d2:	580b      	ldrlt	r3, [r1, r0]
 800a5d4:	18c0      	addlt	r0, r0, r3
 800a5d6:	4770      	bx	lr

0800a5d8 <__retarget_lock_acquire_recursive>:
 800a5d8:	4770      	bx	lr

0800a5da <__retarget_lock_release_recursive>:
 800a5da:	4770      	bx	lr
 800a5dc:	0000      	movs	r0, r0
	...

0800a5e0 <sin>:
 800a5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5e2:	ec53 2b10 	vmov	r2, r3, d0
 800a5e6:	4826      	ldr	r0, [pc, #152]	; (800a680 <sin+0xa0>)
 800a5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5ec:	4281      	cmp	r1, r0
 800a5ee:	dc07      	bgt.n	800a600 <sin+0x20>
 800a5f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a678 <sin+0x98>
 800a5f4:	2000      	movs	r0, #0
 800a5f6:	f000 fe5b 	bl	800b2b0 <__kernel_sin>
 800a5fa:	ec51 0b10 	vmov	r0, r1, d0
 800a5fe:	e007      	b.n	800a610 <sin+0x30>
 800a600:	4820      	ldr	r0, [pc, #128]	; (800a684 <sin+0xa4>)
 800a602:	4281      	cmp	r1, r0
 800a604:	dd09      	ble.n	800a61a <sin+0x3a>
 800a606:	ee10 0a10 	vmov	r0, s0
 800a60a:	4619      	mov	r1, r3
 800a60c:	f7f5 fe5c 	bl	80002c8 <__aeabi_dsub>
 800a610:	ec41 0b10 	vmov	d0, r0, r1
 800a614:	b005      	add	sp, #20
 800a616:	f85d fb04 	ldr.w	pc, [sp], #4
 800a61a:	4668      	mov	r0, sp
 800a61c:	f000 f834 	bl	800a688 <__ieee754_rem_pio2>
 800a620:	f000 0003 	and.w	r0, r0, #3
 800a624:	2801      	cmp	r0, #1
 800a626:	d008      	beq.n	800a63a <sin+0x5a>
 800a628:	2802      	cmp	r0, #2
 800a62a:	d00d      	beq.n	800a648 <sin+0x68>
 800a62c:	b9d0      	cbnz	r0, 800a664 <sin+0x84>
 800a62e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a632:	ed9d 0b00 	vldr	d0, [sp]
 800a636:	2001      	movs	r0, #1
 800a638:	e7dd      	b.n	800a5f6 <sin+0x16>
 800a63a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a63e:	ed9d 0b00 	vldr	d0, [sp]
 800a642:	f000 fa2d 	bl	800aaa0 <__kernel_cos>
 800a646:	e7d8      	b.n	800a5fa <sin+0x1a>
 800a648:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a64c:	ed9d 0b00 	vldr	d0, [sp]
 800a650:	2001      	movs	r0, #1
 800a652:	f000 fe2d 	bl	800b2b0 <__kernel_sin>
 800a656:	ec53 2b10 	vmov	r2, r3, d0
 800a65a:	ee10 0a10 	vmov	r0, s0
 800a65e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a662:	e7d5      	b.n	800a610 <sin+0x30>
 800a664:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a668:	ed9d 0b00 	vldr	d0, [sp]
 800a66c:	f000 fa18 	bl	800aaa0 <__kernel_cos>
 800a670:	e7f1      	b.n	800a656 <sin+0x76>
 800a672:	bf00      	nop
 800a674:	f3af 8000 	nop.w
	...
 800a680:	3fe921fb 	.word	0x3fe921fb
 800a684:	7fefffff 	.word	0x7fefffff

0800a688 <__ieee754_rem_pio2>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ed2d 8b02 	vpush	{d8}
 800a690:	ec55 4b10 	vmov	r4, r5, d0
 800a694:	4bca      	ldr	r3, [pc, #808]	; (800a9c0 <__ieee754_rem_pio2+0x338>)
 800a696:	b08b      	sub	sp, #44	; 0x2c
 800a698:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a69c:	4598      	cmp	r8, r3
 800a69e:	4682      	mov	sl, r0
 800a6a0:	9502      	str	r5, [sp, #8]
 800a6a2:	dc08      	bgt.n	800a6b6 <__ieee754_rem_pio2+0x2e>
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	ed80 0b00 	vstr	d0, [r0]
 800a6ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a6b0:	f04f 0b00 	mov.w	fp, #0
 800a6b4:	e028      	b.n	800a708 <__ieee754_rem_pio2+0x80>
 800a6b6:	4bc3      	ldr	r3, [pc, #780]	; (800a9c4 <__ieee754_rem_pio2+0x33c>)
 800a6b8:	4598      	cmp	r8, r3
 800a6ba:	dc78      	bgt.n	800a7ae <__ieee754_rem_pio2+0x126>
 800a6bc:	9b02      	ldr	r3, [sp, #8]
 800a6be:	4ec2      	ldr	r6, [pc, #776]	; (800a9c8 <__ieee754_rem_pio2+0x340>)
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	ee10 0a10 	vmov	r0, s0
 800a6c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a988 <__ieee754_rem_pio2+0x300>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	dd39      	ble.n	800a744 <__ieee754_rem_pio2+0xbc>
 800a6d0:	f7f5 fdfa 	bl	80002c8 <__aeabi_dsub>
 800a6d4:	45b0      	cmp	r8, r6
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	460d      	mov	r5, r1
 800a6da:	d01b      	beq.n	800a714 <__ieee754_rem_pio2+0x8c>
 800a6dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800a990 <__ieee754_rem_pio2+0x308>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fdf1 	bl	80002c8 <__aeabi_dsub>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	e9ca 2300 	strd	r2, r3, [sl]
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	f7f5 fde9 	bl	80002c8 <__aeabi_dsub>
 800a6f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a990 <__ieee754_rem_pio2+0x308>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 fde4 	bl	80002c8 <__aeabi_dsub>
 800a700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a704:	f04f 0b01 	mov.w	fp, #1
 800a708:	4658      	mov	r0, fp
 800a70a:	b00b      	add	sp, #44	; 0x2c
 800a70c:	ecbd 8b02 	vpop	{d8}
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	a3a0      	add	r3, pc, #640	; (adr r3, 800a998 <__ieee754_rem_pio2+0x310>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f7f5 fdd5 	bl	80002c8 <__aeabi_dsub>
 800a71e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a9a0 <__ieee754_rem_pio2+0x318>)
 800a720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a724:	4604      	mov	r4, r0
 800a726:	460d      	mov	r5, r1
 800a728:	f7f5 fdce 	bl	80002c8 <__aeabi_dsub>
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	e9ca 2300 	strd	r2, r3, [sl]
 800a734:	4620      	mov	r0, r4
 800a736:	4629      	mov	r1, r5
 800a738:	f7f5 fdc6 	bl	80002c8 <__aeabi_dsub>
 800a73c:	a398      	add	r3, pc, #608	; (adr r3, 800a9a0 <__ieee754_rem_pio2+0x318>)
 800a73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a742:	e7db      	b.n	800a6fc <__ieee754_rem_pio2+0x74>
 800a744:	f7f5 fdc2 	bl	80002cc <__adddf3>
 800a748:	45b0      	cmp	r8, r6
 800a74a:	4604      	mov	r4, r0
 800a74c:	460d      	mov	r5, r1
 800a74e:	d016      	beq.n	800a77e <__ieee754_rem_pio2+0xf6>
 800a750:	a38f      	add	r3, pc, #572	; (adr r3, 800a990 <__ieee754_rem_pio2+0x308>)
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	f7f5 fdb9 	bl	80002cc <__adddf3>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	e9ca 2300 	strd	r2, r3, [sl]
 800a762:	4620      	mov	r0, r4
 800a764:	4629      	mov	r1, r5
 800a766:	f7f5 fdaf 	bl	80002c8 <__aeabi_dsub>
 800a76a:	a389      	add	r3, pc, #548	; (adr r3, 800a990 <__ieee754_rem_pio2+0x308>)
 800a76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a770:	f7f5 fdac 	bl	80002cc <__adddf3>
 800a774:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a778:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a77c:	e7c4      	b.n	800a708 <__ieee754_rem_pio2+0x80>
 800a77e:	a386      	add	r3, pc, #536	; (adr r3, 800a998 <__ieee754_rem_pio2+0x310>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 fda2 	bl	80002cc <__adddf3>
 800a788:	a385      	add	r3, pc, #532	; (adr r3, 800a9a0 <__ieee754_rem_pio2+0x318>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	4604      	mov	r4, r0
 800a790:	460d      	mov	r5, r1
 800a792:	f7f5 fd9b 	bl	80002cc <__adddf3>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	e9ca 2300 	strd	r2, r3, [sl]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f5 fd91 	bl	80002c8 <__aeabi_dsub>
 800a7a6:	a37e      	add	r3, pc, #504	; (adr r3, 800a9a0 <__ieee754_rem_pio2+0x318>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	e7e0      	b.n	800a770 <__ieee754_rem_pio2+0xe8>
 800a7ae:	4b87      	ldr	r3, [pc, #540]	; (800a9cc <__ieee754_rem_pio2+0x344>)
 800a7b0:	4598      	cmp	r8, r3
 800a7b2:	f300 80d9 	bgt.w	800a968 <__ieee754_rem_pio2+0x2e0>
 800a7b6:	f000 fe39 	bl	800b42c <fabs>
 800a7ba:	ec55 4b10 	vmov	r4, r5, d0
 800a7be:	ee10 0a10 	vmov	r0, s0
 800a7c2:	a379      	add	r3, pc, #484	; (adr r3, 800a9a8 <__ieee754_rem_pio2+0x320>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	f7f5 ff35 	bl	8000638 <__aeabi_dmul>
 800a7ce:	4b80      	ldr	r3, [pc, #512]	; (800a9d0 <__ieee754_rem_pio2+0x348>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f7f5 fd7b 	bl	80002cc <__adddf3>
 800a7d6:	f7f6 f9c9 	bl	8000b6c <__aeabi_d2iz>
 800a7da:	4683      	mov	fp, r0
 800a7dc:	f7f5 fec2 	bl	8000564 <__aeabi_i2d>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	ec43 2b18 	vmov	d8, r2, r3
 800a7e8:	a367      	add	r3, pc, #412	; (adr r3, 800a988 <__ieee754_rem_pio2+0x300>)
 800a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ee:	f7f5 ff23 	bl	8000638 <__aeabi_dmul>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f7f5 fd65 	bl	80002c8 <__aeabi_dsub>
 800a7fe:	a364      	add	r3, pc, #400	; (adr r3, 800a990 <__ieee754_rem_pio2+0x308>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	4606      	mov	r6, r0
 800a806:	460f      	mov	r7, r1
 800a808:	ec51 0b18 	vmov	r0, r1, d8
 800a80c:	f7f5 ff14 	bl	8000638 <__aeabi_dmul>
 800a810:	f1bb 0f1f 	cmp.w	fp, #31
 800a814:	4604      	mov	r4, r0
 800a816:	460d      	mov	r5, r1
 800a818:	dc0d      	bgt.n	800a836 <__ieee754_rem_pio2+0x1ae>
 800a81a:	4b6e      	ldr	r3, [pc, #440]	; (800a9d4 <__ieee754_rem_pio2+0x34c>)
 800a81c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a824:	4543      	cmp	r3, r8
 800a826:	d006      	beq.n	800a836 <__ieee754_rem_pio2+0x1ae>
 800a828:	4622      	mov	r2, r4
 800a82a:	462b      	mov	r3, r5
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f5 fd4a 	bl	80002c8 <__aeabi_dsub>
 800a834:	e00f      	b.n	800a856 <__ieee754_rem_pio2+0x1ce>
 800a836:	462b      	mov	r3, r5
 800a838:	4622      	mov	r2, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f5 fd43 	bl	80002c8 <__aeabi_dsub>
 800a842:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a846:	9303      	str	r3, [sp, #12]
 800a848:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a84c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a850:	f1b8 0f10 	cmp.w	r8, #16
 800a854:	dc02      	bgt.n	800a85c <__ieee754_rem_pio2+0x1d4>
 800a856:	e9ca 0100 	strd	r0, r1, [sl]
 800a85a:	e039      	b.n	800a8d0 <__ieee754_rem_pio2+0x248>
 800a85c:	a34e      	add	r3, pc, #312	; (adr r3, 800a998 <__ieee754_rem_pio2+0x310>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	ec51 0b18 	vmov	r0, r1, d8
 800a866:	f7f5 fee7 	bl	8000638 <__aeabi_dmul>
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4630      	mov	r0, r6
 800a874:	4639      	mov	r1, r7
 800a876:	f7f5 fd27 	bl	80002c8 <__aeabi_dsub>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4680      	mov	r8, r0
 800a880:	4689      	mov	r9, r1
 800a882:	4630      	mov	r0, r6
 800a884:	4639      	mov	r1, r7
 800a886:	f7f5 fd1f 	bl	80002c8 <__aeabi_dsub>
 800a88a:	4622      	mov	r2, r4
 800a88c:	462b      	mov	r3, r5
 800a88e:	f7f5 fd1b 	bl	80002c8 <__aeabi_dsub>
 800a892:	a343      	add	r3, pc, #268	; (adr r3, 800a9a0 <__ieee754_rem_pio2+0x318>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	4604      	mov	r4, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	ec51 0b18 	vmov	r0, r1, d8
 800a8a0:	f7f5 feca 	bl	8000638 <__aeabi_dmul>
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	f7f5 fd0e 	bl	80002c8 <__aeabi_dsub>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	460d      	mov	r5, r1
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	f7f5 fd06 	bl	80002c8 <__aeabi_dsub>
 800a8bc:	9a03      	ldr	r2, [sp, #12]
 800a8be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	2b31      	cmp	r3, #49	; 0x31
 800a8c6:	dc24      	bgt.n	800a912 <__ieee754_rem_pio2+0x28a>
 800a8c8:	e9ca 0100 	strd	r0, r1, [sl]
 800a8cc:	4646      	mov	r6, r8
 800a8ce:	464f      	mov	r7, r9
 800a8d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	464b      	mov	r3, r9
 800a8da:	4639      	mov	r1, r7
 800a8dc:	f7f5 fcf4 	bl	80002c8 <__aeabi_dsub>
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	f7f5 fcf0 	bl	80002c8 <__aeabi_dsub>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8f0:	f6bf af0a 	bge.w	800a708 <__ieee754_rem_pio2+0x80>
 800a8f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a8f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a8fc:	f8ca 8000 	str.w	r8, [sl]
 800a900:	f8ca 0008 	str.w	r0, [sl, #8]
 800a904:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a908:	f8ca 300c 	str.w	r3, [sl, #12]
 800a90c:	f1cb 0b00 	rsb	fp, fp, #0
 800a910:	e6fa      	b.n	800a708 <__ieee754_rem_pio2+0x80>
 800a912:	a327      	add	r3, pc, #156	; (adr r3, 800a9b0 <__ieee754_rem_pio2+0x328>)
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	ec51 0b18 	vmov	r0, r1, d8
 800a91c:	f7f5 fe8c 	bl	8000638 <__aeabi_dmul>
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f5 fccc 	bl	80002c8 <__aeabi_dsub>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4606      	mov	r6, r0
 800a936:	460f      	mov	r7, r1
 800a938:	4640      	mov	r0, r8
 800a93a:	4649      	mov	r1, r9
 800a93c:	f7f5 fcc4 	bl	80002c8 <__aeabi_dsub>
 800a940:	4622      	mov	r2, r4
 800a942:	462b      	mov	r3, r5
 800a944:	f7f5 fcc0 	bl	80002c8 <__aeabi_dsub>
 800a948:	a31b      	add	r3, pc, #108	; (adr r3, 800a9b8 <__ieee754_rem_pio2+0x330>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	4604      	mov	r4, r0
 800a950:	460d      	mov	r5, r1
 800a952:	ec51 0b18 	vmov	r0, r1, d8
 800a956:	f7f5 fe6f 	bl	8000638 <__aeabi_dmul>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fcb3 	bl	80002c8 <__aeabi_dsub>
 800a962:	4604      	mov	r4, r0
 800a964:	460d      	mov	r5, r1
 800a966:	e75f      	b.n	800a828 <__ieee754_rem_pio2+0x1a0>
 800a968:	4b1b      	ldr	r3, [pc, #108]	; (800a9d8 <__ieee754_rem_pio2+0x350>)
 800a96a:	4598      	cmp	r8, r3
 800a96c:	dd36      	ble.n	800a9dc <__ieee754_rem_pio2+0x354>
 800a96e:	ee10 2a10 	vmov	r2, s0
 800a972:	462b      	mov	r3, r5
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 fca6 	bl	80002c8 <__aeabi_dsub>
 800a97c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a980:	e9ca 0100 	strd	r0, r1, [sl]
 800a984:	e694      	b.n	800a6b0 <__ieee754_rem_pio2+0x28>
 800a986:	bf00      	nop
 800a988:	54400000 	.word	0x54400000
 800a98c:	3ff921fb 	.word	0x3ff921fb
 800a990:	1a626331 	.word	0x1a626331
 800a994:	3dd0b461 	.word	0x3dd0b461
 800a998:	1a600000 	.word	0x1a600000
 800a99c:	3dd0b461 	.word	0x3dd0b461
 800a9a0:	2e037073 	.word	0x2e037073
 800a9a4:	3ba3198a 	.word	0x3ba3198a
 800a9a8:	6dc9c883 	.word	0x6dc9c883
 800a9ac:	3fe45f30 	.word	0x3fe45f30
 800a9b0:	2e000000 	.word	0x2e000000
 800a9b4:	3ba3198a 	.word	0x3ba3198a
 800a9b8:	252049c1 	.word	0x252049c1
 800a9bc:	397b839a 	.word	0x397b839a
 800a9c0:	3fe921fb 	.word	0x3fe921fb
 800a9c4:	4002d97b 	.word	0x4002d97b
 800a9c8:	3ff921fb 	.word	0x3ff921fb
 800a9cc:	413921fb 	.word	0x413921fb
 800a9d0:	3fe00000 	.word	0x3fe00000
 800a9d4:	0800b750 	.word	0x0800b750
 800a9d8:	7fefffff 	.word	0x7fefffff
 800a9dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a9e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a9e4:	ee10 0a10 	vmov	r0, s0
 800a9e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a9ec:	ee10 6a10 	vmov	r6, s0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	f7f6 f8bb 	bl	8000b6c <__aeabi_d2iz>
 800a9f6:	f7f5 fdb5 	bl	8000564 <__aeabi_i2d>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa06:	f7f5 fc5f 	bl	80002c8 <__aeabi_dsub>
 800aa0a:	4b22      	ldr	r3, [pc, #136]	; (800aa94 <__ieee754_rem_pio2+0x40c>)
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f7f5 fe13 	bl	8000638 <__aeabi_dmul>
 800aa12:	460f      	mov	r7, r1
 800aa14:	4606      	mov	r6, r0
 800aa16:	f7f6 f8a9 	bl	8000b6c <__aeabi_d2iz>
 800aa1a:	f7f5 fda3 	bl	8000564 <__aeabi_i2d>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa2a:	f7f5 fc4d 	bl	80002c8 <__aeabi_dsub>
 800aa2e:	4b19      	ldr	r3, [pc, #100]	; (800aa94 <__ieee754_rem_pio2+0x40c>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	f7f5 fe01 	bl	8000638 <__aeabi_dmul>
 800aa36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa3a:	ad04      	add	r5, sp, #16
 800aa3c:	f04f 0803 	mov.w	r8, #3
 800aa40:	46a9      	mov	r9, r5
 800aa42:	2600      	movs	r6, #0
 800aa44:	2700      	movs	r7, #0
 800aa46:	4632      	mov	r2, r6
 800aa48:	463b      	mov	r3, r7
 800aa4a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aa4e:	46c3      	mov	fp, r8
 800aa50:	3d08      	subs	r5, #8
 800aa52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800aa56:	f7f6 f857 	bl	8000b08 <__aeabi_dcmpeq>
 800aa5a:	2800      	cmp	r0, #0
 800aa5c:	d1f3      	bne.n	800aa46 <__ieee754_rem_pio2+0x3be>
 800aa5e:	4b0e      	ldr	r3, [pc, #56]	; (800aa98 <__ieee754_rem_pio2+0x410>)
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	2302      	movs	r3, #2
 800aa64:	9300      	str	r3, [sp, #0]
 800aa66:	4622      	mov	r2, r4
 800aa68:	465b      	mov	r3, fp
 800aa6a:	4651      	mov	r1, sl
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	f000 f8df 	bl	800ac30 <__kernel_rem_pio2>
 800aa72:	9b02      	ldr	r3, [sp, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	4683      	mov	fp, r0
 800aa78:	f6bf ae46 	bge.w	800a708 <__ieee754_rem_pio2+0x80>
 800aa7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aa80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa84:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa88:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aa8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa90:	e73a      	b.n	800a908 <__ieee754_rem_pio2+0x280>
 800aa92:	bf00      	nop
 800aa94:	41700000 	.word	0x41700000
 800aa98:	0800b7d0 	.word	0x0800b7d0
 800aa9c:	00000000 	.word	0x00000000

0800aaa0 <__kernel_cos>:
 800aaa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	ec57 6b10 	vmov	r6, r7, d0
 800aaa8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800aaac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800aab0:	ed8d 1b00 	vstr	d1, [sp]
 800aab4:	da07      	bge.n	800aac6 <__kernel_cos+0x26>
 800aab6:	ee10 0a10 	vmov	r0, s0
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f6 f856 	bl	8000b6c <__aeabi_d2iz>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f000 8088 	beq.w	800abd6 <__kernel_cos+0x136>
 800aac6:	4632      	mov	r2, r6
 800aac8:	463b      	mov	r3, r7
 800aaca:	4630      	mov	r0, r6
 800aacc:	4639      	mov	r1, r7
 800aace:	f7f5 fdb3 	bl	8000638 <__aeabi_dmul>
 800aad2:	4b51      	ldr	r3, [pc, #324]	; (800ac18 <__kernel_cos+0x178>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	4604      	mov	r4, r0
 800aad8:	460d      	mov	r5, r1
 800aada:	f7f5 fdad 	bl	8000638 <__aeabi_dmul>
 800aade:	a340      	add	r3, pc, #256	; (adr r3, 800abe0 <__kernel_cos+0x140>)
 800aae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae4:	4682      	mov	sl, r0
 800aae6:	468b      	mov	fp, r1
 800aae8:	4620      	mov	r0, r4
 800aaea:	4629      	mov	r1, r5
 800aaec:	f7f5 fda4 	bl	8000638 <__aeabi_dmul>
 800aaf0:	a33d      	add	r3, pc, #244	; (adr r3, 800abe8 <__kernel_cos+0x148>)
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	f7f5 fbe9 	bl	80002cc <__adddf3>
 800aafa:	4622      	mov	r2, r4
 800aafc:	462b      	mov	r3, r5
 800aafe:	f7f5 fd9b 	bl	8000638 <__aeabi_dmul>
 800ab02:	a33b      	add	r3, pc, #236	; (adr r3, 800abf0 <__kernel_cos+0x150>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fbde 	bl	80002c8 <__aeabi_dsub>
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	462b      	mov	r3, r5
 800ab10:	f7f5 fd92 	bl	8000638 <__aeabi_dmul>
 800ab14:	a338      	add	r3, pc, #224	; (adr r3, 800abf8 <__kernel_cos+0x158>)
 800ab16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1a:	f7f5 fbd7 	bl	80002cc <__adddf3>
 800ab1e:	4622      	mov	r2, r4
 800ab20:	462b      	mov	r3, r5
 800ab22:	f7f5 fd89 	bl	8000638 <__aeabi_dmul>
 800ab26:	a336      	add	r3, pc, #216	; (adr r3, 800ac00 <__kernel_cos+0x160>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fbcc 	bl	80002c8 <__aeabi_dsub>
 800ab30:	4622      	mov	r2, r4
 800ab32:	462b      	mov	r3, r5
 800ab34:	f7f5 fd80 	bl	8000638 <__aeabi_dmul>
 800ab38:	a333      	add	r3, pc, #204	; (adr r3, 800ac08 <__kernel_cos+0x168>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fbc5 	bl	80002cc <__adddf3>
 800ab42:	4622      	mov	r2, r4
 800ab44:	462b      	mov	r3, r5
 800ab46:	f7f5 fd77 	bl	8000638 <__aeabi_dmul>
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	f7f5 fd73 	bl	8000638 <__aeabi_dmul>
 800ab52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab56:	4604      	mov	r4, r0
 800ab58:	460d      	mov	r5, r1
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	4639      	mov	r1, r7
 800ab5e:	f7f5 fd6b 	bl	8000638 <__aeabi_dmul>
 800ab62:	460b      	mov	r3, r1
 800ab64:	4602      	mov	r2, r0
 800ab66:	4629      	mov	r1, r5
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7f5 fbad 	bl	80002c8 <__aeabi_dsub>
 800ab6e:	4b2b      	ldr	r3, [pc, #172]	; (800ac1c <__kernel_cos+0x17c>)
 800ab70:	4598      	cmp	r8, r3
 800ab72:	4606      	mov	r6, r0
 800ab74:	460f      	mov	r7, r1
 800ab76:	dc10      	bgt.n	800ab9a <__kernel_cos+0xfa>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4650      	mov	r0, sl
 800ab7e:	4659      	mov	r1, fp
 800ab80:	f7f5 fba2 	bl	80002c8 <__aeabi_dsub>
 800ab84:	460b      	mov	r3, r1
 800ab86:	4926      	ldr	r1, [pc, #152]	; (800ac20 <__kernel_cos+0x180>)
 800ab88:	4602      	mov	r2, r0
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f7f5 fb9c 	bl	80002c8 <__aeabi_dsub>
 800ab90:	ec41 0b10 	vmov	d0, r0, r1
 800ab94:	b003      	add	sp, #12
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	4b22      	ldr	r3, [pc, #136]	; (800ac24 <__kernel_cos+0x184>)
 800ab9c:	4920      	ldr	r1, [pc, #128]	; (800ac20 <__kernel_cos+0x180>)
 800ab9e:	4598      	cmp	r8, r3
 800aba0:	bfcc      	ite	gt
 800aba2:	4d21      	ldrgt	r5, [pc, #132]	; (800ac28 <__kernel_cos+0x188>)
 800aba4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aba8:	2400      	movs	r4, #0
 800abaa:	4622      	mov	r2, r4
 800abac:	462b      	mov	r3, r5
 800abae:	2000      	movs	r0, #0
 800abb0:	f7f5 fb8a 	bl	80002c8 <__aeabi_dsub>
 800abb4:	4622      	mov	r2, r4
 800abb6:	4680      	mov	r8, r0
 800abb8:	4689      	mov	r9, r1
 800abba:	462b      	mov	r3, r5
 800abbc:	4650      	mov	r0, sl
 800abbe:	4659      	mov	r1, fp
 800abc0:	f7f5 fb82 	bl	80002c8 <__aeabi_dsub>
 800abc4:	4632      	mov	r2, r6
 800abc6:	463b      	mov	r3, r7
 800abc8:	f7f5 fb7e 	bl	80002c8 <__aeabi_dsub>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4640      	mov	r0, r8
 800abd2:	4649      	mov	r1, r9
 800abd4:	e7da      	b.n	800ab8c <__kernel_cos+0xec>
 800abd6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ac10 <__kernel_cos+0x170>
 800abda:	e7db      	b.n	800ab94 <__kernel_cos+0xf4>
 800abdc:	f3af 8000 	nop.w
 800abe0:	be8838d4 	.word	0xbe8838d4
 800abe4:	bda8fae9 	.word	0xbda8fae9
 800abe8:	bdb4b1c4 	.word	0xbdb4b1c4
 800abec:	3e21ee9e 	.word	0x3e21ee9e
 800abf0:	809c52ad 	.word	0x809c52ad
 800abf4:	3e927e4f 	.word	0x3e927e4f
 800abf8:	19cb1590 	.word	0x19cb1590
 800abfc:	3efa01a0 	.word	0x3efa01a0
 800ac00:	16c15177 	.word	0x16c15177
 800ac04:	3f56c16c 	.word	0x3f56c16c
 800ac08:	5555554c 	.word	0x5555554c
 800ac0c:	3fa55555 	.word	0x3fa55555
 800ac10:	00000000 	.word	0x00000000
 800ac14:	3ff00000 	.word	0x3ff00000
 800ac18:	3fe00000 	.word	0x3fe00000
 800ac1c:	3fd33332 	.word	0x3fd33332
 800ac20:	3ff00000 	.word	0x3ff00000
 800ac24:	3fe90000 	.word	0x3fe90000
 800ac28:	3fd20000 	.word	0x3fd20000
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <__kernel_rem_pio2>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	ed2d 8b02 	vpush	{d8}
 800ac38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ac3c:	f112 0f14 	cmn.w	r2, #20
 800ac40:	9308      	str	r3, [sp, #32]
 800ac42:	9101      	str	r1, [sp, #4]
 800ac44:	4bc6      	ldr	r3, [pc, #792]	; (800af60 <__kernel_rem_pio2+0x330>)
 800ac46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ac48:	9009      	str	r0, [sp, #36]	; 0x24
 800ac4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	9b08      	ldr	r3, [sp, #32]
 800ac52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ac56:	bfa8      	it	ge
 800ac58:	1ed4      	subge	r4, r2, #3
 800ac5a:	9306      	str	r3, [sp, #24]
 800ac5c:	bfb2      	itee	lt
 800ac5e:	2400      	movlt	r4, #0
 800ac60:	2318      	movge	r3, #24
 800ac62:	fb94 f4f3 	sdivge	r4, r4, r3
 800ac66:	f06f 0317 	mvn.w	r3, #23
 800ac6a:	fb04 3303 	mla	r3, r4, r3, r3
 800ac6e:	eb03 0a02 	add.w	sl, r3, r2
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	9a06      	ldr	r2, [sp, #24]
 800ac76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800af50 <__kernel_rem_pio2+0x320>
 800ac7a:	eb03 0802 	add.w	r8, r3, r2
 800ac7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ac80:	1aa7      	subs	r7, r4, r2
 800ac82:	ae20      	add	r6, sp, #128	; 0x80
 800ac84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac88:	2500      	movs	r5, #0
 800ac8a:	4545      	cmp	r5, r8
 800ac8c:	dd18      	ble.n	800acc0 <__kernel_rem_pio2+0x90>
 800ac8e:	9b08      	ldr	r3, [sp, #32]
 800ac90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ac94:	aa20      	add	r2, sp, #128	; 0x80
 800ac96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800af50 <__kernel_rem_pio2+0x320>
 800ac9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac9e:	f1c3 0301 	rsb	r3, r3, #1
 800aca2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800aca6:	9307      	str	r3, [sp, #28]
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	9a04      	ldr	r2, [sp, #16]
 800acac:	4443      	add	r3, r8
 800acae:	429a      	cmp	r2, r3
 800acb0:	db2f      	blt.n	800ad12 <__kernel_rem_pio2+0xe2>
 800acb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800acba:	462f      	mov	r7, r5
 800acbc:	2600      	movs	r6, #0
 800acbe:	e01b      	b.n	800acf8 <__kernel_rem_pio2+0xc8>
 800acc0:	42ef      	cmn	r7, r5
 800acc2:	d407      	bmi.n	800acd4 <__kernel_rem_pio2+0xa4>
 800acc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800acc8:	f7f5 fc4c 	bl	8000564 <__aeabi_i2d>
 800accc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800acd0:	3501      	adds	r5, #1
 800acd2:	e7da      	b.n	800ac8a <__kernel_rem_pio2+0x5a>
 800acd4:	ec51 0b18 	vmov	r0, r1, d8
 800acd8:	e7f8      	b.n	800accc <__kernel_rem_pio2+0x9c>
 800acda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ace2:	f7f5 fca9 	bl	8000638 <__aeabi_dmul>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acee:	f7f5 faed 	bl	80002cc <__adddf3>
 800acf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acf6:	3601      	adds	r6, #1
 800acf8:	9b06      	ldr	r3, [sp, #24]
 800acfa:	429e      	cmp	r6, r3
 800acfc:	f1a7 0708 	sub.w	r7, r7, #8
 800ad00:	ddeb      	ble.n	800acda <__kernel_rem_pio2+0xaa>
 800ad02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad06:	3508      	adds	r5, #8
 800ad08:	ecab 7b02 	vstmia	fp!, {d7}
 800ad0c:	f108 0801 	add.w	r8, r8, #1
 800ad10:	e7ca      	b.n	800aca8 <__kernel_rem_pio2+0x78>
 800ad12:	9b04      	ldr	r3, [sp, #16]
 800ad14:	aa0c      	add	r2, sp, #48	; 0x30
 800ad16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ad1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad22:	9c04      	ldr	r4, [sp, #16]
 800ad24:	930a      	str	r3, [sp, #40]	; 0x28
 800ad26:	ab98      	add	r3, sp, #608	; 0x260
 800ad28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ad34:	f8cd b008 	str.w	fp, [sp, #8]
 800ad38:	4625      	mov	r5, r4
 800ad3a:	2d00      	cmp	r5, #0
 800ad3c:	dc78      	bgt.n	800ae30 <__kernel_rem_pio2+0x200>
 800ad3e:	ec47 6b10 	vmov	d0, r6, r7
 800ad42:	4650      	mov	r0, sl
 800ad44:	f000 fbfc 	bl	800b540 <scalbn>
 800ad48:	ec57 6b10 	vmov	r6, r7, d0
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ad52:	ee10 0a10 	vmov	r0, s0
 800ad56:	4639      	mov	r1, r7
 800ad58:	f7f5 fc6e 	bl	8000638 <__aeabi_dmul>
 800ad5c:	ec41 0b10 	vmov	d0, r0, r1
 800ad60:	f000 fb6e 	bl	800b440 <floor>
 800ad64:	4b7f      	ldr	r3, [pc, #508]	; (800af64 <__kernel_rem_pio2+0x334>)
 800ad66:	ec51 0b10 	vmov	r0, r1, d0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f7f5 fc64 	bl	8000638 <__aeabi_dmul>
 800ad70:	4602      	mov	r2, r0
 800ad72:	460b      	mov	r3, r1
 800ad74:	4630      	mov	r0, r6
 800ad76:	4639      	mov	r1, r7
 800ad78:	f7f5 faa6 	bl	80002c8 <__aeabi_dsub>
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	4606      	mov	r6, r0
 800ad80:	f7f5 fef4 	bl	8000b6c <__aeabi_d2iz>
 800ad84:	9007      	str	r0, [sp, #28]
 800ad86:	f7f5 fbed 	bl	8000564 <__aeabi_i2d>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4630      	mov	r0, r6
 800ad90:	4639      	mov	r1, r7
 800ad92:	f7f5 fa99 	bl	80002c8 <__aeabi_dsub>
 800ad96:	f1ba 0f00 	cmp.w	sl, #0
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	dd70      	ble.n	800ae82 <__kernel_rem_pio2+0x252>
 800ada0:	1e62      	subs	r2, r4, #1
 800ada2:	ab0c      	add	r3, sp, #48	; 0x30
 800ada4:	9d07      	ldr	r5, [sp, #28]
 800ada6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800adaa:	f1ca 0118 	rsb	r1, sl, #24
 800adae:	fa40 f301 	asr.w	r3, r0, r1
 800adb2:	441d      	add	r5, r3
 800adb4:	408b      	lsls	r3, r1
 800adb6:	1ac0      	subs	r0, r0, r3
 800adb8:	ab0c      	add	r3, sp, #48	; 0x30
 800adba:	9507      	str	r5, [sp, #28]
 800adbc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800adc0:	f1ca 0317 	rsb	r3, sl, #23
 800adc4:	fa40 f303 	asr.w	r3, r0, r3
 800adc8:	9302      	str	r3, [sp, #8]
 800adca:	9b02      	ldr	r3, [sp, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	dd66      	ble.n	800ae9e <__kernel_rem_pio2+0x26e>
 800add0:	9b07      	ldr	r3, [sp, #28]
 800add2:	2200      	movs	r2, #0
 800add4:	3301      	adds	r3, #1
 800add6:	9307      	str	r3, [sp, #28]
 800add8:	4615      	mov	r5, r2
 800adda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800adde:	4294      	cmp	r4, r2
 800ade0:	f300 8099 	bgt.w	800af16 <__kernel_rem_pio2+0x2e6>
 800ade4:	f1ba 0f00 	cmp.w	sl, #0
 800ade8:	dd07      	ble.n	800adfa <__kernel_rem_pio2+0x1ca>
 800adea:	f1ba 0f01 	cmp.w	sl, #1
 800adee:	f000 80a5 	beq.w	800af3c <__kernel_rem_pio2+0x30c>
 800adf2:	f1ba 0f02 	cmp.w	sl, #2
 800adf6:	f000 80c1 	beq.w	800af7c <__kernel_rem_pio2+0x34c>
 800adfa:	9b02      	ldr	r3, [sp, #8]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d14e      	bne.n	800ae9e <__kernel_rem_pio2+0x26e>
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4958      	ldr	r1, [pc, #352]	; (800af68 <__kernel_rem_pio2+0x338>)
 800ae06:	2000      	movs	r0, #0
 800ae08:	f7f5 fa5e 	bl	80002c8 <__aeabi_dsub>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	2d00      	cmp	r5, #0
 800ae12:	d044      	beq.n	800ae9e <__kernel_rem_pio2+0x26e>
 800ae14:	4650      	mov	r0, sl
 800ae16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800af58 <__kernel_rem_pio2+0x328>
 800ae1a:	f000 fb91 	bl	800b540 <scalbn>
 800ae1e:	4630      	mov	r0, r6
 800ae20:	4639      	mov	r1, r7
 800ae22:	ec53 2b10 	vmov	r2, r3, d0
 800ae26:	f7f5 fa4f 	bl	80002c8 <__aeabi_dsub>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	e036      	b.n	800ae9e <__kernel_rem_pio2+0x26e>
 800ae30:	4b4e      	ldr	r3, [pc, #312]	; (800af6c <__kernel_rem_pio2+0x33c>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	4630      	mov	r0, r6
 800ae36:	4639      	mov	r1, r7
 800ae38:	f7f5 fbfe 	bl	8000638 <__aeabi_dmul>
 800ae3c:	f7f5 fe96 	bl	8000b6c <__aeabi_d2iz>
 800ae40:	f7f5 fb90 	bl	8000564 <__aeabi_i2d>
 800ae44:	4b4a      	ldr	r3, [pc, #296]	; (800af70 <__kernel_rem_pio2+0x340>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	4680      	mov	r8, r0
 800ae4a:	4689      	mov	r9, r1
 800ae4c:	f7f5 fbf4 	bl	8000638 <__aeabi_dmul>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	4630      	mov	r0, r6
 800ae56:	4639      	mov	r1, r7
 800ae58:	f7f5 fa36 	bl	80002c8 <__aeabi_dsub>
 800ae5c:	f7f5 fe86 	bl	8000b6c <__aeabi_d2iz>
 800ae60:	9b02      	ldr	r3, [sp, #8]
 800ae62:	f843 0b04 	str.w	r0, [r3], #4
 800ae66:	3d01      	subs	r5, #1
 800ae68:	9302      	str	r3, [sp, #8]
 800ae6a:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	4640      	mov	r0, r8
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fa28 	bl	80002cc <__adddf3>
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	e75b      	b.n	800ad3a <__kernel_rem_pio2+0x10a>
 800ae82:	d105      	bne.n	800ae90 <__kernel_rem_pio2+0x260>
 800ae84:	1e63      	subs	r3, r4, #1
 800ae86:	aa0c      	add	r2, sp, #48	; 0x30
 800ae88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae8c:	15c3      	asrs	r3, r0, #23
 800ae8e:	e79b      	b.n	800adc8 <__kernel_rem_pio2+0x198>
 800ae90:	4b38      	ldr	r3, [pc, #224]	; (800af74 <__kernel_rem_pio2+0x344>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	f7f5 fe56 	bl	8000b44 <__aeabi_dcmpge>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d139      	bne.n	800af10 <__kernel_rem_pio2+0x2e0>
 800ae9c:	9002      	str	r0, [sp, #8]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2300      	movs	r3, #0
 800aea2:	4630      	mov	r0, r6
 800aea4:	4639      	mov	r1, r7
 800aea6:	f7f5 fe2f 	bl	8000b08 <__aeabi_dcmpeq>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	f000 80b4 	beq.w	800b018 <__kernel_rem_pio2+0x3e8>
 800aeb0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800aeb4:	465b      	mov	r3, fp
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	9904      	ldr	r1, [sp, #16]
 800aeba:	428b      	cmp	r3, r1
 800aebc:	da65      	bge.n	800af8a <__kernel_rem_pio2+0x35a>
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	d07b      	beq.n	800afba <__kernel_rem_pio2+0x38a>
 800aec2:	ab0c      	add	r3, sp, #48	; 0x30
 800aec4:	f1aa 0a18 	sub.w	sl, sl, #24
 800aec8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 80a0 	beq.w	800b012 <__kernel_rem_pio2+0x3e2>
 800aed2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800af58 <__kernel_rem_pio2+0x328>
 800aed6:	4650      	mov	r0, sl
 800aed8:	f000 fb32 	bl	800b540 <scalbn>
 800aedc:	4f23      	ldr	r7, [pc, #140]	; (800af6c <__kernel_rem_pio2+0x33c>)
 800aede:	ec55 4b10 	vmov	r4, r5, d0
 800aee2:	46d8      	mov	r8, fp
 800aee4:	2600      	movs	r6, #0
 800aee6:	f1b8 0f00 	cmp.w	r8, #0
 800aeea:	f280 80cf 	bge.w	800b08c <__kernel_rem_pio2+0x45c>
 800aeee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800af50 <__kernel_rem_pio2+0x320>
 800aef2:	465f      	mov	r7, fp
 800aef4:	f04f 0800 	mov.w	r8, #0
 800aef8:	2f00      	cmp	r7, #0
 800aefa:	f2c0 80fd 	blt.w	800b0f8 <__kernel_rem_pio2+0x4c8>
 800aefe:	ab70      	add	r3, sp, #448	; 0x1c0
 800af00:	f8df a074 	ldr.w	sl, [pc, #116]	; 800af78 <__kernel_rem_pio2+0x348>
 800af04:	ec55 4b18 	vmov	r4, r5, d8
 800af08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800af0c:	2600      	movs	r6, #0
 800af0e:	e0e5      	b.n	800b0dc <__kernel_rem_pio2+0x4ac>
 800af10:	2302      	movs	r3, #2
 800af12:	9302      	str	r3, [sp, #8]
 800af14:	e75c      	b.n	800add0 <__kernel_rem_pio2+0x1a0>
 800af16:	f8db 3000 	ldr.w	r3, [fp]
 800af1a:	b955      	cbnz	r5, 800af32 <__kernel_rem_pio2+0x302>
 800af1c:	b123      	cbz	r3, 800af28 <__kernel_rem_pio2+0x2f8>
 800af1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af22:	f8cb 3000 	str.w	r3, [fp]
 800af26:	2301      	movs	r3, #1
 800af28:	3201      	adds	r2, #1
 800af2a:	f10b 0b04 	add.w	fp, fp, #4
 800af2e:	461d      	mov	r5, r3
 800af30:	e755      	b.n	800adde <__kernel_rem_pio2+0x1ae>
 800af32:	1acb      	subs	r3, r1, r3
 800af34:	f8cb 3000 	str.w	r3, [fp]
 800af38:	462b      	mov	r3, r5
 800af3a:	e7f5      	b.n	800af28 <__kernel_rem_pio2+0x2f8>
 800af3c:	1e62      	subs	r2, r4, #1
 800af3e:	ab0c      	add	r3, sp, #48	; 0x30
 800af40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800af48:	a90c      	add	r1, sp, #48	; 0x30
 800af4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af4e:	e754      	b.n	800adfa <__kernel_rem_pio2+0x1ca>
	...
 800af5c:	3ff00000 	.word	0x3ff00000
 800af60:	0800b918 	.word	0x0800b918
 800af64:	40200000 	.word	0x40200000
 800af68:	3ff00000 	.word	0x3ff00000
 800af6c:	3e700000 	.word	0x3e700000
 800af70:	41700000 	.word	0x41700000
 800af74:	3fe00000 	.word	0x3fe00000
 800af78:	0800b8d8 	.word	0x0800b8d8
 800af7c:	1e62      	subs	r2, r4, #1
 800af7e:	ab0c      	add	r3, sp, #48	; 0x30
 800af80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af88:	e7de      	b.n	800af48 <__kernel_rem_pio2+0x318>
 800af8a:	a90c      	add	r1, sp, #48	; 0x30
 800af8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af90:	3b01      	subs	r3, #1
 800af92:	430a      	orrs	r2, r1
 800af94:	e790      	b.n	800aeb8 <__kernel_rem_pio2+0x288>
 800af96:	3301      	adds	r3, #1
 800af98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af9c:	2900      	cmp	r1, #0
 800af9e:	d0fa      	beq.n	800af96 <__kernel_rem_pio2+0x366>
 800afa0:	9a08      	ldr	r2, [sp, #32]
 800afa2:	18e3      	adds	r3, r4, r3
 800afa4:	18a6      	adds	r6, r4, r2
 800afa6:	aa20      	add	r2, sp, #128	; 0x80
 800afa8:	1c65      	adds	r5, r4, #1
 800afaa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	9b02      	ldr	r3, [sp, #8]
 800afb2:	42ab      	cmp	r3, r5
 800afb4:	da04      	bge.n	800afc0 <__kernel_rem_pio2+0x390>
 800afb6:	461c      	mov	r4, r3
 800afb8:	e6b5      	b.n	800ad26 <__kernel_rem_pio2+0xf6>
 800afba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afbc:	2301      	movs	r3, #1
 800afbe:	e7eb      	b.n	800af98 <__kernel_rem_pio2+0x368>
 800afc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afc6:	f7f5 facd 	bl	8000564 <__aeabi_i2d>
 800afca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	46b3      	mov	fp, r6
 800afd2:	461c      	mov	r4, r3
 800afd4:	2700      	movs	r7, #0
 800afd6:	f04f 0800 	mov.w	r8, #0
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	429f      	cmp	r7, r3
 800afe2:	dd06      	ble.n	800aff2 <__kernel_rem_pio2+0x3c2>
 800afe4:	ab70      	add	r3, sp, #448	; 0x1c0
 800afe6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800afea:	e9c3 8900 	strd	r8, r9, [r3]
 800afee:	3501      	adds	r5, #1
 800aff0:	e7de      	b.n	800afb0 <__kernel_rem_pio2+0x380>
 800aff2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800aff6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800affa:	f7f5 fb1d 	bl	8000638 <__aeabi_dmul>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	4640      	mov	r0, r8
 800b004:	4649      	mov	r1, r9
 800b006:	f7f5 f961 	bl	80002cc <__adddf3>
 800b00a:	3701      	adds	r7, #1
 800b00c:	4680      	mov	r8, r0
 800b00e:	4689      	mov	r9, r1
 800b010:	e7e5      	b.n	800afde <__kernel_rem_pio2+0x3ae>
 800b012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b016:	e754      	b.n	800aec2 <__kernel_rem_pio2+0x292>
 800b018:	ec47 6b10 	vmov	d0, r6, r7
 800b01c:	f1ca 0000 	rsb	r0, sl, #0
 800b020:	f000 fa8e 	bl	800b540 <scalbn>
 800b024:	ec57 6b10 	vmov	r6, r7, d0
 800b028:	4b9f      	ldr	r3, [pc, #636]	; (800b2a8 <__kernel_rem_pio2+0x678>)
 800b02a:	ee10 0a10 	vmov	r0, s0
 800b02e:	2200      	movs	r2, #0
 800b030:	4639      	mov	r1, r7
 800b032:	f7f5 fd87 	bl	8000b44 <__aeabi_dcmpge>
 800b036:	b300      	cbz	r0, 800b07a <__kernel_rem_pio2+0x44a>
 800b038:	4b9c      	ldr	r3, [pc, #624]	; (800b2ac <__kernel_rem_pio2+0x67c>)
 800b03a:	2200      	movs	r2, #0
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	f7f5 fafa 	bl	8000638 <__aeabi_dmul>
 800b044:	f7f5 fd92 	bl	8000b6c <__aeabi_d2iz>
 800b048:	4605      	mov	r5, r0
 800b04a:	f7f5 fa8b 	bl	8000564 <__aeabi_i2d>
 800b04e:	4b96      	ldr	r3, [pc, #600]	; (800b2a8 <__kernel_rem_pio2+0x678>)
 800b050:	2200      	movs	r2, #0
 800b052:	f7f5 faf1 	bl	8000638 <__aeabi_dmul>
 800b056:	460b      	mov	r3, r1
 800b058:	4602      	mov	r2, r0
 800b05a:	4639      	mov	r1, r7
 800b05c:	4630      	mov	r0, r6
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	f7f5 fd83 	bl	8000b6c <__aeabi_d2iz>
 800b066:	f104 0b01 	add.w	fp, r4, #1
 800b06a:	ab0c      	add	r3, sp, #48	; 0x30
 800b06c:	f10a 0a18 	add.w	sl, sl, #24
 800b070:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b074:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b078:	e72b      	b.n	800aed2 <__kernel_rem_pio2+0x2a2>
 800b07a:	4630      	mov	r0, r6
 800b07c:	4639      	mov	r1, r7
 800b07e:	f7f5 fd75 	bl	8000b6c <__aeabi_d2iz>
 800b082:	ab0c      	add	r3, sp, #48	; 0x30
 800b084:	46a3      	mov	fp, r4
 800b086:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b08a:	e722      	b.n	800aed2 <__kernel_rem_pio2+0x2a2>
 800b08c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b08e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b092:	ab0c      	add	r3, sp, #48	; 0x30
 800b094:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b098:	f7f5 fa64 	bl	8000564 <__aeabi_i2d>
 800b09c:	4622      	mov	r2, r4
 800b09e:	462b      	mov	r3, r5
 800b0a0:	f7f5 faca 	bl	8000638 <__aeabi_dmul>
 800b0a4:	4632      	mov	r2, r6
 800b0a6:	e9c9 0100 	strd	r0, r1, [r9]
 800b0aa:	463b      	mov	r3, r7
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 fac2 	bl	8000638 <__aeabi_dmul>
 800b0b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b0b8:	4604      	mov	r4, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	e713      	b.n	800aee6 <__kernel_rem_pio2+0x2b6>
 800b0be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b0c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b0c6:	f7f5 fab7 	bl	8000638 <__aeabi_dmul>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	f7f5 f8fb 	bl	80002cc <__adddf3>
 800b0d6:	3601      	adds	r6, #1
 800b0d8:	4604      	mov	r4, r0
 800b0da:	460d      	mov	r5, r1
 800b0dc:	9b04      	ldr	r3, [sp, #16]
 800b0de:	429e      	cmp	r6, r3
 800b0e0:	dc01      	bgt.n	800b0e6 <__kernel_rem_pio2+0x4b6>
 800b0e2:	45b0      	cmp	r8, r6
 800b0e4:	daeb      	bge.n	800b0be <__kernel_rem_pio2+0x48e>
 800b0e6:	ab48      	add	r3, sp, #288	; 0x120
 800b0e8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0ec:	e9c3 4500 	strd	r4, r5, [r3]
 800b0f0:	3f01      	subs	r7, #1
 800b0f2:	f108 0801 	add.w	r8, r8, #1
 800b0f6:	e6ff      	b.n	800aef8 <__kernel_rem_pio2+0x2c8>
 800b0f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	dc0b      	bgt.n	800b116 <__kernel_rem_pio2+0x4e6>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dc6e      	bgt.n	800b1e0 <__kernel_rem_pio2+0x5b0>
 800b102:	d045      	beq.n	800b190 <__kernel_rem_pio2+0x560>
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	f003 0007 	and.w	r0, r3, #7
 800b10a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b10e:	ecbd 8b02 	vpop	{d8}
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d1f3      	bne.n	800b104 <__kernel_rem_pio2+0x4d4>
 800b11c:	ab48      	add	r3, sp, #288	; 0x120
 800b11e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b122:	46d0      	mov	r8, sl
 800b124:	46d9      	mov	r9, fp
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	f1a8 0808 	sub.w	r8, r8, #8
 800b12e:	dc64      	bgt.n	800b1fa <__kernel_rem_pio2+0x5ca>
 800b130:	465c      	mov	r4, fp
 800b132:	2c01      	cmp	r4, #1
 800b134:	f1aa 0a08 	sub.w	sl, sl, #8
 800b138:	dc7e      	bgt.n	800b238 <__kernel_rem_pio2+0x608>
 800b13a:	2000      	movs	r0, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	f1bb 0f01 	cmp.w	fp, #1
 800b142:	f300 8097 	bgt.w	800b274 <__kernel_rem_pio2+0x644>
 800b146:	9b02      	ldr	r3, [sp, #8]
 800b148:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b14c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b150:	2b00      	cmp	r3, #0
 800b152:	f040 8099 	bne.w	800b288 <__kernel_rem_pio2+0x658>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	e9c3 5600 	strd	r5, r6, [r3]
 800b15c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b160:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b164:	e7ce      	b.n	800b104 <__kernel_rem_pio2+0x4d4>
 800b166:	ab48      	add	r3, sp, #288	; 0x120
 800b168:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 f8ac 	bl	80002cc <__adddf3>
 800b174:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b178:	f1bb 0f00 	cmp.w	fp, #0
 800b17c:	daf3      	bge.n	800b166 <__kernel_rem_pio2+0x536>
 800b17e:	9b02      	ldr	r3, [sp, #8]
 800b180:	b113      	cbz	r3, 800b188 <__kernel_rem_pio2+0x558>
 800b182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b186:	4619      	mov	r1, r3
 800b188:	9b01      	ldr	r3, [sp, #4]
 800b18a:	e9c3 0100 	strd	r0, r1, [r3]
 800b18e:	e7b9      	b.n	800b104 <__kernel_rem_pio2+0x4d4>
 800b190:	2000      	movs	r0, #0
 800b192:	2100      	movs	r1, #0
 800b194:	e7f0      	b.n	800b178 <__kernel_rem_pio2+0x548>
 800b196:	ab48      	add	r3, sp, #288	; 0x120
 800b198:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f7f5 f894 	bl	80002cc <__adddf3>
 800b1a4:	3c01      	subs	r4, #1
 800b1a6:	2c00      	cmp	r4, #0
 800b1a8:	daf5      	bge.n	800b196 <__kernel_rem_pio2+0x566>
 800b1aa:	9b02      	ldr	r3, [sp, #8]
 800b1ac:	b1e3      	cbz	r3, 800b1e8 <__kernel_rem_pio2+0x5b8>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b4:	9c01      	ldr	r4, [sp, #4]
 800b1b6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b1c2:	f7f5 f881 	bl	80002c8 <__aeabi_dsub>
 800b1c6:	ad4a      	add	r5, sp, #296	; 0x128
 800b1c8:	2401      	movs	r4, #1
 800b1ca:	45a3      	cmp	fp, r4
 800b1cc:	da0f      	bge.n	800b1ee <__kernel_rem_pio2+0x5be>
 800b1ce:	9b02      	ldr	r3, [sp, #8]
 800b1d0:	b113      	cbz	r3, 800b1d8 <__kernel_rem_pio2+0x5a8>
 800b1d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	9b01      	ldr	r3, [sp, #4]
 800b1da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1de:	e791      	b.n	800b104 <__kernel_rem_pio2+0x4d4>
 800b1e0:	465c      	mov	r4, fp
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	e7de      	b.n	800b1a6 <__kernel_rem_pio2+0x576>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	e7e2      	b.n	800b1b4 <__kernel_rem_pio2+0x584>
 800b1ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b1f2:	f7f5 f86b 	bl	80002cc <__adddf3>
 800b1f6:	3401      	adds	r4, #1
 800b1f8:	e7e7      	b.n	800b1ca <__kernel_rem_pio2+0x59a>
 800b1fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b1fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b202:	4620      	mov	r0, r4
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 f85f 	bl	80002cc <__adddf3>
 800b20e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 f855 	bl	80002c8 <__aeabi_dsub>
 800b21e:	4632      	mov	r2, r6
 800b220:	463b      	mov	r3, r7
 800b222:	f7f5 f853 	bl	80002cc <__adddf3>
 800b226:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b22a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b22e:	ed88 7b00 	vstr	d7, [r8]
 800b232:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b236:	e776      	b.n	800b126 <__kernel_rem_pio2+0x4f6>
 800b238:	e9da 8900 	ldrd	r8, r9, [sl]
 800b23c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b240:	4640      	mov	r0, r8
 800b242:	4632      	mov	r2, r6
 800b244:	463b      	mov	r3, r7
 800b246:	4649      	mov	r1, r9
 800b248:	f7f5 f840 	bl	80002cc <__adddf3>
 800b24c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b250:	4602      	mov	r2, r0
 800b252:	460b      	mov	r3, r1
 800b254:	4640      	mov	r0, r8
 800b256:	4649      	mov	r1, r9
 800b258:	f7f5 f836 	bl	80002c8 <__aeabi_dsub>
 800b25c:	4632      	mov	r2, r6
 800b25e:	463b      	mov	r3, r7
 800b260:	f7f5 f834 	bl	80002cc <__adddf3>
 800b264:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b26c:	ed8a 7b00 	vstr	d7, [sl]
 800b270:	3c01      	subs	r4, #1
 800b272:	e75e      	b.n	800b132 <__kernel_rem_pio2+0x502>
 800b274:	ab48      	add	r3, sp, #288	; 0x120
 800b276:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27e:	f7f5 f825 	bl	80002cc <__adddf3>
 800b282:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b286:	e75a      	b.n	800b13e <__kernel_rem_pio2+0x50e>
 800b288:	9b01      	ldr	r3, [sp, #4]
 800b28a:	9a01      	ldr	r2, [sp, #4]
 800b28c:	601d      	str	r5, [r3, #0]
 800b28e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b292:	605c      	str	r4, [r3, #4]
 800b294:	609f      	str	r7, [r3, #8]
 800b296:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b29a:	60d3      	str	r3, [r2, #12]
 800b29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2a0:	6110      	str	r0, [r2, #16]
 800b2a2:	6153      	str	r3, [r2, #20]
 800b2a4:	e72e      	b.n	800b104 <__kernel_rem_pio2+0x4d4>
 800b2a6:	bf00      	nop
 800b2a8:	41700000 	.word	0x41700000
 800b2ac:	3e700000 	.word	0x3e700000

0800b2b0 <__kernel_sin>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	ed2d 8b04 	vpush	{d8-d9}
 800b2b8:	eeb0 8a41 	vmov.f32	s16, s2
 800b2bc:	eef0 8a61 	vmov.f32	s17, s3
 800b2c0:	ec55 4b10 	vmov	r4, r5, d0
 800b2c4:	b083      	sub	sp, #12
 800b2c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b2ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b2ce:	9001      	str	r0, [sp, #4]
 800b2d0:	da06      	bge.n	800b2e0 <__kernel_sin+0x30>
 800b2d2:	ee10 0a10 	vmov	r0, s0
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f5 fc48 	bl	8000b6c <__aeabi_d2iz>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d051      	beq.n	800b384 <__kernel_sin+0xd4>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 f9a6 	bl	8000638 <__aeabi_dmul>
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 f99e 	bl	8000638 <__aeabi_dmul>
 800b2fc:	a341      	add	r3, pc, #260	; (adr r3, 800b404 <__kernel_sin+0x154>)
 800b2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b302:	4680      	mov	r8, r0
 800b304:	4689      	mov	r9, r1
 800b306:	4650      	mov	r0, sl
 800b308:	4659      	mov	r1, fp
 800b30a:	f7f5 f995 	bl	8000638 <__aeabi_dmul>
 800b30e:	a33f      	add	r3, pc, #252	; (adr r3, 800b40c <__kernel_sin+0x15c>)
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f7f4 ffd8 	bl	80002c8 <__aeabi_dsub>
 800b318:	4652      	mov	r2, sl
 800b31a:	465b      	mov	r3, fp
 800b31c:	f7f5 f98c 	bl	8000638 <__aeabi_dmul>
 800b320:	a33c      	add	r3, pc, #240	; (adr r3, 800b414 <__kernel_sin+0x164>)
 800b322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b326:	f7f4 ffd1 	bl	80002cc <__adddf3>
 800b32a:	4652      	mov	r2, sl
 800b32c:	465b      	mov	r3, fp
 800b32e:	f7f5 f983 	bl	8000638 <__aeabi_dmul>
 800b332:	a33a      	add	r3, pc, #232	; (adr r3, 800b41c <__kernel_sin+0x16c>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ffc6 	bl	80002c8 <__aeabi_dsub>
 800b33c:	4652      	mov	r2, sl
 800b33e:	465b      	mov	r3, fp
 800b340:	f7f5 f97a 	bl	8000638 <__aeabi_dmul>
 800b344:	a337      	add	r3, pc, #220	; (adr r3, 800b424 <__kernel_sin+0x174>)
 800b346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34a:	f7f4 ffbf 	bl	80002cc <__adddf3>
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	b9eb      	cbnz	r3, 800b392 <__kernel_sin+0xe2>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4650      	mov	r0, sl
 800b35c:	4659      	mov	r1, fp
 800b35e:	f7f5 f96b 	bl	8000638 <__aeabi_dmul>
 800b362:	a325      	add	r3, pc, #148	; (adr r3, 800b3f8 <__kernel_sin+0x148>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f4 ffae 	bl	80002c8 <__aeabi_dsub>
 800b36c:	4642      	mov	r2, r8
 800b36e:	464b      	mov	r3, r9
 800b370:	f7f5 f962 	bl	8000638 <__aeabi_dmul>
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f4 ffa6 	bl	80002cc <__adddf3>
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	ec45 4b10 	vmov	d0, r4, r5
 800b388:	b003      	add	sp, #12
 800b38a:	ecbd 8b04 	vpop	{d8-d9}
 800b38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	4b1b      	ldr	r3, [pc, #108]	; (800b400 <__kernel_sin+0x150>)
 800b394:	ec51 0b18 	vmov	r0, r1, d8
 800b398:	2200      	movs	r2, #0
 800b39a:	f7f5 f94d 	bl	8000638 <__aeabi_dmul>
 800b39e:	4632      	mov	r2, r6
 800b3a0:	ec41 0b19 	vmov	d9, r0, r1
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f7f5 f945 	bl	8000638 <__aeabi_dmul>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	ec51 0b19 	vmov	r0, r1, d9
 800b3b6:	f7f4 ff87 	bl	80002c8 <__aeabi_dsub>
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	465b      	mov	r3, fp
 800b3be:	f7f5 f93b 	bl	8000638 <__aeabi_dmul>
 800b3c2:	ec53 2b18 	vmov	r2, r3, d8
 800b3c6:	f7f4 ff7f 	bl	80002c8 <__aeabi_dsub>
 800b3ca:	a30b      	add	r3, pc, #44	; (adr r3, 800b3f8 <__kernel_sin+0x148>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	4606      	mov	r6, r0
 800b3d2:	460f      	mov	r7, r1
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	f7f5 f92e 	bl	8000638 <__aeabi_dmul>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	4639      	mov	r1, r7
 800b3e4:	f7f4 ff72 	bl	80002cc <__adddf3>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	f7f4 ff6a 	bl	80002c8 <__aeabi_dsub>
 800b3f4:	e7c4      	b.n	800b380 <__kernel_sin+0xd0>
 800b3f6:	bf00      	nop
 800b3f8:	55555549 	.word	0x55555549
 800b3fc:	3fc55555 	.word	0x3fc55555
 800b400:	3fe00000 	.word	0x3fe00000
 800b404:	5acfd57c 	.word	0x5acfd57c
 800b408:	3de5d93a 	.word	0x3de5d93a
 800b40c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b410:	3e5ae5e6 	.word	0x3e5ae5e6
 800b414:	57b1fe7d 	.word	0x57b1fe7d
 800b418:	3ec71de3 	.word	0x3ec71de3
 800b41c:	19c161d5 	.word	0x19c161d5
 800b420:	3f2a01a0 	.word	0x3f2a01a0
 800b424:	1110f8a6 	.word	0x1110f8a6
 800b428:	3f811111 	.word	0x3f811111

0800b42c <fabs>:
 800b42c:	ec51 0b10 	vmov	r0, r1, d0
 800b430:	ee10 2a10 	vmov	r2, s0
 800b434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b438:	ec43 2b10 	vmov	d0, r2, r3
 800b43c:	4770      	bx	lr
	...

0800b440 <floor>:
 800b440:	ec51 0b10 	vmov	r0, r1, d0
 800b444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b448:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b44c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b450:	2e13      	cmp	r6, #19
 800b452:	ee10 5a10 	vmov	r5, s0
 800b456:	ee10 8a10 	vmov	r8, s0
 800b45a:	460c      	mov	r4, r1
 800b45c:	dc32      	bgt.n	800b4c4 <floor+0x84>
 800b45e:	2e00      	cmp	r6, #0
 800b460:	da14      	bge.n	800b48c <floor+0x4c>
 800b462:	a333      	add	r3, pc, #204	; (adr r3, 800b530 <floor+0xf0>)
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	f7f4 ff30 	bl	80002cc <__adddf3>
 800b46c:	2200      	movs	r2, #0
 800b46e:	2300      	movs	r3, #0
 800b470:	f7f5 fb72 	bl	8000b58 <__aeabi_dcmpgt>
 800b474:	b138      	cbz	r0, 800b486 <floor+0x46>
 800b476:	2c00      	cmp	r4, #0
 800b478:	da57      	bge.n	800b52a <floor+0xea>
 800b47a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b47e:	431d      	orrs	r5, r3
 800b480:	d001      	beq.n	800b486 <floor+0x46>
 800b482:	4c2d      	ldr	r4, [pc, #180]	; (800b538 <floor+0xf8>)
 800b484:	2500      	movs	r5, #0
 800b486:	4621      	mov	r1, r4
 800b488:	4628      	mov	r0, r5
 800b48a:	e025      	b.n	800b4d8 <floor+0x98>
 800b48c:	4f2b      	ldr	r7, [pc, #172]	; (800b53c <floor+0xfc>)
 800b48e:	4137      	asrs	r7, r6
 800b490:	ea01 0307 	and.w	r3, r1, r7
 800b494:	4303      	orrs	r3, r0
 800b496:	d01f      	beq.n	800b4d8 <floor+0x98>
 800b498:	a325      	add	r3, pc, #148	; (adr r3, 800b530 <floor+0xf0>)
 800b49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49e:	f7f4 ff15 	bl	80002cc <__adddf3>
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f7f5 fb57 	bl	8000b58 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d0eb      	beq.n	800b486 <floor+0x46>
 800b4ae:	2c00      	cmp	r4, #0
 800b4b0:	bfbe      	ittt	lt
 800b4b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b4b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b4ba:	19a4      	addlt	r4, r4, r6
 800b4bc:	ea24 0407 	bic.w	r4, r4, r7
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	e7e0      	b.n	800b486 <floor+0x46>
 800b4c4:	2e33      	cmp	r6, #51	; 0x33
 800b4c6:	dd0b      	ble.n	800b4e0 <floor+0xa0>
 800b4c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b4cc:	d104      	bne.n	800b4d8 <floor+0x98>
 800b4ce:	ee10 2a10 	vmov	r2, s0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	f7f4 fefa 	bl	80002cc <__adddf3>
 800b4d8:	ec41 0b10 	vmov	d0, r0, r1
 800b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4e8:	fa23 f707 	lsr.w	r7, r3, r7
 800b4ec:	4207      	tst	r7, r0
 800b4ee:	d0f3      	beq.n	800b4d8 <floor+0x98>
 800b4f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b530 <floor+0xf0>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fee9 	bl	80002cc <__adddf3>
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	f7f5 fb2b 	bl	8000b58 <__aeabi_dcmpgt>
 800b502:	2800      	cmp	r0, #0
 800b504:	d0bf      	beq.n	800b486 <floor+0x46>
 800b506:	2c00      	cmp	r4, #0
 800b508:	da02      	bge.n	800b510 <floor+0xd0>
 800b50a:	2e14      	cmp	r6, #20
 800b50c:	d103      	bne.n	800b516 <floor+0xd6>
 800b50e:	3401      	adds	r4, #1
 800b510:	ea25 0507 	bic.w	r5, r5, r7
 800b514:	e7b7      	b.n	800b486 <floor+0x46>
 800b516:	2301      	movs	r3, #1
 800b518:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b51c:	fa03 f606 	lsl.w	r6, r3, r6
 800b520:	4435      	add	r5, r6
 800b522:	4545      	cmp	r5, r8
 800b524:	bf38      	it	cc
 800b526:	18e4      	addcc	r4, r4, r3
 800b528:	e7f2      	b.n	800b510 <floor+0xd0>
 800b52a:	2500      	movs	r5, #0
 800b52c:	462c      	mov	r4, r5
 800b52e:	e7aa      	b.n	800b486 <floor+0x46>
 800b530:	8800759c 	.word	0x8800759c
 800b534:	7e37e43c 	.word	0x7e37e43c
 800b538:	bff00000 	.word	0xbff00000
 800b53c:	000fffff 	.word	0x000fffff

0800b540 <scalbn>:
 800b540:	b570      	push	{r4, r5, r6, lr}
 800b542:	ec55 4b10 	vmov	r4, r5, d0
 800b546:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b54a:	4606      	mov	r6, r0
 800b54c:	462b      	mov	r3, r5
 800b54e:	b99a      	cbnz	r2, 800b578 <scalbn+0x38>
 800b550:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b554:	4323      	orrs	r3, r4
 800b556:	d036      	beq.n	800b5c6 <scalbn+0x86>
 800b558:	4b39      	ldr	r3, [pc, #228]	; (800b640 <scalbn+0x100>)
 800b55a:	4629      	mov	r1, r5
 800b55c:	ee10 0a10 	vmov	r0, s0
 800b560:	2200      	movs	r2, #0
 800b562:	f7f5 f869 	bl	8000638 <__aeabi_dmul>
 800b566:	4b37      	ldr	r3, [pc, #220]	; (800b644 <scalbn+0x104>)
 800b568:	429e      	cmp	r6, r3
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	da10      	bge.n	800b592 <scalbn+0x52>
 800b570:	a32b      	add	r3, pc, #172	; (adr r3, 800b620 <scalbn+0xe0>)
 800b572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b576:	e03a      	b.n	800b5ee <scalbn+0xae>
 800b578:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b57c:	428a      	cmp	r2, r1
 800b57e:	d10c      	bne.n	800b59a <scalbn+0x5a>
 800b580:	ee10 2a10 	vmov	r2, s0
 800b584:	4620      	mov	r0, r4
 800b586:	4629      	mov	r1, r5
 800b588:	f7f4 fea0 	bl	80002cc <__adddf3>
 800b58c:	4604      	mov	r4, r0
 800b58e:	460d      	mov	r5, r1
 800b590:	e019      	b.n	800b5c6 <scalbn+0x86>
 800b592:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b596:	460b      	mov	r3, r1
 800b598:	3a36      	subs	r2, #54	; 0x36
 800b59a:	4432      	add	r2, r6
 800b59c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b5a0:	428a      	cmp	r2, r1
 800b5a2:	dd08      	ble.n	800b5b6 <scalbn+0x76>
 800b5a4:	2d00      	cmp	r5, #0
 800b5a6:	a120      	add	r1, pc, #128	; (adr r1, 800b628 <scalbn+0xe8>)
 800b5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5ac:	da1c      	bge.n	800b5e8 <scalbn+0xa8>
 800b5ae:	a120      	add	r1, pc, #128	; (adr r1, 800b630 <scalbn+0xf0>)
 800b5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5b4:	e018      	b.n	800b5e8 <scalbn+0xa8>
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	dd08      	ble.n	800b5cc <scalbn+0x8c>
 800b5ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b5be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5c6:	ec45 4b10 	vmov	d0, r4, r5
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b5d0:	da19      	bge.n	800b606 <scalbn+0xc6>
 800b5d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b5dc:	dd0a      	ble.n	800b5f4 <scalbn+0xb4>
 800b5de:	a112      	add	r1, pc, #72	; (adr r1, 800b628 <scalbn+0xe8>)
 800b5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e2      	bne.n	800b5ae <scalbn+0x6e>
 800b5e8:	a30f      	add	r3, pc, #60	; (adr r3, 800b628 <scalbn+0xe8>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f5 f823 	bl	8000638 <__aeabi_dmul>
 800b5f2:	e7cb      	b.n	800b58c <scalbn+0x4c>
 800b5f4:	a10a      	add	r1, pc, #40	; (adr r1, 800b620 <scalbn+0xe0>)
 800b5f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0b8      	beq.n	800b570 <scalbn+0x30>
 800b5fe:	a10e      	add	r1, pc, #56	; (adr r1, 800b638 <scalbn+0xf8>)
 800b600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b604:	e7b4      	b.n	800b570 <scalbn+0x30>
 800b606:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b60a:	3236      	adds	r2, #54	; 0x36
 800b60c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b610:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b614:	4620      	mov	r0, r4
 800b616:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <scalbn+0x108>)
 800b618:	2200      	movs	r2, #0
 800b61a:	e7e8      	b.n	800b5ee <scalbn+0xae>
 800b61c:	f3af 8000 	nop.w
 800b620:	c2f8f359 	.word	0xc2f8f359
 800b624:	01a56e1f 	.word	0x01a56e1f
 800b628:	8800759c 	.word	0x8800759c
 800b62c:	7e37e43c 	.word	0x7e37e43c
 800b630:	8800759c 	.word	0x8800759c
 800b634:	fe37e43c 	.word	0xfe37e43c
 800b638:	c2f8f359 	.word	0xc2f8f359
 800b63c:	81a56e1f 	.word	0x81a56e1f
 800b640:	43500000 	.word	0x43500000
 800b644:	ffff3cb0 	.word	0xffff3cb0
 800b648:	3c900000 	.word	0x3c900000

0800b64c <_init>:
 800b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64e:	bf00      	nop
 800b650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b652:	bc08      	pop	{r3}
 800b654:	469e      	mov	lr, r3
 800b656:	4770      	bx	lr

0800b658 <_fini>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	bf00      	nop
 800b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65e:	bc08      	pop	{r3}
 800b660:	469e      	mov	lr, r3
 800b662:	4770      	bx	lr
